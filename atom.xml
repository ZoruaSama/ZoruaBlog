<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zorua&#39;s Blog</title>
  
  
  <link href="https://zoruasama.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://zoruasama.gitee.io/"/>
  <updated>2022-04-23T12:34:39.991Z</updated>
  <id>https://zoruasama.gitee.io/</id>
  
  <author>
    <name>Zorua</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>目标检测 | YOLO 系列算法发展历程</title>
    <link href="https://zoruasama.gitee.io/2022/04/23/CV_objectDetection_3/"/>
    <id>https://zoruasama.gitee.io/2022/04/23/CV_objectDetection_3/</id>
    <published>2022-04-23T12:30:00.000Z</published>
    <updated>2022-04-23T12:34:39.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思维导图"><a class="markdownIt-Anchor" href="#思维导图"></a> 思维导图</h1><blockquote class="pullquote mindmap mindmap-md"><ul><li>YOLO 系列算法发展历程<ul><li>学习资料</li><li>YOLO 原理简述</li><li>YOLO 开山之作 —— YOLOv1</li><li>YOLOv2</li><li>YOLOv3</li></ul></li></ul></blockquote><h1 id="学习资料"><a class="markdownIt-Anchor" href="#学习资料"></a> 学习资料</h1><ul><li><a href="https://www.paddlepaddle.org.cn">PaddlePaddle</a></li></ul><h1 id="yolo-原理简述"><a class="markdownIt-Anchor" href="#yolo-原理简述"></a> YOLO 原理简述</h1><p>以YOLOv1为例，简述YOLO的核心思想。</p><ul><li>将图像划分成SxS个网络</li><li>物体bbox中心落在哪个网格上，就由该网格对应锚框负责检测该物体。</li></ul><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220423180810.png" alt="" /></p><ul><li>输出特征图的宽度、高度（H，W）为SxS，即SxS个网格。</li><li>输出特征图的通道上有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>w</mi><mo separator="true">,</mo><mi>h</mi><mo separator="true">,</mo><msub><mi>P</mi><mrow><mi>o</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi></mrow></msub><mo separator="true">,</mo><mi>c</mi><mi>l</mi><mi>a</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>f</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><mi>o</mi><mi>n</mi><mi>e</mi><mtext>  </mtext><mi>h</mi><mi>o</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x,y,w,h,P_{object},classification(one \; hot)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>等信息。</li><li>在官方提出的YOLOv1中，特征图的每个位置预测两个bounding box（bbox），而每个bbox包含五个输出参数：置信度，矩形框参数，共10个参数，再加上20个类别，一共就是30了。置信度C的作用是判断此处是否有目标的中心点。每个网格都会给出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>5</mn><mi>B</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">5B+C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span>个预测参数，因此，网络最终输出的预测参数总量就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>×</mo><mi>S</mi><mo>×</mo><mo stretchy="false">(</mo><mn>5</mn><mi>B</mi><mo>+</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S\times S \times (5B+C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span><ul><li><em>之所以是20个类别，是因为那时候的数据集只有PASCAL VOC，共20个类别，COCO还没提出来。</em></li></ul></li></ul><p>因此，YOLOv1就是在每个网格上去做预测，理想情况下，包含了物体中心点的网格会有很高的置信度输出，而不包含中心点的网格的置信度输出应该十分接近0。</p><p>总的来说，YOLOv1一共有三部分输出，分别是objectness、class以及bbox：</p><ul><li>objectness就是上面所说的<strong>框的置信度</strong>，用于表征该网格是否有物体；</li><li>class就是<strong>类别预测</strong>；</li><li>而bbox就是<strong>边界框(bounding box)</strong>。</li><li></li></ul><h1 id="yolo-开山之作-yolov1"><a class="markdownIt-Anchor" href="#yolo-开山之作-yolov1"></a> YOLO 开山之作 —— YOLOv1</h1><ul><li>单阶段目标检测模型</li><li>名字来源是 You Only Look Once</li><li>将目标检测当做一个单一的回归任务，<strong>仅使用一个卷积神经网络端到端地实现检测物体的目的</strong>。</li></ul><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220423180654.png" alt="" /></p><h1 id="yolov2"><a class="markdownIt-Anchor" href="#yolov2"></a> YOLOv2</h1><ul><li>优化方法<ul><li>骨干网络：224x224 -&gt; 448x448，DarkNet19</li><li>全卷积网络结构：Conv + Batch Norm</li><li>KMeans 聚类 Anchor</li><li>多尺度训练</li></ul></li><li>待改进点<ul><li>小目标上召回率不高</li><li>靠近的群体目标检测效果不好</li><li>检测精度还有优化空间</li></ul></li></ul><h1 id="yolov3"><a class="markdownIt-Anchor" href="#yolov3"></a> YOLOv3</h1><ul><li>优化方法<ul><li>骨干网络：DarkNet53</li><li>多尺度预测</li><li>跨尺度特征融合</li><li>COCO数据集聚类9种不同尺度Anchor，每个尺度3个</li><li>分类使用Sigmoid激活，支持目标多分类</li></ul></li><li>待改进点<ul><li>召回率相对较低</li><li>靠近的群体目标检测效果较差</li><li>定位精度仍需优化</li></ul></li></ul><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;思维导图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#思维导图&quot;&gt;&lt;/a&gt; 思维导图&lt;/h1&gt;
&lt;blockquote class=&quot;pullquote mindmap mindmap-md&quot;&gt;&lt;ul&gt;
&lt;li&gt;YOLO 系列算法发展</summary>
      
    
    
    
    <category term="计算机视觉" scheme="https://zoruasama.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="计算机视觉" scheme="https://zoruasama.gitee.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    <category term="目标检测" scheme="https://zoruasama.gitee.io/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 | Python 数据分析</title>
    <link href="https://zoruasama.gitee.io/2022/04/23/DeepLearning_1/"/>
    <id>https://zoruasama.gitee.io/2022/04/23/DeepLearning_1/</id>
    <published>2022-04-23T12:30:00.000Z</published>
    <updated>2022-04-23T12:26:57.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><div class="snote guide"><p>本文章转载自[作者丨Jack Stark@知乎](https://zhuanlan.zhihu.com/p/104119343)</p></div><p>Python数据分析主要用到numpy、pandas等库，虽然简单，但是没事多复习一下，可以减少使用时搜索查询的时间。</p><h1 id="npndarray-pdseries和pddataframe的属性和方法"><a class="markdownIt-Anchor" href="#npndarray-pdseries和pddataframe的属性和方法"></a> np.ndarray, pd.Series和pd.DataFrame的属性和方法</h1><p>np.array的属性和方法见</p><p><a href="https://link.zhihu.com/?target=https%3A//docs.scipy.org/doc/numpy/reference/arrays.ndarray.html">https://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html​docs.scipy.org/doc/numpy/reference/arrays.ndarray.html</a></p><p>pd.Series的属性和方法见</p><p><a href="https://link.zhihu.com/?target=https%3A//pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html">pandas.Series - pandas 0.25.3 documentation​pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html</a></p><p>pd.DataFrame的属性和方法见</p><p><a href="https://link.zhihu.com/?target=https%3A//pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html">pandas.DataFrame - pandas 0.25.3 documentation​pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html</a></p><h1 id="dataframe的统计"><a class="markdownIt-Anchor" href="#dataframe的统计"></a> DataFrame的统计</h1><p><img src="vx_images/113443117236146.jpeg" alt="" /></p><h1 id="dataframe按照特定列排序"><a class="markdownIt-Anchor" href="#dataframe按照特定列排序"></a> DataFrame按照特定列排序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;<span class="string">&#x27;col_1&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>], <span class="string">&#x27;col_2&#x27;</span>:[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>], <span class="string">&#x27;col_3&#x27;</span>:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">  col_1 col_2  col_3</span><br><span class="line"><span class="number">0</span>     a     c      <span class="number">1</span></span><br><span class="line"><span class="number">1</span>     b     c      <span class="number">2</span></span><br><span class="line"><span class="number">2</span>     a     d      <span class="number">3</span></span><br><span class="line"><span class="number">3</span>     b     d      <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.sort_values(by=[<span class="string">&#x27;col_1&#x27;</span>,<span class="string">&#x27;col_3&#x27;</span>])</span><br><span class="line">  col_1 col_2  col_3</span><br><span class="line"><span class="number">0</span>     a     c      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>     a     d      <span class="number">3</span></span><br><span class="line"><span class="number">1</span>     b     c      <span class="number">2</span></span><br><span class="line"><span class="number">3</span>     b     d      <span class="number">4</span></span><br></pre></td></tr></table></figure><p>注意，df.sort_values()之后的index还是没变，使用iloc切片是按照排序，使用loc切片是按照index的值，需要注意和排序不一样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.sort_values(by=[<span class="string">&#x27;col_1&#x27;</span>,<span class="string">&#x27;col_3&#x27;</span>], ignore_index=<span class="literal">False</span>).iloc[<span class="number">2</span>,:]</span><br><span class="line">col_1    b</span><br><span class="line">col_2    c</span><br><span class="line">col_3    <span class="number">2</span></span><br><span class="line">Name: <span class="number">1</span>, dtype: <span class="built_in">object</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.sort_values(by=[<span class="string">&#x27;col_1&#x27;</span>,<span class="string">&#x27;col_3&#x27;</span>], ignore_index=<span class="literal">False</span>).loc[<span class="number">2</span>,:]</span><br><span class="line">col_1    a</span><br><span class="line">col_2    d</span><br><span class="line">col_3    <span class="number">3</span></span><br><span class="line">Name: <span class="number">2</span>, dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure><p>可以设置sort_values的ignore_index=True，这样返回的DataFrame的index就是重制了的。也可以使用df = df.reset_index(drop=True)来重置index。</p><h1 id="dataframe的groupby方法"><a class="markdownIt-Anchor" href="#dataframe的groupby方法"></a> DataFrame的groupby方法</h1><p>Pandas的groupby方法可以根据一个或多个键拆分pandas对象，分组计算需要的值，比如计数、均值、标准差等，也可以使用apply和自定义函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;<span class="string">&#x27;col_1&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>], <span class="string">&#x27;col_2&#x27;</span>:[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>], <span class="string">&#x27;col_3&#x27;</span>:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">  col_1 col_2  col_3</span><br><span class="line"><span class="number">0</span>     a     c      <span class="number">1</span></span><br><span class="line"><span class="number">1</span>     b     c      <span class="number">2</span></span><br><span class="line"><span class="number">2</span>     a     d      <span class="number">3</span></span><br><span class="line"><span class="number">3</span>     b     d      <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.groupby(<span class="string">&#x27;col_1&#x27;</span>).mean() <span class="comment"># 针对col_1中不同值分别求均值</span></span><br><span class="line">       col_3</span><br><span class="line">col_1</span><br><span class="line">a          <span class="number">2</span></span><br><span class="line">b          <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.groupby(<span class="string">&#x27;col_1&#x27;</span>).apply(np.mean) <span class="comment"># np.mean没有括号，也可以是自定义函数</span></span><br><span class="line">       col_3</span><br><span class="line">col_1</span><br><span class="line">a        <span class="number">2.0</span></span><br><span class="line">b        <span class="number">3.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.groupby([<span class="string">&#x27;col_1&#x27;</span>,<span class="string">&#x27;col_2&#x27;</span>]).count() <span class="comment"># 计数，count不包含NaN值，而size计数时包含NaN值</span></span><br><span class="line">             col_3</span><br><span class="line">col_1 col_2</span><br><span class="line">a     c          <span class="number">1</span></span><br><span class="line">      d          <span class="number">1</span></span><br><span class="line">b     c          <span class="number">1</span></span><br><span class="line">      d          <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.groupby(<span class="string">&#x27;col_1&#x27;</span>).size()</span><br><span class="line">col_1</span><br><span class="line">a    <span class="number">2</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h1 id="dataframe的索引切片"><a class="markdownIt-Anchor" href="#dataframe的索引切片"></a> DataFrame的索引切片</h1><ul><li>loc: Access a group of rows and columns by label(s) or a boolean array.</li><li>iloc: Purely <strong>integer-location</strong> based indexing for selection by position.</li><li>at: Access <strong>a single value</strong> for a row/column label pair.</li><li>iat: Access <strong>a single value</strong> for1 a row/column pair by <strong>integer position</strong>.</li><li>ix: A primarily <strong>label-location</strong> based indexer, with <strong>integer position</strong> fallback. (已经被删除，被loc和iloc替代)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">  col_1 col_2  col_3</span><br><span class="line"><span class="number">0</span>     a     c      <span class="number">1</span></span><br><span class="line"><span class="number">1</span>     b     c      <span class="number">2</span></span><br><span class="line"><span class="number">2</span>     a     d      <span class="number">3</span></span><br><span class="line"><span class="number">3</span>     b     d      <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.loc[<span class="number">1</span>]</span><br><span class="line">col_1    b</span><br><span class="line">col_2    c</span><br><span class="line">col_3    <span class="number">2</span></span><br><span class="line">Name: <span class="number">1</span>, dtype: <span class="built_in">object</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.loc[<span class="number">1</span>, <span class="string">&#x27;col_1&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.loc[[<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line">  col_1 col_2  col_3</span><br><span class="line"><span class="number">3</span>     b     d      <span class="number">4</span></span><br><span class="line"><span class="number">1</span>     b     c      <span class="number">2</span></span><br><span class="line"><span class="number">0</span>     a     c      <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.iloc[<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;c&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.at[<span class="number">1</span>, <span class="string">&#x27;col_1&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.iat[<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;c&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接通过列标签选取</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[<span class="string">&#x27;col_1&#x27;</span>]</span><br><span class="line"><span class="number">0</span>    a</span><br><span class="line"><span class="number">1</span>    b</span><br><span class="line"><span class="number">2</span>    a</span><br><span class="line"><span class="number">3</span>    b</span><br><span class="line">Name: col_1, dtype: <span class="built_in">object</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据条件选取</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[df[<span class="string">&#x27;col_3&#x27;</span>] == <span class="number">3</span>]</span><br><span class="line">  col_1 col_2  col_3</span><br><span class="line"><span class="number">2</span>     a     d      <span class="number">3</span></span><br></pre></td></tr></table></figure><p>需要注意的是，使用iloc时，冒号右边取不到，使用loc时，冒号右边可以取到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;<span class="string">&#x27;col_1&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>], <span class="string">&#x27;col_2&#x27;</span>:[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>], <span class="string">&#x27;col_3&#x27;</span>:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">  col_1 col_2  col_3</span><br><span class="line"><span class="number">0</span>     a     c      <span class="number">1</span></span><br><span class="line"><span class="number">1</span>     b     c      <span class="number">2</span></span><br><span class="line"><span class="number">2</span>     a     d      <span class="number">3</span></span><br><span class="line"><span class="number">3</span>     b     d      <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.iloc[:<span class="number">1</span>]</span><br><span class="line">  col_1 col_2  col_3</span><br><span class="line"><span class="number">0</span>     a     c      <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.loc[:<span class="number">1</span>]</span><br><span class="line">  col_1 col_2  col_3</span><br><span class="line"><span class="number">0</span>     a     c      <span class="number">1</span></span><br><span class="line"><span class="number">1</span>     b     c      <span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="比较两个dataframe是否相等"><a class="markdownIt-Anchor" href="#比较两个dataframe是否相等"></a> 比较两个dataframe是否相等</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;<span class="string">&#x27;col_1&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>], <span class="string">&#x27;col_2&#x27;</span>:[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>], <span class="string">&#x27;col_3&#x27;</span>:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df2 = pd.DataFrame(&#123;<span class="string">&#x27;col_1&#x27;</span>:[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>], <span class="string">&#x27;col_2&#x27;</span>:[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;d&#x27;</span>], <span class="string">&#x27;col_3&#x27;</span>:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.equals(df2)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="list-dict-nparray和pdseries-pddataframe的转换"><a class="markdownIt-Anchor" href="#list-dict-nparray和pdseries-pddataframe的转换"></a> list、dict、np.array和pd.Series、pd.DataFrame的转换</h1><h2 id="list-dict-nparray-pdseries-pddataframe"><a class="markdownIt-Anchor" href="#list-dict-nparray-pdseries-pddataframe"></a> list、dict、np.array -&gt; pd.Series、pd.DataFrame</h2><p>list -&gt; 其他格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">lis = [[<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1.0</span>], [<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;2.0&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># list -&gt; array</span></span><br><span class="line">arr = np.array(lis)</span><br><span class="line"><span class="built_in">print</span>(arr,<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># list -&gt; series</span></span><br><span class="line">seri = pd.Series(lis)</span><br><span class="line"><span class="built_in">print</span>(seri, <span class="string">&#x27;\n&#x27;</span>, seri.shape, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># list -&gt; DataFrame</span></span><br><span class="line">df = pd.DataFrame(lis)</span><br><span class="line"><span class="built_in">print</span>(df,<span class="string">&#x27;\n&#x27;</span>, df.shape, <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[[&#x27;1&#x27; &#x27;a&#x27; &#x27;1.0&#x27;]</span><br><span class="line"> [&#x27;2&#x27; &#x27;b&#x27; &#x27;2.0&#x27;]] </span><br><span class="line"></span><br><span class="line">0    [1, a, 1.0]</span><br><span class="line">1    [2, b, 2.0]</span><br><span class="line">dtype: object </span><br><span class="line"> (2,) </span><br><span class="line"></span><br><span class="line">   0  1    2</span><br><span class="line">0  1  a    1</span><br><span class="line">1  2  b  2.0 </span><br><span class="line"> (2, 3) </span><br></pre></td></tr></table></figure><p>dict -&gt; 其他格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>:[<span class="number">0</span>,<span class="number">1</span>], <span class="string">&#x27;b&#x27;</span>:[<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;c&#x27;</span>:[<span class="number">4</span>,<span class="number">5</span>]&#125;</span><br><span class="line"><span class="comment"># dict -&gt; series</span></span><br><span class="line">seri = pd.Series(d)</span><br><span class="line"><span class="built_in">print</span>(seri, <span class="string">&#x27;\n&#x27;</span>, seri.shape, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">seri = pd.Series(d, index=[<span class="string">&#x27;row_1&#x27;</span>, <span class="string">&#x27;row_2&#x27;</span>, <span class="string">&#x27;row_3&#x27;</span>]) <span class="comment"># 已经有索引的不要重新指定，否者数据为NaN</span></span><br><span class="line"><span class="built_in">print</span>(seri, <span class="string">&#x27;\n&#x27;</span>, seri.shape, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict -&gt; DataFrame</span></span><br><span class="line">df = pd.DataFrame(d, index=[<span class="string">&#x27;row_1&#x27;</span>, <span class="string">&#x27;row_2&#x27;</span>], columns=[<span class="string">&#x27;col_1&#x27;</span>, <span class="string">&#x27;col_2&#x27;</span>, <span class="string">&#x27;col_3&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df,<span class="string">&#x27;\n&#x27;</span>, df.shape, <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a    [0, 1]</span><br><span class="line">b    [2, 3]</span><br><span class="line">c    [4, 5]</span><br><span class="line">dtype: object </span><br><span class="line"> (3,) </span><br><span class="line"></span><br><span class="line">row_1    NaN</span><br><span class="line">row_2    NaN</span><br><span class="line">row_3    NaN</span><br><span class="line">dtype: object </span><br><span class="line"> (3,) </span><br><span class="line"></span><br><span class="line">      col_1 col_2 col_3</span><br><span class="line">row_1   NaN   NaN   NaN</span><br><span class="line">row_2   NaN   NaN   NaN </span><br><span class="line"> (2, 3) </span><br></pre></td></tr></table></figure><p>array -&gt; 其他格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">arr2 = np.array([[<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1.0</span>], [<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;2.0&#x27;</span>]]) <span class="comment"># array中元素的数据类型需要相同</span></span><br><span class="line"><span class="built_in">print</span>(arr1,<span class="string">&#x27;\n&#x27;</span>, arr2, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># array -&gt; Series</span></span><br><span class="line">seri = pd.Series(arr1)</span><br><span class="line"><span class="built_in">print</span>(seri, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">seri = pd.Series(arr1, index=[<span class="string">&#x27;row_1&#x27;</span>, <span class="string">&#x27;row_2&#x27;</span>, <span class="string">&#x27;row_3&#x27;</span>]) <span class="comment"># 没有索引的可以指定</span></span><br><span class="line"><span class="built_in">print</span>(seri, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># array -&gt; DataFrame</span></span><br><span class="line">df = pd.DataFrame(arr2, index=[<span class="string">&#x27;row_1&#x27;</span>, <span class="string">&#x27;row_2&#x27;</span>], columns=[<span class="string">&#x27;col_1&#x27;</span>, <span class="string">&#x27;col_2&#x27;</span>, <span class="string">&#x27;col_3&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df,<span class="string">&#x27;\n&#x27;</span>, df.shape, <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[1 2 3] </span><br><span class="line"> [[&#x27;1&#x27; &#x27;a&#x27; &#x27;1.0&#x27;]</span><br><span class="line"> [&#x27;2&#x27; &#x27;b&#x27; &#x27;2.0&#x27;]] </span><br><span class="line"></span><br><span class="line">0    1</span><br><span class="line">1    2</span><br><span class="line">2    3</span><br><span class="line">dtype: int64 </span><br><span class="line"></span><br><span class="line">row_1    1</span><br><span class="line">row_2    2</span><br><span class="line">row_3    3</span><br><span class="line">dtype: int64 </span><br><span class="line"></span><br><span class="line">      col_1 col_2 col_3</span><br><span class="line">row_1     1     a   1.0</span><br><span class="line">row_2     2     b   2.0 </span><br><span class="line"> (2, 3) </span><br></pre></td></tr></table></figure><h2 id="pdseries-pddataframe-list-dict-nparray"><a class="markdownIt-Anchor" href="#pdseries-pddataframe-list-dict-nparray"></a> pd.Series、pd.DataFrame -&gt; list、dict、np.array</h2><p>series -&gt; array</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># series -&gt; array</span></span><br><span class="line">seri = pd.Series([<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1.0</span>])</span><br><span class="line">arr = seri.as_matrix()</span><br><span class="line"><span class="built_in">print</span>(arr, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">arr = pd.Series.as_matrix(seri)</span><br><span class="line"><span class="built_in">print</span>(arr, <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1 &#x27;a&#x27; 1.0] </span><br><span class="line"></span><br><span class="line">[1 &#x27;a&#x27; 1.0] </span><br></pre></td></tr></table></figure><p>DataFrame -&gt; array</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DataFrame -&gt; array</span></span><br><span class="line">df = pd.DataFrame([[<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1.0</span>], [<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;2.0&#x27;</span>]])</span><br><span class="line">arr1 = df.as_matrix()</span><br><span class="line"><span class="built_in">print</span>(arr1, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">arr2 = pd.DataFrame.as_matrix(df)</span><br><span class="line"><span class="built_in">print</span>(arr2, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">arr3 = df.values</span><br><span class="line"><span class="built_in">print</span>(arr3, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">arr4 = np.array(df)</span><br><span class="line"><span class="built_in">print</span>(arr4, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">arr5 = df.as_matrix([<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(arr5, <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[[1 &#x27;a&#x27; 1.0]</span><br><span class="line"> [2 &#x27;b&#x27; &#x27;2.0&#x27;]] </span><br><span class="line"></span><br><span class="line">[[1 &#x27;a&#x27; 1.0]</span><br><span class="line"> [2 &#x27;b&#x27; &#x27;2.0&#x27;]] </span><br><span class="line"></span><br><span class="line">[[1 &#x27;a&#x27; 1.0]</span><br><span class="line"> [2 &#x27;b&#x27; &#x27;2.0&#x27;]] </span><br><span class="line"></span><br><span class="line">[[1 &#x27;a&#x27; 1.0]</span><br><span class="line"> [2 &#x27;b&#x27; &#x27;2.0&#x27;]] </span><br><span class="line"></span><br><span class="line">[[&#x27;a&#x27;]</span><br><span class="line"> [&#x27;b&#x27;]] </span><br></pre></td></tr></table></figure><p>dataframe转成dict的需求是多样的，因此它的to_dict方法需要注意orient的取值：</p><ul><li>orient默认值是’dic’，返回的是字典的字典；</li><li>list返回的是列表的字典；</li><li>series返回的是序列的字典；</li><li>records返回的是字典的列表。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DataFrame -&gt; dic</span></span><br><span class="line">df = pd.DataFrame([[<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1.0</span>], [<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">2.0</span>]],index=[<span class="string">&#x27;row_1&#x27;</span>, <span class="string">&#x27;row_2&#x27;</span>], columns=[<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;decimal&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dic = df.to_dict()</span><br><span class="line"><span class="built_in">print</span>(dic, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dic = df.to_dict(orient=<span class="string">&#x27;dic&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dic, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dic = df.to_dict(orient=<span class="string">&#x27;list&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dic, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dic = df.to_dict(orient=<span class="string">&#x27;series&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dic, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dic = df.to_dict(orient=<span class="string">&#x27;records&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dic, <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">       int string  decimal</span><br><span class="line">row_1    1      a      1.0</span><br><span class="line">row_2    2      b      2.0 </span><br><span class="line"></span><br><span class="line">&#123;&#x27;int&#x27;: &#123;&#x27;row_1&#x27;: 1, &#x27;row_2&#x27;: 2&#125;, &#x27;string&#x27;: &#123;&#x27;row_1&#x27;: &#x27;a&#x27;, &#x27;row_2&#x27;: &#x27;b&#x27;&#125;, &#x27;decimal&#x27;: &#123;&#x27;row_1&#x27;: 1.0, &#x27;row_2&#x27;: 2.0&#125;&#125; </span><br><span class="line"></span><br><span class="line">&#123;&#x27;int&#x27;: &#123;&#x27;row_1&#x27;: 1, &#x27;row_2&#x27;: 2&#125;, &#x27;string&#x27;: &#123;&#x27;row_1&#x27;: &#x27;a&#x27;, &#x27;row_2&#x27;: &#x27;b&#x27;&#125;, &#x27;decimal&#x27;: &#123;&#x27;row_1&#x27;: 1.0, &#x27;row_2&#x27;: 2.0&#125;&#125; </span><br><span class="line"></span><br><span class="line">&#123;&#x27;int&#x27;: [1, 2], &#x27;string&#x27;: [&#x27;a&#x27;, &#x27;b&#x27;], &#x27;decimal&#x27;: [1.0, 2.0]&#125; </span><br><span class="line"></span><br><span class="line">&#123;&#x27;int&#x27;: row_1    1</span><br><span class="line">row_2    2</span><br><span class="line">Name: int, dtype: int64, &#x27;string&#x27;: row_1    a</span><br><span class="line">row_2    b</span><br><span class="line">Name: string, dtype: object, &#x27;decimal&#x27;: row_1    1.0</span><br><span class="line">row_2    2.0</span><br><span class="line">Name: decimal, dtype: float64&#125; </span><br><span class="line"></span><br><span class="line">[&#123;&#x27;int&#x27;: 1, &#x27;string&#x27;: &#x27;a&#x27;, &#x27;decimal&#x27;: 1.0&#125;, &#123;&#x27;int&#x27;: 2, &#x27;string&#x27;: &#x27;b&#x27;, &#x27;decimal&#x27;: 2.0&#125;] </span><br></pre></td></tr></table></figure><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><p>numpy的array和ndarray的区别：ndarray是一个多维数组类，也是numpy最重要的数据结构。np.array不是一个类，是创建ndarray的方便的函数。</p><h1 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> 参考文献</h1><ol><li>numpy文档</li><li>pandas文档</li></ol><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;div class=&quot;snote guide&quot;&gt;&lt;p&gt;
本文章转载自[作者丨Jack Stark@知乎](https://zhuanlan.zhih</summary>
      
    
    
    
    <category term="深度学习" scheme="https://zoruasama.gitee.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://zoruasama.gitee.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="人工智能" scheme="https://zoruasama.gitee.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>深度学习 | PyTorch 常用代码段</title>
    <link href="https://zoruasama.gitee.io/2022/04/22/DeepLearning_0/"/>
    <id>https://zoruasama.gitee.io/2022/04/22/DeepLearning_0/</id>
    <published>2022-04-22T08:40:00.000Z</published>
    <updated>2022-04-22T08:42:31.779Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css"><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><div class="snote guide"><p>本文章转载自[作者丨Jack Stark@知乎](https://zhuanlan.zhihu.com/p/104019160)</p></div><p>PyTorch最好的资料是<a href="https://link.zhihu.com/?target=https%3A//pytorch.org/docs/stable/index.html">官方文档</a>。本文是PyTorch常用代码段，在参考资料[1](张皓：PyTorch Cookbook)的基础上做了一些修补，方便使用时查阅。</p><h1 id="基本配置"><a class="markdownIt-Anchor" href="#基本配置"></a> 基本配置</h1><h2 id="导入包和版本查询"><a class="markdownIt-Anchor" href="#导入包和版本查询"></a> 导入包和版本查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line"><span class="built_in">print</span>(torch.version.cuda)</span><br><span class="line"><span class="built_in">print</span>(torch.backends.cudnn.version())</span><br><span class="line"><span class="built_in">print</span>(torch.cuda.get_device_name(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><h2 id="可复现性"><a class="markdownIt-Anchor" href="#可复现性"></a> 可复现性</h2><p>在硬件设备（CPU、GPU）不同时，完全的可复现性无法保证，即使随机种子相同。但是，在同一个设备上，应该保证可复现性。具体做法是，在程序开始的时候固定torch的随机种子，同时也把numpy的随机种子固定。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br><span class="line">torch.cuda.manual_seed_all(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">torch.backends.cudnn.deterministic = <span class="literal">True</span></span><br><span class="line">torch.backends.cudnn.benchmark = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="显卡设置"><a class="markdownIt-Anchor" href="#显卡设置"></a> 显卡设置</h2><p>如果只需要一张显卡</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Device configuration</span></span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果需要指定多张显卡，比如0，1号显卡。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;CUDA_VISIBLE_DEVICES&#x27;</span>] = <span class="string">&#x27;0,1&#x27;</span></span><br></pre></td></tr></table></figure><p>也可以在命令行运行代码时设置显卡：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CUDA_VISIBLE_DEVICES=0,1 python train.py</span><br></pre></td></tr></table></figure><p>清除显存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.empty_cache()</span><br></pre></td></tr></table></figure><p>也可以使用在命令行重置GPU的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi --gpu-reset -i [gpu_id]</span><br></pre></td></tr></table></figure><h1 id="张量tensor处理"><a class="markdownIt-Anchor" href="#张量tensor处理"></a> 张量(Tensor)处理</h1><h2 id="张量的数据类型"><a class="markdownIt-Anchor" href="#张量的数据类型"></a> 张量的数据类型</h2><p>PyTorch有9种CPU张量类型和9种GPU张量类型。</p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/vnote_notebooks/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/pytorch%20%20%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5.md/154582316246922.jpeg" alt="" /></p><h2 id="张量基本信息"><a class="markdownIt-Anchor" href="#张量基本信息"></a> 张量基本信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tensor = torch.randn(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(tensor.<span class="built_in">type</span>())  <span class="comment"># 数据类型</span></span><br><span class="line"><span class="built_in">print</span>(tensor.size())  <span class="comment"># 张量的shape，是个元组</span></span><br><span class="line"><span class="built_in">print</span>(tensor.dim())   <span class="comment"># 维度的数量</span></span><br></pre></td></tr></table></figure><h2 id="命名张量"><a class="markdownIt-Anchor" href="#命名张量"></a> 命名张量</h2><p>张量命名是一个非常有用的方法，这样可以方便地使用维度的名字来做索引或其他操作，大大提高了可读性、易用性，防止出错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在PyTorch 1.3之前，需要使用注释</span></span><br><span class="line"><span class="comment"># Tensor[N, C, H, W]</span></span><br><span class="line">images = torch.randn(<span class="number">32</span>, <span class="number">3</span>, <span class="number">56</span>, <span class="number">56</span>)</span><br><span class="line">images.<span class="built_in">sum</span>(dim=<span class="number">1</span>)</span><br><span class="line">images.select(dim=<span class="number">1</span>, index=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># PyTorch 1.3之后</span></span><br><span class="line">NCHW = [‘N’, ‘C’, ‘H’, ‘W’]</span><br><span class="line">images = torch.randn(<span class="number">32</span>, <span class="number">3</span>, <span class="number">56</span>, <span class="number">56</span>, names=NCHW)</span><br><span class="line">images.<span class="built_in">sum</span>(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">images.select(<span class="string">&#x27;C&#x27;</span>, index=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 也可以这么设置</span></span><br><span class="line">tensor = torch.rand(<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,names=(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;W&#x27;</span>))</span><br><span class="line"><span class="comment"># 使用align_to可以对维度方便地排序</span></span><br><span class="line">tensor = tensor.align_to(<span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;W&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="数据类型转换"><a class="markdownIt-Anchor" href="#数据类型转换"></a> 数据类型转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置默认类型，pytorch中的FloatTensor远远快于DoubleTensor</span></span><br><span class="line">torch.set_default_tensor_type(torch.FloatTensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类型转换</span></span><br><span class="line">tensor = tensor.cuda()</span><br><span class="line">tensor = tensor.cpu()</span><br><span class="line">tensor = tensor.<span class="built_in">float</span>()</span><br><span class="line">tensor = tensor.long()</span><br></pre></td></tr></table></figure><h2 id="torchtensor与npndarray转换"><a class="markdownIt-Anchor" href="#torchtensor与npndarray转换"></a> torch.Tensor与np.ndarray转换</h2><p>除了CharTensor，其他所有CPU上的张量都支持转换为numpy格式然后再转换回来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ndarray = tensor.cpu().numpy()</span><br><span class="line">tensor = torch.from_numpy(ndarray).<span class="built_in">float</span>()</span><br><span class="line">tensor = torch.from_numpy(ndarray.copy()).<span class="built_in">float</span>() <span class="comment"># If ndarray has negative stride.</span></span><br></pre></td></tr></table></figure><h2 id="torchtensor与pilimage转换"><a class="markdownIt-Anchor" href="#torchtensor与pilimage转换"></a> Torch.tensor与PIL.Image转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pytorch中的张量默认采用[N, C, H, W]的顺序，并且数据范围在[0,1]，需要进行转置和规范化</span></span><br><span class="line"><span class="comment"># torch.Tensor -&gt; PIL.Image</span></span><br><span class="line">image = PIL.Image.fromarray(torch.clamp(tensor*<span class="number">255</span>, <span class="built_in">min</span>=<span class="number">0</span>, <span class="built_in">max</span>=<span class="number">255</span>).byte().permute(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>).cpu().numpy())</span><br><span class="line">image = torchvision.transforms.functional.to_pil_image(tensor)  <span class="comment"># Equivalently way</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PIL.Image -&gt; torch.Tensor</span></span><br><span class="line">path = <span class="string">r&#x27;./figure.jpg&#x27;</span></span><br><span class="line">tensor = torch.from_numpy(np.asarray(PIL.Image.<span class="built_in">open</span>(path))).permute(<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>).<span class="built_in">float</span>() / <span class="number">255</span></span><br><span class="line">tensor = torchvision.transforms.functional.to_tensor(PIL.Image.<span class="built_in">open</span>(path)) <span class="comment"># Equivalently way</span></span><br></pre></td></tr></table></figure><h2 id="npndarray与pilimage的转换"><a class="markdownIt-Anchor" href="#npndarray与pilimage的转换"></a> np.ndarray与PIL.Image的转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">image = PIL.Image.fromarray(ndarray.astype(np.uint8))</span><br><span class="line"></span><br><span class="line">ndarray = np.asarray(PIL.Image.<span class="built_in">open</span>(path))</span><br></pre></td></tr></table></figure><h2 id="从只包含一个元素的张量中提取值"><a class="markdownIt-Anchor" href="#从只包含一个元素的张量中提取值"></a> 从只包含一个元素的张量中提取值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = torch.rand(<span class="number">1</span>).item()</span><br></pre></td></tr></table></figure><h2 id="张量形变"><a class="markdownIt-Anchor" href="#张量形变"></a> 张量形变</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在将卷积层输入全连接层的情况下通常需要对张量做形变处理，</span></span><br><span class="line"><span class="comment"># 相比torch.view，torch.reshape可以自动处理输入张量不连续的情况。</span></span><br><span class="line">tensor = torch.rand(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">shape = (<span class="number">6</span>, <span class="number">4</span>)</span><br><span class="line">tensor = torch.reshape(tensor, shape)</span><br></pre></td></tr></table></figure><h2 id="打乱顺序"><a class="markdownIt-Anchor" href="#打乱顺序"></a> 打乱顺序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tensor = tensor[torch.randperm(tensor.size(<span class="number">0</span>))]  <span class="comment"># 打乱第一个维度</span></span><br></pre></td></tr></table></figure><h2 id="水平翻转"><a class="markdownIt-Anchor" href="#水平翻转"></a> 水平翻转</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pytorch不支持tensor[::-1]这样的负步长操作，水平翻转可以通过张量索引实现</span></span><br><span class="line"><span class="comment"># 假设张量的维度为[N, D, H, W].</span></span><br><span class="line">tensor = tensor[:,:,:,torch.arange(tensor.size(<span class="number">3</span>) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>).long()]</span><br></pre></td></tr></table></figure><h2 id="复制张量"><a class="markdownIt-Anchor" href="#复制张量"></a> 复制张量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Operation                 |  New/Shared memory | Still in computation graph |</span><br><span class="line">tensor.clone()            # |        New         |          Yes               |</span><br><span class="line">tensor.detach()           # |      Shared        |          No                |</span><br><span class="line">tensor.detach.clone()()   # |        New         |          No                |</span><br></pre></td></tr></table></figure><h2 id="张量拼接"><a class="markdownIt-Anchor" href="#张量拼接"></a> 张量拼接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">注意torch.cat和torch.stack的区别在于torch.cat沿着给定的维度拼接，</span></span><br><span class="line"><span class="string">而torch.stack会新增一维。例如当参数是3个10x5的张量，torch.cat的结果是30x5的张量，</span></span><br><span class="line"><span class="string">而torch.stack的结果是3x10x5的张量。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">tensor = torch.cat(list_of_tensors, dim=<span class="number">0</span>)</span><br><span class="line">tensor = torch.stack(list_of_tensors, dim=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="将整数标签转为one-hot编码"><a class="markdownIt-Anchor" href="#将整数标签转为one-hot编码"></a> 将整数标签转为one-hot编码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pytorch的标记默认从0开始</span></span><br><span class="line">tensor = torch.tensor([<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line">N = tensor.size(<span class="number">0</span>)</span><br><span class="line">num_classes = <span class="number">4</span></span><br><span class="line">one_hot = torch.zeros(N, num_classes).long()</span><br><span class="line">one_hot.scatter_(dim=<span class="number">1</span>, index=torch.unsqueeze(tensor, dim=<span class="number">1</span>), src=torch.ones(N, num_classes).long())</span><br></pre></td></tr></table></figure><h2 id="得到非零元素"><a class="markdownIt-Anchor" href="#得到非零元素"></a> 得到非零元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">torch.nonzero(tensor)               <span class="comment"># index of non-zero elements</span></span><br><span class="line">torch.nonzero(tensor==<span class="number">0</span>)            <span class="comment"># index of zero elements</span></span><br><span class="line">torch.nonzero(tensor).size(<span class="number">0</span>)       <span class="comment"># number of non-zero elements</span></span><br><span class="line">torch.nonzero(tensor == <span class="number">0</span>).size(<span class="number">0</span>)  <span class="comment"># number of zero elements</span></span><br></pre></td></tr></table></figure><h2 id="判断两个张量相等"><a class="markdownIt-Anchor" href="#判断两个张量相等"></a> 判断两个张量相等</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">torch.allclose(tensor1, tensor2)  <span class="comment"># float tensor</span></span><br><span class="line">torch.equal(tensor1, tensor2)     <span class="comment"># int tensor</span></span><br></pre></td></tr></table></figure><h2 id="张量扩展"><a class="markdownIt-Anchor" href="#张量扩展"></a> 张量扩展</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Expand tensor of shape 64*512 to shape 64*512*7*7.</span></span><br><span class="line">tensor = torch.rand(<span class="number">64</span>,<span class="number">512</span>)</span><br><span class="line">torch.reshape(tensor, (<span class="number">64</span>, <span class="number">512</span>, <span class="number">1</span>, <span class="number">1</span>)).expand(<span class="number">64</span>, <span class="number">512</span>, <span class="number">7</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure><h2 id="矩阵乘法"><a class="markdownIt-Anchor" href="#矩阵乘法"></a> 矩阵乘法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Matrix multiplcation: (m*n) * (n*p) * -&gt; (m*p).</span></span><br><span class="line">result = torch.mm(tensor1, tensor2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Batch matrix multiplication: (b*m*n) * (b*n*p) -&gt; (b*m*p)</span></span><br><span class="line">result = torch.bmm(tensor1, tensor2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Element-wise multiplication.</span></span><br><span class="line">result = tensor1 * tensor2</span><br></pre></td></tr></table></figure><h2 id="计算两组数据之间的两两欧式距离"><a class="markdownIt-Anchor" href="#计算两组数据之间的两两欧式距离"></a> 计算两组数据之间的两两欧式距离</h2><p>利用broadcast机制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dist = torch.sqrt(torch.sum((X1[:,None,:] - X2) ** 2, dim=2))</span><br></pre></td></tr></table></figure><h1 id="模型定义和操作"><a class="markdownIt-Anchor" href="#模型定义和操作"></a> 模型定义和操作</h1><h2 id="一个简单两层卷积网络的示例"><a class="markdownIt-Anchor" href="#一个简单两层卷积网络的示例"></a> 一个简单两层卷积网络的示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># convolutional neural network (2 convolutional layers)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_classes=<span class="number">10</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ConvNet, self).__init__()</span><br><span class="line">        self.layer1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">1</span>, <span class="number">16</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">16</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>))</span><br><span class="line">        self.layer2 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">16</span>, <span class="number">32</span>, kernel_size=<span class="number">5</span>, stride=<span class="number">1</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">32</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>))</span><br><span class="line">        self.fc = nn.Linear(<span class="number">7</span>*<span class="number">7</span>*<span class="number">32</span>, num_classes)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        out = self.layer1(x)</span><br><span class="line">        out = self.layer2(out)</span><br><span class="line">        out = out.reshape(out.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        out = self.fc(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = ConvNet(num_classes).to(device)</span><br></pre></td></tr></table></figure><p>卷积层的计算和展示可以用<a href="https://link.zhihu.com/?target=https%3A//ezyang.github.io/convolution-visualizer/index.html">这个网站</a>辅助。</p><h2 id="双线性汇合bilinear-pooling"><a class="markdownIt-Anchor" href="#双线性汇合bilinear-pooling"></a> 双线性汇合（bilinear pooling）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">X = torch.reshape(N, D, H * W)                        <span class="comment"># Assume X has shape N*D*H*W</span></span><br><span class="line">X = torch.bmm(X, torch.transpose(X, <span class="number">1</span>, <span class="number">2</span>)) / (H * W)  <span class="comment"># Bilinear pooling</span></span><br><span class="line"><span class="keyword">assert</span> X.size() == (N, D, D)</span><br><span class="line">X = torch.reshape(X, (N, D * D))</span><br><span class="line">X = torch.sign(X) * torch.sqrt(torch.<span class="built_in">abs</span>(X) + <span class="number">1e-5</span>)   <span class="comment"># Signed-sqrt normalization</span></span><br><span class="line">X = torch.nn.functional.normalize(X)                  <span class="comment"># L2 normalization</span></span><br></pre></td></tr></table></figure><h2 id="多卡同步-bnbatch-normalization"><a class="markdownIt-Anchor" href="#多卡同步-bnbatch-normalization"></a> 多卡同步 BN（Batch normalization）</h2><p>当使用 torch.nn.DataParallel 将代码运行在多张 GPU 卡上时，PyTorch 的 BN 层默认操作是各卡上数据独立地计算均值和标准差，同步 BN 使用所有卡上的数据一起计算 BN 层的均值和标准差，缓解了当批量大小（batch size）比较小时对均值和标准差估计不准的情况，是在目标检测等任务中一个有效的提升性能的技巧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sync_bn = torch.nn.SyncBatchNorm(num_features, eps=<span class="number">1e-05</span>, momentum=<span class="number">0.1</span>, affine=<span class="literal">True</span>, </span><br><span class="line">                                 track_running_stats=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="将已有网络的所有bn层改为同步bn层"><a class="markdownIt-Anchor" href="#将已有网络的所有bn层改为同步bn层"></a> 将已有网络的所有BN层改为同步BN层</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertBNtoSyncBN</span>(<span class="params">module, process_group=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;Recursively replace all BN layers to SyncBN layer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        module[torch.nn.Module]. Network</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(module, torch.nn.modules.batchnorm._BatchNorm):</span><br><span class="line">        sync_bn = torch.nn.SyncBatchNorm(module.num_features, module.eps, module.momentum, </span><br><span class="line">                                         module.affine, module.track_running_stats, process_group)</span><br><span class="line">        sync_bn.running_mean = module.running_mean</span><br><span class="line">        sync_bn.running_var = module.running_var</span><br><span class="line">        <span class="keyword">if</span> module.affine:</span><br><span class="line">            sync_bn.weight = module.weight.clone().detach()</span><br><span class="line">            sync_bn.bias = module.bias.clone().detach()</span><br><span class="line">        <span class="keyword">return</span> sync_bn</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> name, child_module <span class="keyword">in</span> module.named_children():</span><br><span class="line">            <span class="built_in">setattr</span>(module, name) = convert_syncbn_model(child_module, process_group=process_group))</span><br><span class="line">        <span class="keyword">return</span> module</span><br></pre></td></tr></table></figure><h2 id="类似-bn-滑动平均"><a class="markdownIt-Anchor" href="#类似-bn-滑动平均"></a> 类似 BN 滑动平均</h2><p>如果要实现类似 BN 滑动平均的操作，在 forward 函数中要使用原地（inplace）操作给滑动平均赋值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BN</span>(<span class="params">torch.nn.Module</span>)</span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        ...</span><br><span class="line">        self.register_buffer(<span class="string">&#x27;running_mean&#x27;</span>, torch.zeros(num_features))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        ...</span><br><span class="line">        self.running_mean += momentum * (current - self.running_mean)</span><br></pre></td></tr></table></figure><h2 id="计算模型整体参数量"><a class="markdownIt-Anchor" href="#计算模型整体参数量"></a> 计算模型整体参数量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num_parameters = <span class="built_in">sum</span>(torch.numel(parameter) <span class="keyword">for</span> parameter <span class="keyword">in</span> model.parameters())</span><br></pre></td></tr></table></figure><h2 id="查看网络中的参数"><a class="markdownIt-Anchor" href="#查看网络中的参数"></a> 查看网络中的参数</h2><p>可以通过model.state_dict()或者model.named_parameters()函数查看现在的全部可训练参数（包括通过继承得到的父类中的参数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">params = <span class="built_in">list</span>(model.named_parameters())</span><br><span class="line">(name, param) = params[<span class="number">28</span>]</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(param.grad)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------------------------------------------------&#x27;</span>)</span><br><span class="line">(name2, param2) = params[<span class="number">29</span>]</span><br><span class="line"><span class="built_in">print</span>(name2)</span><br><span class="line"><span class="built_in">print</span>(param2.grad)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------------------------------------------&#x27;</span>)</span><br><span class="line">(name1, param1) = params[<span class="number">30</span>]</span><br><span class="line"><span class="built_in">print</span>(name1)</span><br><span class="line"><span class="built_in">print</span>(param1.grad)</span><br></pre></td></tr></table></figure><h2 id="模型可视化使用pytorchviz"><a class="markdownIt-Anchor" href="#模型可视化使用pytorchviz"></a> 模型可视化（使用pytorchviz）</h2><p><a href="https://link.zhihu.com/?target=https%3A//github.com/szagoruyko/pytorchviz">szagoruyko/pytorchviz​github.com/szagoruyko/pytorchviz<img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/vnote_notebooks/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/pytorch%20%20%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5.md/153502316226756.jpeg" alt="" /></a></p><h2 id="类似-keras-的-modelsummary-输出模型信息使用pytorch-summary"><a class="markdownIt-Anchor" href="#类似-keras-的-modelsummary-输出模型信息使用pytorch-summary"></a> 类似 Keras 的 model.summary() 输出模型信息（使用pytorch-summary ）</h2><p><a href="https://link.zhihu.com/?target=https%3A//github.com/sksq96/pytorch-summary">sksq96/pytorch-summary​github.com/sksq96/pytorch-summary<img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/vnote_notebooks/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/pytorch%20%20%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%AE%B5.md/152292316238889.jpeg" alt="" /></a></p><p><strong>模型权重初始化</strong></p><p>注意 model.modules() 和 model.children() 的区别：model.modules() 会迭代地遍历模型的所有子层，而 model.children() 只会遍历模型下的一层。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Common practise for initialization.</span></span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> model.modules():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(layer, torch.nn.Conv2d):</span><br><span class="line">        torch.nn.init.kaiming_normal_(layer.weight, mode=<span class="string">&#x27;fan_out&#x27;</span>,</span><br><span class="line">                                      nonlinearity=<span class="string">&#x27;relu&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> layer.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            torch.nn.init.constant_(layer.bias, val=<span class="number">0.0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(layer, torch.nn.BatchNorm2d):</span><br><span class="line">        torch.nn.init.constant_(layer.weight, val=<span class="number">1.0</span>)</span><br><span class="line">        torch.nn.init.constant_(layer.bias, val=<span class="number">0.0</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(layer, torch.nn.Linear):</span><br><span class="line">        torch.nn.init.xavier_normal_(layer.weight)</span><br><span class="line">        <span class="keyword">if</span> layer.bias <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            torch.nn.init.constant_(layer.bias, val=<span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialization with given tensor.</span></span><br><span class="line">layer.weight = torch.nn.Parameter(tensor)</span><br></pre></td></tr></table></figure><h2 id="提取模型中的某一层"><a class="markdownIt-Anchor" href="#提取模型中的某一层"></a> 提取模型中的某一层</h2><p>modules()会返回模型中所有模块的迭代器，它能够访问到最内层，比如self.layer1.conv1这个模块，还有一个与它们相对应的是name_children()属性以及named_modules(),这两个不仅会返回模块的迭代器，还会返回网络层的名字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取模型中的前两层</span></span><br><span class="line">new_model = nn.Sequential(*<span class="built_in">list</span>(model.children())[:<span class="number">2</span>] </span><br><span class="line"><span class="comment"># 如果希望提取出模型中的所有卷积层，可以像下面这样操作：</span></span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> model.named_modules():</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(layer[<span class="number">1</span>],nn.Conv2d):</span><br><span class="line">         conv_model.add_module(layer[<span class="number">0</span>],layer[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="部分层使用预训练模型"><a class="markdownIt-Anchor" href="#部分层使用预训练模型"></a> 部分层使用预训练模型</h2><p>注意如果保存的模型是 torch.nn.DataParallel，则当前的模型也需要是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.load_state_dict(torch.load(<span class="string">&#x27;model.pth&#x27;</span>), strict=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h2 id="将在-gpu-保存的模型加载到-cpu"><a class="markdownIt-Anchor" href="#将在-gpu-保存的模型加载到-cpu"></a> 将在 GPU 保存的模型加载到 CPU</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.load_state_dict(torch.load(<span class="string">&#x27;model.pth&#x27;</span>, map_location=<span class="string">&#x27;cpu&#x27;</span>))</span><br></pre></td></tr></table></figure><h1 id="导入另一个模型的相同部分到新的模型"><a class="markdownIt-Anchor" href="#导入另一个模型的相同部分到新的模型"></a> 导入另一个模型的相同部分到新的模型</h1><p>模型导入参数时，如果两个模型结构不一致，则直接导入参数会报错。用下面方法可以把另一个模型的相同的部分导入到新的模型中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># model_new代表新的模型</span></span><br><span class="line"><span class="comment"># model_saved代表其他模型，比如用torch.load导入的已保存的模型</span></span><br><span class="line">model_new_dict = model_new.state_dict()</span><br><span class="line">model_common_dict = &#123;k:v <span class="keyword">for</span> k, v <span class="keyword">in</span> model_saved.items() <span class="keyword">if</span> k <span class="keyword">in</span> model_new_dict.keys()&#125;</span><br><span class="line">model_new_dict.update(model_common_dict)</span><br><span class="line">model_new.load_state_dict(model_new_dict)</span><br></pre></td></tr></table></figure><h1 id="数据处理"><a class="markdownIt-Anchor" href="#数据处理"></a> 数据处理</h1><h2 id="计算数据集的均值和标准差"><a class="markdownIt-Anchor" href="#计算数据集的均值和标准差"></a> 计算数据集的均值和标准差</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_mean_and_std</span>(<span class="params">dataset</span>):</span></span><br><span class="line">    <span class="comment"># 输入PyTorch的dataset，输出均值和标准差</span></span><br><span class="line">    mean_r = <span class="number">0</span></span><br><span class="line">    mean_g = <span class="number">0</span></span><br><span class="line">    mean_b = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> img, _ <span class="keyword">in</span> dataset:</span><br><span class="line">        img = np.asarray(img) <span class="comment"># change PIL Image to numpy array</span></span><br><span class="line">        mean_r += np.mean(img[:, :, <span class="number">0</span>])</span><br><span class="line">        mean_g += np.mean(img[:, :, <span class="number">1</span>])</span><br><span class="line">        mean_b += np.mean(img[:, :, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    mean_r /= <span class="built_in">len</span>(dataset)</span><br><span class="line">    mean_g /= <span class="built_in">len</span>(dataset)</span><br><span class="line">    mean_b /= <span class="built_in">len</span>(dataset)</span><br><span class="line"></span><br><span class="line">    diff_r = <span class="number">0</span></span><br><span class="line">    diff_g = <span class="number">0</span></span><br><span class="line">    diff_b = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    N = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> img, _ <span class="keyword">in</span> dataset:</span><br><span class="line">        img = np.asarray(img)</span><br><span class="line"></span><br><span class="line">        diff_r += np.<span class="built_in">sum</span>(np.power(img[:, :, <span class="number">0</span>] - mean_r, <span class="number">2</span>))</span><br><span class="line">        diff_g += np.<span class="built_in">sum</span>(np.power(img[:, :, <span class="number">1</span>] - mean_g, <span class="number">2</span>))</span><br><span class="line">        diff_b += np.<span class="built_in">sum</span>(np.power(img[:, :, <span class="number">2</span>] - mean_b, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">        N += np.prod(img[:, :, <span class="number">0</span>].shape)</span><br><span class="line"></span><br><span class="line">    std_r = np.sqrt(diff_r / N)</span><br><span class="line">    std_g = np.sqrt(diff_g / N)</span><br><span class="line">    std_b = np.sqrt(diff_b / N)</span><br><span class="line"></span><br><span class="line">    mean = (mean_r.item() / <span class="number">255.0</span>, mean_g.item() / <span class="number">255.0</span>, mean_b.item() / <span class="number">255.0</span>)</span><br><span class="line">    std = (std_r.item() / <span class="number">255.0</span>, std_g.item() / <span class="number">255.0</span>, std_b.item() / <span class="number">255.0</span>)</span><br><span class="line">    <span class="keyword">return</span> mean, std</span><br></pre></td></tr></table></figure><h2 id="得到视频数据基本信息"><a class="markdownIt-Anchor" href="#得到视频数据基本信息"></a> 得到视频数据基本信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">video = cv2.VideoCapture(mp4_path)</span><br><span class="line">height = <span class="built_in">int</span>(video.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line">width = <span class="built_in">int</span>(video.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">num_frames = <span class="built_in">int</span>(video.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line">fps = <span class="built_in">int</span>(video.get(cv2.CAP_PROP_FPS))</span><br><span class="line">video.release()</span><br></pre></td></tr></table></figure><h2 id="tsn-每段segment采样一帧视频"><a class="markdownIt-Anchor" href="#tsn-每段segment采样一帧视频"></a> TSN 每段（segment）采样一帧视频</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">K = self._num_segments</span><br><span class="line"><span class="keyword">if</span> is_train:</span><br><span class="line">    <span class="keyword">if</span> num_frames &gt; K:</span><br><span class="line">        <span class="comment"># Random index for each segment.</span></span><br><span class="line">        frame_indices = torch.randint(</span><br><span class="line">            high=num_frames // K, size=(K,), dtype=torch.long)</span><br><span class="line">        frame_indices += num_frames // K * torch.arange(K)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        frame_indices = torch.randint(</span><br><span class="line">            high=num_frames, size=(K - num_frames,), dtype=torch.long)</span><br><span class="line">        frame_indices = torch.sort(torch.cat((</span><br><span class="line">            torch.arange(num_frames), frame_indices)))[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> num_frames &gt; K:</span><br><span class="line">        <span class="comment"># Middle index for each segment.</span></span><br><span class="line">        frame_indices = num_frames / K // <span class="number">2</span></span><br><span class="line">        frame_indices += num_frames // K * torch.arange(K)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        frame_indices = torch.sort(torch.cat((                              </span><br><span class="line">            torch.arange(num_frames), torch.arange(K - num_frames))))[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">assert</span> frame_indices.size() == (K,)</span><br><span class="line"><span class="keyword">return</span> [frame_indices[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(K)]</span><br></pre></td></tr></table></figure><h2 id="常用训练和验证数据预处理"><a class="markdownIt-Anchor" href="#常用训练和验证数据预处理"></a> 常用训练和验证数据预处理</h2><p>其中 ToTensor 操作会将 PIL.Image 或形状为 H×W×D，数值范围为 [0, 255] 的 np.ndarray 转换为形状为 D×H×W，数值范围为 [0.0, 1.0] 的 torch.Tensor。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">train_transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.RandomResizedCrop(size=<span class="number">224</span>,</span><br><span class="line">                                             scale=(<span class="number">0.08</span>, <span class="number">1.0</span>)),</span><br><span class="line">    torchvision.transforms.RandomHorizontalFlip(),</span><br><span class="line">    torchvision.transforms.ToTensor(),</span><br><span class="line">    torchvision.transforms.Normalize(mean=(<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>),</span><br><span class="line">                                     std=(<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>)),</span><br><span class="line"> ])</span><br><span class="line"> val_transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.Resize(<span class="number">256</span>),</span><br><span class="line">    torchvision.transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">    torchvision.transforms.ToTensor(),</span><br><span class="line">    torchvision.transforms.Normalize(mean=(<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>),</span><br><span class="line">                                     std=(<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>)),</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="模型训练和测试"><a class="markdownIt-Anchor" href="#模型训练和测试"></a> 模型训练和测试</h1><h2 id="分类模型训练代码"><a class="markdownIt-Anchor" href="#分类模型训练代码"></a> 分类模型训练代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Loss and optimizer</span></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Train the model</span></span><br><span class="line">total_step = <span class="built_in">len</span>(train_loader)</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> i ,(images, labels) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        images = images.to(device)</span><br><span class="line">        labels = labels.to(device)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Forward pass</span></span><br><span class="line">        outputs = model(images)</span><br><span class="line">        loss = criterion(outputs, labels)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Backward and optimizer</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (i+<span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Epoch: [&#123;&#125;/&#123;&#125;], Step: [&#123;&#125;/&#123;&#125;], Loss: &#123;&#125;&#x27;</span></span><br><span class="line">                  .<span class="built_in">format</span>(epoch+<span class="number">1</span>, num_epochs, i+<span class="number">1</span>, total_step, loss.item()))</span><br></pre></td></tr></table></figure><h2 id="分类模型测试代码"><a class="markdownIt-Anchor" href="#分类模型测试代码"></a> 分类模型测试代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Test the model</span></span><br><span class="line">model.<span class="built_in">eval</span>()  <span class="comment"># eval mode(batch norm uses moving mean/variance </span></span><br><span class="line">              <span class="comment">#instead of mini-batch mean/variance)</span></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> images, labels <span class="keyword">in</span> test_loader:</span><br><span class="line">        images = images.to(device)</span><br><span class="line">        labels = labels.to(device)</span><br><span class="line">        outputs = model(images)</span><br><span class="line">        _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">        total += labels.size(<span class="number">0</span>)</span><br><span class="line">        correct += (predicted == labels).<span class="built_in">sum</span>().item()</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Test accuracy of the model on the 10000 test images: &#123;&#125; %&#x27;</span></span><br><span class="line">          .<span class="built_in">format</span>(<span class="number">100</span> * correct / total))</span><br></pre></td></tr></table></figure><h2 id="自定义loss"><a class="markdownIt-Anchor" href="#自定义loss"></a> 自定义loss</h2><p>继承torch.nn.Module类写自己的loss。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLoss</span>(<span class="params">torch.nn.Moudle</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyLoss, self).__init__()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        loss = torch.mean((x - y) ** <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure><h2 id="标签平滑label-smoothing"><a class="markdownIt-Anchor" href="#标签平滑label-smoothing"></a> 标签平滑（label smoothing）</h2><p>写一个label_smoothing.py的文件，然后在训练代码里引用，用LSR代替交叉熵损失即可。label_smoothing.py内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LSR</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, e=<span class="number">0.1</span>, reduction=<span class="string">&#x27;mean&#x27;</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.log_softmax = nn.LogSoftmax(dim=<span class="number">1</span>)</span><br><span class="line">        self.e = e</span><br><span class="line">        self.reduction = reduction</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_one_hot</span>(<span class="params">self, labels, classes, value=<span class="number">1</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Convert labels to one hot vectors</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            labels: torch tensor in format [label1, label2, label3, ...]</span></span><br><span class="line"><span class="string">            classes: int, number of classes</span></span><br><span class="line"><span class="string">            value: label value in one hot vector, default to 1</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            return one hot format labels in shape [batchsize, classes]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        one_hot = torch.zeros(labels.size(<span class="number">0</span>), classes)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#labels and value_added  size must match</span></span><br><span class="line">        labels = labels.view(labels.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        value_added = torch.Tensor(labels.size(<span class="number">0</span>), <span class="number">1</span>).fill_(value)</span><br><span class="line"></span><br><span class="line">        value_added = value_added.to(labels.device)</span><br><span class="line">        one_hot = one_hot.to(labels.device)</span><br><span class="line"></span><br><span class="line">        one_hot.scatter_add_(<span class="number">1</span>, labels, value_added)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> one_hot</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_smooth_label</span>(<span class="params">self, target, length, smooth_factor</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;convert targets to one-hot format, and smooth</span></span><br><span class="line"><span class="string">        them.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            target: target in form with [label1, label2, label_batchsize]</span></span><br><span class="line"><span class="string">            length: length of one-hot format(number of classes)</span></span><br><span class="line"><span class="string">            smooth_factor: smooth factor for label smooth</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            smoothed labels in one hot format</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        one_hot = self._one_hot(target, length, value=<span class="number">1</span> - smooth_factor)</span><br><span class="line">        one_hot += smooth_factor / (length - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> one_hot.to(target.device)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x, target</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x.size(<span class="number">0</span>) != target.size(<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Expected input batchsize (&#123;&#125;) to match target batch_size(&#123;&#125;)&#x27;</span></span><br><span class="line">                    .<span class="built_in">format</span>(x.size(<span class="number">0</span>), target.size(<span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x.dim() &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Expected input tensor to have least 2 dimensions(got &#123;&#125;)&#x27;</span></span><br><span class="line">                    .<span class="built_in">format</span>(x.size(<span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x.dim() != <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Only 2 dimension tensor are implemented, (got &#123;&#125;)&#x27;</span></span><br><span class="line">                    .<span class="built_in">format</span>(x.size()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        smoothed_target = self._smooth_label(target, x.size(<span class="number">1</span>), self.e)</span><br><span class="line">        x = self.log_softmax(x)</span><br><span class="line">        loss = torch.<span class="built_in">sum</span>(- x * smoothed_target, dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.reduction == <span class="string">&#x27;none&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> loss</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">elif</span> self.reduction == <span class="string">&#x27;sum&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> torch.<span class="built_in">sum</span>(loss)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">elif</span> self.reduction == <span class="string">&#x27;mean&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> torch.mean(loss)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;unrecognized option, expect reduction to be one of none, mean, sum&#x27;</span>)</span><br></pre></td></tr></table></figure><p>或者直接在训练文件里做label smoothing</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> images, labels <span class="keyword">in</span> train_loader:</span><br><span class="line">    images, labels = images.cuda(), labels.cuda()</span><br><span class="line">    N = labels.size(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># C is the number of classes.</span></span><br><span class="line">    smoothed_labels = torch.full(size=(N, C), fill_value=<span class="number">0.1</span> / (C - <span class="number">1</span>)).cuda()</span><br><span class="line">    smoothed_labels.scatter_(dim=<span class="number">1</span>, index=torch.unsqueeze(labels, dim=<span class="number">1</span>), value=<span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line">    score = model(images)</span><br><span class="line">    log_prob = torch.nn.functional.log_softmax(score, dim=<span class="number">1</span>)</span><br><span class="line">    loss = -torch.<span class="built_in">sum</span>(log_prob * smoothed_labels) / N</span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br></pre></td></tr></table></figure><h2 id="mixup训练"><a class="markdownIt-Anchor" href="#mixup训练"></a> Mixup训练</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">beta_distribution = torch.distributions.beta.Beta(alpha, alpha)</span><br><span class="line"><span class="keyword">for</span> images, labels <span class="keyword">in</span> train_loader:</span><br><span class="line">    images, labels = images.cuda(), labels.cuda()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Mixup images and labels.</span></span><br><span class="line">    lambda_ = beta_distribution.sample([]).item()</span><br><span class="line">    index = torch.randperm(images.size(<span class="number">0</span>)).cuda()</span><br><span class="line">    mixed_images = lambda_ * images + (<span class="number">1</span> - lambda_) * images[index, :]</span><br><span class="line">    label_a, label_b = labels, labels[index]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Mixup loss.</span></span><br><span class="line">    scores = model(mixed_images)</span><br><span class="line">    loss = (lambda_ * loss_function(scores, label_a)</span><br><span class="line">            + (<span class="number">1</span> - lambda_) * loss_function(scores, label_b))</span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br></pre></td></tr></table></figure><h2 id="l1-正则化"><a class="markdownIt-Anchor" href="#l1-正则化"></a> L1 正则化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l1_regularization = torch.nn.L1Loss(reduction=<span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line">loss = ...  <span class="comment"># Standard cross-entropy loss</span></span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> model.parameters():</span><br><span class="line">    loss += torch.<span class="built_in">sum</span>(torch.<span class="built_in">abs</span>(param))</span><br><span class="line">loss.backward()</span><br></pre></td></tr></table></figure><h2 id="不对偏置项进行权重衰减weight-decay"><a class="markdownIt-Anchor" href="#不对偏置项进行权重衰减weight-decay"></a> 不对偏置项进行权重衰减（weight decay）</h2><p>pytorch里的weight decay相当于l2正则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bias_list = (param <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters() <span class="keyword">if</span> name[-<span class="number">4</span>:] == <span class="string">&#x27;bias&#x27;</span>)</span><br><span class="line">others_list = (param <span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters() <span class="keyword">if</span> name[-<span class="number">4</span>:] != <span class="string">&#x27;bias&#x27;</span>)</span><br><span class="line">parameters = [&#123;<span class="string">&#x27;parameters&#x27;</span>: bias_list, <span class="string">&#x27;weight_decay&#x27;</span>: <span class="number">0</span>&#125;,                </span><br><span class="line">              &#123;<span class="string">&#x27;parameters&#x27;</span>: others_list&#125;]</span><br><span class="line">optimizer = torch.optim.SGD(parameters, lr=<span class="number">1e-2</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">1e-4</span>)</span><br></pre></td></tr></table></figure><h2 id="梯度裁剪gradient-clipping"><a class="markdownIt-Anchor" href="#梯度裁剪gradient-clipping"></a> 梯度裁剪（gradient clipping）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><h2 id="得到当前学习率"><a class="markdownIt-Anchor" href="#得到当前学习率"></a> 得到当前学习率</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If there is one global learning rate (which is the common case).</span></span><br><span class="line">lr = <span class="built_in">next</span>(<span class="built_in">iter</span>(optimizer.param_groups))[<span class="string">&#x27;lr&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># If there are multiple learning rates for different layers.</span></span><br><span class="line">all_lr = []</span><br><span class="line"><span class="keyword">for</span> param_group <span class="keyword">in</span> optimizer.param_groups:</span><br><span class="line">    all_lr.append(param_group[<span class="string">&#x27;lr&#x27;</span>])</span><br></pre></td></tr></table></figure><p>另一种方法，在一个batch训练代码里，当前的lr是optimizer.param_groups[0][‘lr’]</p><h2 id="学习率衰减"><a class="markdownIt-Anchor" href="#学习率衰减"></a> 学习率衰减</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reduce learning rate when validation accuarcy plateau.</span></span><br><span class="line">scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode=<span class="string">&#x27;max&#x27;</span>, patience=<span class="number">5</span>, verbose=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">80</span>):</span><br><span class="line">    train(...)</span><br><span class="line">    val(...)</span><br><span class="line">    scheduler.step(val_acc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cosine annealing learning rate.</span></span><br><span class="line">scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=<span class="number">80</span>)</span><br><span class="line"><span class="comment"># Reduce learning rate by 10 at given epochs.</span></span><br><span class="line">scheduler = torch.optim.lr_scheduler.MultiStepLR(optimizer, milestones=[<span class="number">50</span>, <span class="number">70</span>], gamma=<span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">80</span>):</span><br><span class="line">    scheduler.step()    </span><br><span class="line">    train(...)</span><br><span class="line">    val(...)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Learning rate warmup by 10 epochs.</span></span><br><span class="line">scheduler = torch.optim.lr_scheduler.LambdaLR(optimizer, lr_lambda=<span class="keyword">lambda</span> t: t / <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    scheduler.step()</span><br><span class="line">    train(...)</span><br><span class="line">    val(...)</span><br></pre></td></tr></table></figure><h2 id="优化器链式更新"><a class="markdownIt-Anchor" href="#优化器链式更新"></a> 优化器链式更新</h2><p>从1.4版本开始，torch.optim.lr_scheduler 支持链式更新（chaining），即用户可以定义两个 schedulers，并交替在训练中使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.optim <span class="keyword">import</span> SGD</span><br><span class="line"><span class="keyword">from</span> torch.optim.lr_scheduler <span class="keyword">import</span> ExponentialLR, StepLR</span><br><span class="line">model = [torch.nn.Parameter(torch.randn(<span class="number">2</span>, <span class="number">2</span>, requires_grad=<span class="literal">True</span>))]</span><br><span class="line">optimizer = SGD(model, <span class="number">0.1</span>)</span><br><span class="line">scheduler1 = ExponentialLR(optimizer, gamma=<span class="number">0.9</span>)</span><br><span class="line">scheduler2 = StepLR(optimizer, step_size=<span class="number">3</span>, gamma=<span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(epoch, scheduler2.get_last_lr()[<span class="number">0</span>])</span><br><span class="line">    optimizer.step()</span><br><span class="line">    scheduler1.step()</span><br><span class="line">    scheduler2.step()</span><br></pre></td></tr></table></figure><h2 id="模型训练可视化"><a class="markdownIt-Anchor" href="#模型训练可视化"></a> 模型训练可视化</h2><p>PyTorch可以使用tensorboard来可视化训练过程。</p><p>安装和运行TensorBoard。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorboard</span><br><span class="line">tensorboard --logdir=runs</span><br></pre></td></tr></table></figure><p>使用SummaryWriter类来收集和可视化相应的数据，放了方便查看，可以使用不同的文件夹，比如’Loss/train’和’Loss/test’。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n_iter <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    writer.add_scalar(<span class="string">&#x27;Loss/train&#x27;</span>, np.random.random(), n_iter)</span><br><span class="line">    writer.add_scalar(<span class="string">&#x27;Loss/test&#x27;</span>, np.random.random(), n_iter)</span><br><span class="line">    writer.add_scalar(<span class="string">&#x27;Accuracy/train&#x27;</span>, np.random.random(), n_iter)</span><br><span class="line">    writer.add_scalar(<span class="string">&#x27;Accuracy/test&#x27;</span>, np.random.random(), n_iter)</span><br></pre></td></tr></table></figure><h2 id="保存与加载断点"><a class="markdownIt-Anchor" href="#保存与加载断点"></a> 保存与加载断点</h2><p>注意为了能够恢复训练，我们需要同时保存模型和优化器的状态，以及当前的训练轮数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">start_epoch = <span class="number">0</span></span><br><span class="line"><span class="comment"># Load checkpoint.</span></span><br><span class="line"><span class="keyword">if</span> resume: <span class="comment"># resume为参数，第一次训练时设为0，中断再训练时设为1</span></span><br><span class="line">    model_path = os.path.join(<span class="string">&#x27;model&#x27;</span>, <span class="string">&#x27;best_checkpoint.pth.tar&#x27;</span>)</span><br><span class="line">    <span class="keyword">assert</span> os.path.isfile(model_path)</span><br><span class="line">    checkpoint = torch.load(model_path)</span><br><span class="line">    best_acc = checkpoint[<span class="string">&#x27;best_acc&#x27;</span>]</span><br><span class="line">    start_epoch = checkpoint[<span class="string">&#x27;epoch&#x27;</span>]</span><br><span class="line">    model.load_state_dict(checkpoint[<span class="string">&#x27;model&#x27;</span>])</span><br><span class="line">    optimizer.load_state_dict(checkpoint[<span class="string">&#x27;optimizer&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Load checkpoint at epoch &#123;&#125;.&#x27;</span>.<span class="built_in">format</span>(start_epoch))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Best accuracy so far &#123;&#125;.&#x27;</span>.<span class="built_in">format</span>(best_acc))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Train the model</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(start_epoch, num_epochs): </span><br><span class="line">    ... </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Test the model</span></span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># save checkpoint</span></span><br><span class="line">    is_best = current_acc &gt; best_acc</span><br><span class="line">    best_acc = <span class="built_in">max</span>(current_acc, best_acc)</span><br><span class="line">    checkpoint = &#123;</span><br><span class="line">        <span class="string">&#x27;best_acc&#x27;</span>: best_acc,</span><br><span class="line">        <span class="string">&#x27;epoch&#x27;</span>: epoch + <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;model&#x27;</span>: model.state_dict(),</span><br><span class="line">        <span class="string">&#x27;optimizer&#x27;</span>: optimizer.state_dict(),</span><br><span class="line">    &#125;</span><br><span class="line">    model_path = os.path.join(<span class="string">&#x27;model&#x27;</span>, <span class="string">&#x27;checkpoint.pth.tar&#x27;</span>)</span><br><span class="line">    best_model_path = os.path.join(<span class="string">&#x27;model&#x27;</span>, <span class="string">&#x27;best_checkpoint.pth.tar&#x27;</span>)</span><br><span class="line">    torch.save(checkpoint, model_path)</span><br><span class="line">    <span class="keyword">if</span> is_best:</span><br><span class="line">        shutil.copy(model_path, best_model_path)</span><br></pre></td></tr></table></figure><h2 id="提取-imagenet-预训练模型某层的卷积特征"><a class="markdownIt-Anchor" href="#提取-imagenet-预训练模型某层的卷积特征"></a> 提取 ImageNet 预训练模型某层的卷积特征</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># VGG-16 relu5-3 feature.</span></span><br><span class="line">model = torchvision.models.vgg16(pretrained=<span class="literal">True</span>).features[:-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># VGG-16 pool5 feature.</span></span><br><span class="line">model = torchvision.models.vgg16(pretrained=<span class="literal">True</span>).features</span><br><span class="line"><span class="comment"># VGG-16 fc7 feature.</span></span><br><span class="line">model = torchvision.models.vgg16(pretrained=<span class="literal">True</span>)</span><br><span class="line">model.classifier = torch.nn.Sequential(*<span class="built_in">list</span>(model.classifier.children())[:-<span class="number">3</span>])</span><br><span class="line"><span class="comment"># ResNet GAP feature.</span></span><br><span class="line">model = torchvision.models.resnet18(pretrained=<span class="literal">True</span>)</span><br><span class="line">model = torch.nn.Sequential(collections.OrderedDict(</span><br><span class="line">    <span class="built_in">list</span>(model.named_children())[:-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    conv_representation = model(image)</span><br></pre></td></tr></table></figure><h2 id="提取-imagenet-预训练模型多层的卷积特征"><a class="markdownIt-Anchor" href="#提取-imagenet-预训练模型多层的卷积特征"></a> 提取 ImageNet 预训练模型多层的卷积特征</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeatureExtractor</span>(<span class="params">torch.nn.Module</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Helper class to extract several convolution features from the given</span></span><br><span class="line"><span class="string">    pre-trained model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        _model, torch.nn.Module.</span></span><br><span class="line"><span class="string">        _layers_to_extract, list&lt;str&gt; or set&lt;str&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example:</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; model = torchvision.models.resnet152(pretrained=True)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; model = torch.nn.Sequential(collections.OrderedDict(</span></span><br><span class="line"><span class="string">                list(model.named_children())[:-1]))</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; conv_representation = FeatureExtractor(</span></span><br><span class="line"><span class="string">                pretrained_model=model,</span></span><br><span class="line"><span class="string">                layers_to_extract=&#123;&#x27;layer1&#x27;, &#x27;layer2&#x27;, &#x27;layer3&#x27;, &#x27;layer4&#x27;&#125;)(image)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, pretrained_model, layers_to_extract</span>):</span></span><br><span class="line">        torch.nn.Module.__init__(self)</span><br><span class="line">        self._model = pretrained_model</span><br><span class="line">        self._model.<span class="built_in">eval</span>()</span><br><span class="line">        self._layers_to_extract = <span class="built_in">set</span>(layers_to_extract)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            conv_representation = []</span><br><span class="line">            <span class="keyword">for</span> name, layer <span class="keyword">in</span> self._model.named_children():</span><br><span class="line">                x = layer(x)</span><br><span class="line">                <span class="keyword">if</span> name <span class="keyword">in</span> self._layers_to_extract:</span><br><span class="line">                    conv_representation.append(x)</span><br><span class="line">            <span class="keyword">return</span> conv_representation</span><br></pre></td></tr></table></figure><h2 id="微调全连接层"><a class="markdownIt-Anchor" href="#微调全连接层"></a> 微调全连接层</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model = torchvision.models.resnet18(pretrained=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> model.parameters():</span><br><span class="line">    param.requires_grad = <span class="literal">False</span></span><br><span class="line">model.fc = nn.Linear(<span class="number">512</span>, <span class="number">100</span>)  <span class="comment"># Replace the last fc layer</span></span><br><span class="line">optimizer = torch.optim.SGD(model.fc.parameters(), lr=<span class="number">1e-2</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">1e-4</span>)</span><br></pre></td></tr></table></figure><h2 id="以较大学习率微调全连接层较小学习率微调卷积层"><a class="markdownIt-Anchor" href="#以较大学习率微调全连接层较小学习率微调卷积层"></a> 以较大学习率微调全连接层，较小学习率微调卷积层</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">model = torchvision.models.resnet18(pretrained=<span class="literal">True</span>)</span><br><span class="line">finetuned_parameters = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">id</span>, model.fc.parameters()))</span><br><span class="line">conv_parameters = (p <span class="keyword">for</span> p <span class="keyword">in</span> model.parameters() <span class="keyword">if</span> <span class="built_in">id</span>(p) <span class="keyword">not</span> <span class="keyword">in</span> finetuned_parameters)</span><br><span class="line">parameters = [&#123;<span class="string">&#x27;params&#x27;</span>: conv_parameters, <span class="string">&#x27;lr&#x27;</span>: <span class="number">1e-3</span>&#125;, </span><br><span class="line">              &#123;<span class="string">&#x27;params&#x27;</span>: model.fc.parameters()&#125;]</span><br><span class="line">optimizer = torch.optim.SGD(parameters, lr=<span class="number">1e-2</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">1e-4</span>)</span><br></pre></td></tr></table></figure><h1 id="其他注意事项"><a class="markdownIt-Anchor" href="#其他注意事项"></a> 其他注意事项</h1><ul><li>不要使用太大的线性层。因为nn.Linear(m,n)使用的是 <img src="https://www.zhihu.com/equation?tex=O%28mn%29" alt="[公式]" /> 的内存，线性层太大很容易超出现有显存。</li><li>不要在太长的序列上使用RNN。因为RNN反向传播使用的是BPTT算法，其需要的内存和输入序列的长度呈线性关系。</li><li>model(x) 前用 model.train() 和 model.eval() 切换网络状态。</li><li>不需要计算梯度的代码块用 with torch.no_grad() 包含起来。</li><li>model.eval() 和 torch.no_grad() 的区别在于，model.eval() 是将网络切换为测试状态，例如 BN 和dropout在训练和测试阶段使用不同的计算方法。torch.no_grad() 是关闭 PyTorch 张量的自动求导机制，以减少存储使用和加速计算，得到的结果无法进行 loss.backward()。</li><li>model.zero_grad()会把整个模型的参数的梯度都归零, 而optimizer.zero_grad()只会把传入其中的参数的梯度归零.</li><li>torch.nn.CrossEntropyLoss 的输入不需要经过 Softmax。torch.nn.CrossEntropyLoss 等价于 torch.nn.functional.log_softmax + torch.nn.NLLLoss。</li><li>loss.backward() 前用 optimizer.zero_grad() 清除累积梯度。</li><li>torch.utils.data.DataLoader 中尽量设置 pin_memory=True，对特别小的数据集如 MNIST 设置 pin_memory=False 反而更快一些。num_workers 的设置需要在实验中找到最快的取值。</li><li>用 del 及时删除不用的中间变量，节约 GPU 存储。</li><li>使用 inplace 操作可节约 GPU 存储，如</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = torch.nn.functional.relu(x, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>减少 CPU 和 GPU 之间的数据传输。例如如果你想知道一个 epoch 中每个 mini-batch 的 loss 和准确率，先将它们累积在 GPU 中等一个 epoch 结束之后一起传输回 CPU 会比每个 mini-batch 都进行一次 GPU 到 CPU 的传输更快。</li><li>使用半精度浮点数 half() 会有一定的速度提升，具体效率依赖于 GPU 型号。需要小心数值精度过低带来的稳定性问题。</li><li>时常使用 assert tensor.size() == (N, D, H, W) 作为调试手段，确保张量维度和你设想中一致。</li><li>除了标记 y 外，尽量少使用一维张量，使用 n*1 的二维张量代替，可以避免一些意想不到的一维张量计算结果。</li><li>统计代码各部分耗时</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> torch.autograd.profiler.profile(enabled=<span class="literal">True</span>, use_cuda=<span class="literal">False</span>) <span class="keyword">as</span> profile:</span><br><span class="line">    ...</span><br><span class="line"><span class="built_in">print</span>(profile)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者在命令行运行</span></span><br><span class="line">python -m torch.utils.bottleneck main.py</span><br></pre></td></tr></table></figure><ul><li>使用TorchSnooper来调试PyTorch代码，程序在执行的时候，就会自动 print 出来每一行的执行结果的 tensor 的形状、数据类型、设备、是否需要梯度的信息。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install torchsnooper</span></span><br><span class="line"><span class="keyword">import</span> torchsnooper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于函数，使用修饰器</span></span><br><span class="line"><span class="meta">@torchsnooper.snoop()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不是函数，使用 with 语句来激活 TorchSnooper，把训练的那个循环装进 with 语句中去。</span></span><br><span class="line"><span class="keyword">with</span> torchsnooper.snoop():</span><br><span class="line">    原本的代码</span><br></pre></td></tr></table></figure><p><a href="https://link.zhihu.com/?target=https%3A//github.com/zasdfgbnm/TorchSnooper">https://github.com/zasdfgbnm/TorchSnooper​github.com/zasdfgbnm/TorchSnooper</a></p><ul><li>模型可解释性，使用captum库</li></ul><p><a href="https://link.zhihu.com/?target=https%3A//captum.ai/">https://captum.ai/​captum.ai/</a></p><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/59205847?">张皓：PyTorch Cookbook（常用代码段整理合集）</a></li><li>PyTorch官方<a href="https://link.zhihu.com/?target=https%3A//pytorch.org/docs/stable/tensors.html">文档</a>和<a href="https://link.zhihu.com/?target=https%3A//pytorch.org/tutorials/">示例</a></li><li><a href="https://link.zhihu.com/?target=https%3A//pytorch.org/docs/stable/notes/faq.html">https://pytorch.org/docs/stable/notes/faq.html</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/szagoruyko/pytorchviz">https://github.com/szagoruyko/pytorchviz</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/sksq96/pytorch-summary">https://github.com/sksq96/pytorch-summary</a></li><li>其他</li></ol><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://use.fontawesome.com/releases/v5.0.13/css/all.css&quot;&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;</summary>
      
    
    
    
    <category term="深度学习" scheme="https://zoruasama.gitee.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://zoruasama.gitee.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="人工智能" scheme="https://zoruasama.gitee.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>目标检测 | YOLOv3 训练/预测参数详解</title>
    <link href="https://zoruasama.gitee.io/2022/04/04/CV_objectDetection_0x00/"/>
    <id>https://zoruasama.gitee.io/2022/04/04/CV_objectDetection_0x00/</id>
    <published>2022-04-04T12:20:00.000Z</published>
    <updated>2022-04-04T12:02:07.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yolov3"><a class="markdownIt-Anchor" href="#yolov3"></a> YOLOv3</h1><p>源代码使用的是 YOLOv3 🚀 by Ultralytics, GPL-3.0 license。<br />参考资料：</p><ul><li><a href="https://blog.csdn.net/IT_charge/article/details/119208680">https://blog.csdn.net/IT_charge/article/details/119208680</a></li><li><a href="https://blog.csdn.net/IT_charge/article/details/119180151">https://blog.csdn.net/IT_charge/article/details/119180151</a></li></ul><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220404193339.png" alt="" /></p><h1 id="训练参数详解"><a class="markdownIt-Anchor" href="#训练参数详解"></a> 训练参数详解</h1><h2 id="weights"><a class="markdownIt-Anchor" href="#weights"></a> –weights</h2><p>用于指定一个预训练模型（用路径指定），用这个模型初始化模型中一些参数。</p><p>default 默认ROOT根目录下的yolov3.pt文件。</p><h2 id="cfg"><a class="markdownIt-Anchor" href="#cfg"></a> –cfg</h2><p>cfg 为 configuration（设置）的缩写，用于进行模型的配置。</p><p>default 用于选择 model 文件。</p><p>选择的文件通常是下面这些：<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220404193709.png" alt="" /></p><p>也有部分YOLOv3的实现会使用<code>.cfg</code>文件。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220404193807.png" alt="" /><br />在这些模型文件中，设定了模型的网络结构。例如上图中，使用骨干网络为 darknet53 。</p><h2 id="data"><a class="markdownIt-Anchor" href="#data"></a> –data</h2><p>用于指定训练数据集的配置文件。</p><p>像是这样：<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220404194008.png" alt="" /></p><p>path 是数据集根目录，train 是训练集（相对于根目录），val 是验证集，test是可选的测试集。<br />nc 是分类数目，names列表规定了分类的名称。download 会在缺少这个数据集实际内容时从链接中下载。</p><h2 id="hyp"><a class="markdownIt-Anchor" href="#hyp"></a> –hyp</h2><p>用于设置超参数（一般用不到）。</p><p>其设置值可在此文件夹中找到：</p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220404194201.png" alt="" /></p><h2 id="epochs"><a class="markdownIt-Anchor" href="#epochs"></a> –epochs</h2><p>用于设置训练的轮数。<br />源码中 default 值为 300，训练轮次则显示为 0~299。</p><h2 id="batch-size"><a class="markdownIt-Anchor" href="#batch-size"></a> –batch-size</h2><p>用于设置一次跑多少的数据输入到网络当中。不设置时默认为16。</p><h2 id="img-size"><a class="markdownIt-Anchor" href="#img-size"></a> –img-size</h2><p>用于分别设置训练集和测试集的大小。<br />两个数字前者为训练集大小，后者为测试集大小。</p><h2 id="rect"><a class="markdownIt-Anchor" href="#rect"></a> –rect</h2><p>用于设置矩阵的训练方式。<br />作用是减去一些不必要信息，加速模型推理过程。</p><h2 id="resume"><a class="markdownIt-Anchor" href="#resume"></a> –resume</h2><p>用于设置是否在最近训练的一个模型基础上继续训练。<br />default 值默认是 false，当想要 default 为 true 时必须指定在哪个模型上继续训练。指定的模型路径按字符串形式赋值给 default。</p><h2 id="nosave"><a class="markdownIt-Anchor" href="#nosave"></a> –nosave</h2><p>生效后只保存最后一次 pt 文件。</p><h2 id="notest"><a class="markdownIt-Anchor" href="#notest"></a> –notest</h2><p>生效后只在最后一次进行测试。<br />此类参数被激活的条件是填入到 Edit Configuration --&gt; Parameters 中，若有多个被激活参数，中间用空格隔开即可。</p><h2 id="noautoanchor"><a class="markdownIt-Anchor" href="#noautoanchor"></a> –noautoanchor</h2><p>用于设置在目标检测任务中是否采用锚点 / 锚框。</p><p>遍历输入图像上所有可能的像素框，然后选出正确的目标框，并对位置和大小进行调整就可以完成目标检测任务。</p><p>默认开启，用这种方式来简化模型训练过程。</p><h2 id="evolve"><a class="markdownIt-Anchor" href="#evolve"></a> –evolve</h2><p>生效后对超参数进行进化。</p><p>作用是寻找最优超参数的方式，方法是利用遗传算法自动搜索超参数。</p><p>默认不开启。</p><h2 id="bucket"><a class="markdownIt-Anchor" href="#bucket"></a> –bucket</h2><p>这个参数是作者将一些东西放在谷歌云盘，可以进行下载。</p><h2 id="cache-images"><a class="markdownIt-Anchor" href="#cache-images"></a> –cache-images</h2><p>生效后将对图片进行缓存，以便更好地进行训练。</p><h2 id="image-weights"><a class="markdownIt-Anchor" href="#image-weights"></a> –image-weights</h2><p>生效后对于那些训练不好的图片，会在下一轮中增加一些权重。</p><h2 id="device"><a class="markdownIt-Anchor" href="#device"></a> –device</h2><p>用于设置运行 pytorch 框架的使用设备，是用 GPU cuda，还是 cpu，适用于设置这些内容的。</p><h2 id="multi-scale"><a class="markdownIt-Anchor" href="#multi-scale"></a> –multi-scale</h2><p>用于对图片尺度进行变换，即多尺度变换。</p><h2 id="single-cls"><a class="markdownIt-Anchor" href="#single-cls"></a> –single-cls</h2><p>用于设定训练数据集是单类别还是多类别。</p><p>默认为 false，意味着是多类别。</p><h2 id="adam"><a class="markdownIt-Anchor" href="#adam"></a> –adam</h2><p>parser.add_argument(’–adam’, action=‘store_true’, help=‘use torch.optim.Adam() optimizer’)<br />生效后作为优化器来使用。</p><p>填入到 Edit Configuration --&gt; Parameters 中即为 true ，意味着要用此优化器；否则为 false，为 false 时用的是随机梯度下降（SGD）优化算法。</p><h2 id="sync-bn"><a class="markdownIt-Anchor" href="#sync-bn"></a> –sync-bn</h2><p>生效后进行多 GPU 进行分布式训练。</p><h2 id="local_rank"><a class="markdownIt-Anchor" href="#local_rank"></a> –local_rank</h2><p>DistributedDataParallel 单机多卡训练，一般不改动。</p><h2 id="workers"><a class="markdownIt-Anchor" href="#workers"></a> –workers</h2><p>这里强烈建议 default 设置为 0。</p><h2 id="project"><a class="markdownIt-Anchor" href="#project"></a> –project</h2><p>用于指定训练好的模型的保存路径。</p><h2 id="entity"><a class="markdownIt-Anchor" href="#entity"></a> –entity</h2><p>wandb 库对应的东西，作用不大，不必考虑。</p><p>这里补充一点：</p><p>关闭 wandb 的方法是：在源码 tree 下找到 util --&gt; wandb_logging --&gt; wandb_utils.py 文件，在 18 行左右的位置之后，加一句 “wandb = None”，即可关闭。（因为 wandb 库需要另外安装，而且其作用不大，这里提供一种忽略方法）</p><h2 id="freeze"><a class="markdownIt-Anchor" href="#freeze"></a> –freeze</h2><p>选择冻结一些层数的参数。</p><h2 id="name"><a class="markdownIt-Anchor" href="#name"></a> –name</h2><p>用于设定保存的模型文件名。</p><h2 id="exist-ok"><a class="markdownIt-Anchor" href="#exist-ok"></a> –exist-ok</h2><p>用于设定预测结果的保存存在位置情况。</p><p>当不激活时为 false，在新命名的文件夹下保存。</p><p>当激活时为 true，在 name 指定文件夹下保存，源码中保存在 exp 文件夹下</p><h2 id="quad"><a class="markdownIt-Anchor" href="#quad"></a> –quad</h2><p>解释为 quad 数据加载的相关设置。</p><p>简单理解，生效后可以在比前面 “–img-size” 部分设置的训练测试数据集更大的数据集上训练。</p><p>好处是在比默认 640 大的数据集上训练效果更好<br />副作用是在 640 大小的数据集上训练效果可能会差一些</p><h2 id="linear-lr"><a class="markdownIt-Anchor" href="#linear-lr"></a> –linear-lr</h2><p>parser.add_argument(’–linear-lr’, action=‘store_true’, help=‘linear LR’)<br />用于对学习速率进行调整</p><p>默认为 false，含义是通过余弦函数来降低学习率。</p><p>注：当我们使用梯度下降算法来优化目标函数的时候，当越来越接近Loss值的全局最小值时，学习率应该变得更小来使得模型尽可能接近这一点，而余弦退火（Cosine annealing）可以通过余弦函数来降低学习率。</p><p>生效之后则转变为通过线性处理来降低学习率。</p><h2 id="label-smoothing"><a class="markdownIt-Anchor" href="#label-smoothing"></a> –label-smoothing</h2><p>用于对标签进行平滑处理。</p><p>作用是防止在分类算法中过拟合情况的产生。</p><h2 id="upload_dataset"><a class="markdownIt-Anchor" href="#upload_dataset"></a> –upload_dataset</h2><p>wandb 库对应的东西，作用不大，不必考虑。</p><h2 id="bbox_interval"><a class="markdownIt-Anchor" href="#bbox_interval"></a> –bbox_interval</h2><p>这又是一个与 wandb 库相关的参数设置，作用不大，忽略。</p><h2 id="save_period"><a class="markdownIt-Anchor" href="#save_period"></a> –save_period</h2><p>用于记录训练日志信息，int 型，默认为 -1。</p><h2 id="artifact_alias"><a class="markdownIt-Anchor" href="#artifact_alias"></a> –artifact_alias</h2><p>这一行参数表达的是想实现但还未实现的一个内容，忽略即可。亲测注释掉整个程序也可运行。</p><h1 id="预测参数详解"><a class="markdownIt-Anchor" href="#预测参数详解"></a> 预测参数详解</h1><h2 id="weights-2"><a class="markdownIt-Anchor" href="#weights-2"></a> –weights</h2><p>用于设置权重，默认字符串型。</p><h2 id="source"><a class="markdownIt-Anchor" href="#source"></a> –source</h2><p>用于直接给网络一个输入<br />具体而言，指定一个文件夹路径，会对文件夹下的图片、视频等进行检测，然后将检测结果保存；当然，也可仅指定一张图片或视频进行目标检测任务。</p><h2 id="img-size-2"><a class="markdownIt-Anchor" href="#img-size-2"></a> –img-size</h2><p>用于将 image resize 之后送到网络模型中。<br />值得注意的是，不会改变输入输出图片的像素大小。</p><h2 id="conf-thres"><a class="markdownIt-Anchor" href="#conf-thres"></a> –conf-thres</h2><p>用于对置信度阈值进行设置。</p><p>当大于设定值时，才显示目标检测结果。</p><h2 id="iou-thres"><a class="markdownIt-Anchor" href="#iou-thres"></a> –iou-thres</h2><p>用于对非极大值抑制值进行设置。</p><h2 id="device-2"><a class="markdownIt-Anchor" href="#device-2"></a> –device</h2><p>用于设置运行 pytorch 框架的使用设备，是用 GPU cuda，还是 cpu，适用于设置这些内容的。</p><h2 id="view-img"><a class="markdownIt-Anchor" href="#view-img"></a> –view-img</h2><p>用于设置实时显示结果。</p><p>此类参数被激活的条件是填入到 Edit Configuration --&gt; Parameters 中，若有多个被激活参数，中间用空格隔开即可。</p><p>常用于实时显示视频中的目标检测效果</p><h2 id="save-txt"><a class="markdownIt-Anchor" href="#save-txt"></a> –save-txt</h2><p>用于设置是否保存结果的 txt 文件。</p><p>激活方法是将 “–save-txt” 填入到 Edit Configuration --&gt; Parameters 中。</p><h2 id="save-conf"><a class="markdownIt-Anchor" href="#save-conf"></a> –save-conf</h2><p>用于设置是否保存置信度 。<br />激活后即可保存，激活方法同上。</p><h2 id="nosave-2"><a class="markdownIt-Anchor" href="#nosave-2"></a> –nosave</h2><p>激活后不保存检测结果到文件夹。</p><h2 id="classes"><a class="markdownIt-Anchor" href="#classes"></a> –classes</h2><p>用于指定多个赋值，可设定只检测标签数据集中的一种或几种标签。<br />eg. 当只检测 “person” 时，已知 “person” 在标签类别中属于第 “0” 类，故在 Edit Configuration --&gt; Parameters 中填入 --classes 0。</p><h2 id="agnostic-nms"><a class="markdownIt-Anchor" href="#agnostic-nms"></a> –agnostic-nms</h2><p>用于设定是否激活非极大值抑制。</p><h2 id="augment"><a class="markdownIt-Anchor" href="#augment"></a> –augment</h2><p>用于设定是否进行数据增强。</p><h2 id="update"><a class="markdownIt-Anchor" href="#update"></a> –update</h2><p>用于把网络中一些不必要的部分去掉，只保留预测需要的东西。个人感觉一般不必考虑，意义不大。</p><h2 id="project-2"><a class="markdownIt-Anchor" href="#project-2"></a> –project</h2><p>用于设定保存目标检测结果文件位置。</p><h2 id="name-2"><a class="markdownIt-Anchor" href="#name-2"></a> –name</h2><p>用于设置保存结果的名字。</p><h2 id="exist-ok-2"><a class="markdownIt-Anchor" href="#exist-ok-2"></a> –exist-ok</h2><p>用于设定预测结果的保存存在位置情况。<br />当不激活时为 false，在新命名的文件夹下保存。</p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;yolov3&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#yolov3&quot;&gt;&lt;/a&gt; YOLOv3&lt;/h1&gt;
&lt;p&gt;源代码使用的是 YOLOv3 🚀 by Ultralytics, GPL-3.0 license。&lt;br /&gt;
参考资</summary>
      
    
    
    
    <category term="计算机视觉" scheme="https://zoruasama.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="计算机视觉" scheme="https://zoruasama.gitee.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    <category term="目标检测" scheme="https://zoruasama.gitee.io/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>目标检测 | RCNN 系列算法优化策略</title>
    <link href="https://zoruasama.gitee.io/2022/02/19/CV_objectDetection_2/"/>
    <id>https://zoruasama.gitee.io/2022/02/19/CV_objectDetection_2/</id>
    <published>2022-02-19T12:50:00.000Z</published>
    <updated>2022-02-19T13:00:55.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思维导图"><a class="markdownIt-Anchor" href="#思维导图"></a> 思维导图</h1><blockquote class="pullquote mindmap mindmap-md"><ul><li>RCNN 系列算法优化策略<ul><li>FPN<ul><li>网络结构</li><li>目标检测实现方法<ul><li>FPN 结构下的 RPN 网络</li><li>FPN 结构下的 RoI Align</li></ul></li></ul></li><li>Cascade R-CNN<ul><li>IoU 的分析</li><li>网络结构</li></ul></li><li>Libra R-CNN<ul><li>FPN 特征融合</li><li>采样策略</li><li>Loss</li></ul></li></ul></li></ul></blockquote><h1 id="fpn"><a class="markdownIt-Anchor" href="#fpn"></a> FPN</h1><p>FPN 全称为 Feature Pyramid Network。<br /><strong>构造多尺度金字塔</strong>，期望模型能够具备检测不同大小尺度物体的能力。</p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220217193211.png" alt="" /></p><ol><li>Featurized image pyramid：将输入图像缩放到不同尺度，使用多个模型进行预测</li><li>Single feature map：仅使用最后一层的特征作为检测模型后续部分的输入</li><li>Pyramidal feature hierarchy：每个层级分别预测</li><li>Feature Pyramid Network(FPN)：将不同层的特征进行融合再分级预测</li></ol><h2 id="网络结构"><a class="markdownIt-Anchor" href="#网络结构"></a> 网络结构</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220217193907.png" alt="" /><br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220217193932.png" alt="" /></p><p>输入为骨干网络每一层的输出；将特征进行上采样，再与上一层特征相加得到 FPN 结构每一层的输出， FPN 结构和骨干网络是相互独立的。</p><h2 id="目标检测实现方法"><a class="markdownIt-Anchor" href="#目标检测实现方法"></a> 目标检测实现方法</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220217194653.png" alt="" /><br />在骨干网络之后增加FPN网络，此时<strong>输出的是多个特征图</strong>，RPN模块和RoI Align模块会受到影响，第二阶段BBox head不变。</p><h3 id="fpn-结构下的-rpn-网络"><a class="markdownIt-Anchor" href="#fpn-结构下的-rpn-网络"></a> FPN 结构下的 RPN 网络</h3><ol><li>Anchor：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mn>3</mn><msup><mn>2</mn><mn>2</mn></msup><mo separator="true">,</mo><mn>6</mn><msup><mn>4</mn><mn>2</mn></msup><mo separator="true">,</mo><mn>12</mn><msup><mn>8</mn><mn>2</mn></msup><mo separator="true">,</mo><mn>25</mn><msup><mn>6</mn><mn>2</mn></msup><mo separator="true">,</mo><mn>51</mn><msup><mn>2</mn><mn>2</mn></msup></mrow><mo>−</mo><mo>&gt;</mo><mrow><msub><mi>P</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>P</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>P</mi><mn>4</mn></msub><mo separator="true">,</mo><msub><mi>P</mi><mn>5</mn></msub><mo separator="true">,</mo><msub><mi>P</mi><mn>6</mn></msub></mrow></mrow><annotation encoding="application/x-tex">{32^2 ,64^2 ,128^2 , 256^2,512^2}-&gt;{P_2,P_3, P_4,P_5,P_6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">3</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mord"><span class="mord">4</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord"><span class="mord">8</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord"><span class="mord">6</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">5</span><span class="mord">1</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></li><li>RPN 网络分为多个 head 预测不同尺度上的候选框</li><li>RPN 网络的预测结果和 anchor 解码得到的 RoI 会进行合并</li></ol><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220217195059.png" alt="" /></p><h3 id="fpn-结构下的-roi-align"><a class="markdownIt-Anchor" href="#fpn-结构下的-roi-align"></a> FPN 结构下的 RoI Align</h3><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220217201011.png" alt="" /></p><p>Rol Align：是RoI在特征图上进行特征抽取的过程，并且通过双线性插值的方式去除了坐标点取整的过程。</p><blockquote><p>如何将 RoI 分配到不同层级？</p><ul><li><p>将 FPN 的特征金字塔类比为图像金字塔</p></li><li><p>根据面积来对候选框进行分配</p></li><li><p>大个 RoI 放深层，小个 RoI 放浅层。</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>=</mo><mo stretchy="false">⌊</mo><msub><mi>k</mi><mn>0</mn></msub><mo>+</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mo stretchy="false">(</mo><msqrt><mrow><mi>w</mi><mi>h</mi></mrow></msqrt><mi mathvariant="normal">/</mi><mn>224</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k=\lfloor k_0+\log_{2}(\sqrt{wh}/224)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.18222em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.93222em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span></span></span><span style="top:-2.89222em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.10777999999999999em;"><span></span></span></span></span></span><span class="mord">/</span><span class="mord">2</span><span class="mord">2</span><span class="mord">4</span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>：分配的层级</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>k</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">k_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：基准层</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">wh</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span></span></span></span>：RoI的尺寸</li><li>224：<a href="https://zhuanlan.zhihu.com/p/58188430">【AI-1000问】为什么深度学习图像分类的输入多是224*224</a></li></ul></li></ul></blockquote><h1 id="cascade-r-cnn"><a class="markdownIt-Anchor" href="#cascade-r-cnn"></a> Cascade R-CNN</h1><blockquote><p>Paper: <a href="https://arxiv.org/abs/1712.00726">Cascade R-CNN Delving into High Quality Object Detection</a></p></blockquote><p>核心思想是<strong>通过级联几个检测网络达到不断优化预测结果的目的</strong>。<br />IoU 表示两个检测框之间的重叠程度。<br />Cascade R-CNN 首先对 Faster R-CNN 中的 IoU 的使用进行了分析。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220217204230.png" alt="" /><br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220217204253.png" alt="Faster R-CNN 的网络结构" /><br />正负样本定义规则︰</p><ul><li>基于Anchor和真值框IoU匹配值<ul><li>IoU&gt;0.7为正样本，IoU&lt;0.3为负样本。</li></ul></li><li>基于Proposals和真值框IoU匹配值<ul><li>IoU&gt;0.5为正样本，IoU&lt;0.5为负样本</li></ul></li></ul><h2 id="iou-的分析"><a class="markdownIt-Anchor" href="#iou-的分析"></a> IoU 的分析</h2><p>如果单纯提高 IoU 阈值，这样后面的detector接收到了更高精度的proposals，自然能产生高精度box。但是这样就会产生两个问题：</p><ul><li>过拟合问题。提高了IoU阈值，满足这个阈值条件的proposals必然比之前少了，容易导致过拟合。</li><li>更严重的mismatch问题。</li></ul><p>上面的两个问题都会导致性能的下降。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220217204743.png" alt="" /></p><ul><li>横轴：RPN生成的Rol和真值框的IoU；</li><li>纵轴：经过第二阶段BBox head得到的新的box和真值框的IoU；</li><li>线条：使用不同IoU阈值筛选出候选框训练出来的模型。</li></ul><p><strong>RoI 自身的 IoU <strong>和</strong>训练器训练用的阈值</strong>较为接近时，训练器的性能最优。</p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220217210300.png" alt="" /><br />单一阈值训练出的检测器效果非常有限。</p><blockquote><p>引入多个 head 对RoI进行调整。</p></blockquote><p>为了解决以上问题，在多阶段检测架构中提出了级联R-CNN算法，由一系列随着IOU阈值增加而训练的检测器组成，循序渐进的对接近的负例更具选择性。检测器被阶段性的训练，如果检测器的输出是一个好的分布，则用于训练下一个阶段更好的检测器。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><h2 id="网络结构-2"><a class="markdownIt-Anchor" href="#网络结构-2"></a> 网络结构</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220217211004.png" alt="不同方式的 Faster R-CNN 网络结构改进" /><br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220217211053.png" alt="Cascade R-CNN 网络结构" /></p><p>不同改进方式：</p><ul><li>Cascade R-CNN<ul><li>对 box 三次微调，每次 BBox head 的偏移量和 RoI 解码作为下个阶段的 RoI 输入</li></ul></li><li>lterative BBox<ul><li>三次微调时的权重共享</li></ul></li><li>lntegral Loss<ul><li>三次微调并联完成，公用同样的 RoI</li></ul></li></ul><p>在这项工作中，作者将假设的质量定义为具有基本事实的IoU，并将检测器的质量定义为用于训练的IoU阈值。基本思想是单个检测器只能针对单个质量水平进行优化，主要区别在于作者考虑了给定IoU阈值的优化，而不是负例比例。</p><p>在本文中，作者提出了一种检测器架构 Cascade R-CNN 来解决这些问题，其是 R-CNN 的多阶段延伸，级联更深的检测器对接近的负例有更强的选择性。R-CNN 的级联是按顺序训练的，一个阶段的输出来训练下一阶段，这是由观察到回归器的输出 IoU 几乎总是优于输入 IoU 的动机。用某个 IoU 阈值训练的检测器的输出是良好的分布以训练下一个较高 IoU 阈值的检测器。</p><h1 id="libra-r-cnn"><a class="markdownIt-Anchor" href="#libra-r-cnn"></a> Libra R-CNN</h1><p>检测中的不平衡问题：</p><ul><li>Feature level→提取出的不同level的特征怎么才能真正地充分利用?→FPN特征融合</li><li>Sample level→采样的候选区域是否具有代表性?→采样策略</li><li>Objective level→目前设计的损失函数能不能引导目标检测器更好地收敛? →Loss</li></ul><h2 id="fpn-特征融合"><a class="markdownIt-Anchor" href="#fpn-特征融合"></a> FPN 特征融合</h2><ul><li>Rescale<ul><li>将不同层级的特征图通过差值或下采样的方法统一到C4层</li></ul></li><li>Integrate<ul><li>将汇集的特征进行融合</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mi>L</mi></mfrac></mstyle><msubsup><mo>∑</mo><mrow><mi>l</mi><mo>=</mo><msub><mi>l</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><msub><mi>l</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></msubsup><msub><mi>C</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">C=\dfrac{1}{L}\sum_{l=l_{min}}^{l_{max}}C_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">L</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.989008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.01968em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.01968em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.39981em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul></li><li>Refine<ul><li>使用non-local结构对融合特征进一步加强</li></ul></li><li>Strengthen<ul><li>将优化后的特征与不同层级上的原始特征加和<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220219185206.png" alt="增强 FPN 结构输出的特征图" /></li></ul></li></ul><h2 id="采样策略"><a class="markdownIt-Anchor" href="#采样策略"></a> 采样策略</h2><ul><li>正样本采样：从正样本中随机采样，正样本类别不平衡<ul><li>计算每个类别需要的采样个数</li><li>每个类别分别进行采样</li><li>例如∶正样本共20个，包含2类，期望采样4个正样本；那么，每一类随机采样2个正样本</li></ul></li><li>负样本采样：从负样本中随机采样，负样本IoU分配不平衡<ul><li>将负样本根据IoU分为两部分</li><li>大于阈值的样本，根据IoU进行分桶，计算应该落在每个桶中的样本数量，最后得到IoU均匀分布的负样本</li><li>低于阈值的样本随机采样</li></ul></li></ul><h2 id="loss"><a class="markdownIt-Anchor" href="#loss"></a> Loss</h2><p>把 <code>Smooth L1 Loss</code>换成了<code>Balanced L1 Loss</code>。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mi>b</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>α</mi><mi>b</mi></mfrac></mstyle><mo stretchy="false">(</mo><mi>b</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>b</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mi>α</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo separator="true">,</mo><mrow><mi mathvariant="normal">i</mi><mi mathvariant="normal">f</mi></mrow><mtext> </mtext><mtext> </mtext><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>γ</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi>C</mi><mo separator="true">,</mo><mrow><mi mathvariant="normal">o</mi><mi mathvariant="normal">t</mi><mi mathvariant="normal">h</mi><mi mathvariant="normal">e</mi><mi mathvariant="normal">r</mi><mi mathvariant="normal">w</mi><mi mathvariant="normal">i</mi><mi mathvariant="normal">s</mi><mi mathvariant="normal">e</mi></mrow></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">L_b(x)=\begin{cases}\dfrac{\alpha}{b}(b|x|+1)\ln(b|x|+1)-\alpha|x|,\mathrm{if}\,\,|x|&lt;1\\\gamma|x|+C,\mathrm{otherwise}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.23356em;vertical-align:-1.3667799999999999em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8667800000000003em;"><span style="top:-3.8667800000000003em;"><span class="pstrut" style="height:3.1075600000000003em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">i</span><span class="mord mathrm" style="margin-right:0.07778em;">f</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.1727800000000004em;"><span class="pstrut" style="height:3.1075600000000003em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">o</span><span class="mord mathrm">t</span><span class="mord mathrm">h</span><span class="mord mathrm">e</span><span class="mord mathrm">r</span><span class="mord mathrm" style="margin-right:0.01389em;">w</span><span class="mord mathrm">i</span><span class="mord mathrm">s</span><span class="mord mathrm">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3667799999999999em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ul><li>Loss 较大的样本认为是困难样本</li><li>Loss 较小的样本是容易样本</li><li>Smooth L1 中困难样本对应的梯度相对于容易样本的梯度更大，导致不同样本学习能力的不平衡</li><li>Balance L1 中，困难样本和容易样本界限处的梯度更加平滑</li></ul><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220219190926.png" alt="" /></p><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Cascade R-CNN 详细解读, 过若干, <a href="https://zhuanlan.zhihu.com/p/42553957">https://zhuanlan.zhihu.com/p/42553957</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="http://www.360doc.com/showweb/0/0/1017857910.aspx">目标检测 | 经典算法笔记—Cascade R-CNN再回首</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;思维导图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#思维导图&quot;&gt;&lt;/a&gt; 思维导图&lt;/h1&gt;
&lt;blockquote class=&quot;pullquote mindmap mindmap-md&quot;&gt;&lt;ul&gt;
&lt;li&gt;RCNN 系列算法优化</summary>
      
    
    
    
    <category term="计算机视觉" scheme="https://zoruasama.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="计算机视觉" scheme="https://zoruasama.gitee.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    <category term="目标检测" scheme="https://zoruasama.gitee.io/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>目标检测 | RCNN 系列目标检测算法详解</title>
    <link href="https://zoruasama.gitee.io/2022/02/16/CV_objectDetection_1/"/>
    <id>https://zoruasama.gitee.io/2022/02/16/CV_objectDetection_1/</id>
    <published>2022-02-16T15:20:00.000Z</published>
    <updated>2022-03-13T09:28:10.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思维导图"><a class="markdownIt-Anchor" href="#思维导图"></a> 思维导图</h1><blockquote class="pullquote mindmap mindmap-md"><ul><li>RCNN 系列<ul><li>R-CNN<ul><li>R-CNN 网络结构</li><li>R-CNN 网络效果</li></ul></li><li>Fast-RCNN<ul><li>Fast-RCNN 网络结构</li><li>Fast-RCNN 网络效果</li></ul></li><li>Faster-RCNN<ul><li>Faster-RCNN 网络结构</li><li>Anchor（锚框）</li><li>RPN<ul><li>训练策略</li><li>监督信息</li><li>Loss<ul><li>回归分支 Loss 计算公式</li></ul></li><li>生成 Proposals</li></ul></li><li>RoI Pooling<ul><li>RoI Pooling 不足</li><li>RoI Align</li></ul></li><li>BBox Head<ul><li>训练策略</li><li>监督信息</li><li>Loss</li></ul></li><li>效果</li></ul></li></ul></li></ul></blockquote><h1 id="r-cnn"><a class="markdownIt-Anchor" href="#r-cnn"></a> R-CNN</h1><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216133633.png" alt="" /><br />用深度学习<strong>分类模型提取特征</strong>方法替代传统图像特征提取算法。<br />R-CNN 核心思想：对每张图片选取多个区域，然后每个区域作为一个样本进入一个卷积神经网络来抽取特征。</p><h2 id="r-cnn-网络结构"><a class="markdownIt-Anchor" href="#r-cnn-网络结构"></a> R-CNN 网络结构</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216133919.png" alt="网络结构" /></p><ul><li>每张图会通过<strong>Selective Search</strong>提取2000个候选区域</li><li>每个区域被warped到卷积网络要求的输入大小，然后通过卷积网络得到一个输出，作为这个区域的特征</li><li>使用这些特征来训练多个SVM来识别物体，每个SVM预测一个区域是不是包含某个物体</li><li>使用这些区域特征来训练线性回归器来对区域位置进行调整</li></ul><h2 id="r-cnn-网络效果"><a class="markdownIt-Anchor" href="#r-cnn-网络效果"></a> R-CNN 网络效果</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216134151.png" alt="实验结果" /></p><p>R-CNN三大不足︰</p><ol><li>每个候选区域都需要通过CNN计算特征，<strong>计算量大</strong></li><li>Selective Search提取的区域<strong>质量不够好</strong></li><li>特征提取、SVM分类器是分模块独立训练，没有联合起来系统性优化，<strong>训练耗时长</strong></li></ol><h1 id="fast-rcnn"><a class="markdownIt-Anchor" href="#fast-rcnn"></a> Fast-RCNN</h1><p>核心思想是简化R-CNN计算复杂度。</p><h2 id="fast-rcnn-网络结构"><a class="markdownIt-Anchor" href="#fast-rcnn-网络结构"></a> Fast-RCNN 网络结构</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216134306.png" alt="网络结构" /></p><ul><li>把<code>resize</code>替换为<code>ROI Pooling</code>。将每个区域内均匀分成若干小块，每个小块得到该区域内的最大值</li><li>把<code>SVM+Regressor</code>替换为<code>softmax+regressor</code>。</li></ul><h2 id="fast-rcnn-网络效果"><a class="markdownIt-Anchor" href="#fast-rcnn-网络效果"></a> Fast-RCNN 网络效果</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216134542.png" alt="" /></p><p>相比较先前基于卷积神经网络的检测模型，Fast R-CNN在<strong>训练速度和预测速度上都有了很大提升</strong>。但是候选区域仍然采用Selective Search的方法，<strong>提取候选区域耗时长</strong>。</p><h1 id="faster-rcnn"><a class="markdownIt-Anchor" href="#faster-rcnn"></a> Faster-RCNN</h1><p>核心思想是用RPN（Region Proposal Network）网络替代Selective Search，用于提取候选区域。</p><h2 id="faster-rcnn-网络结构"><a class="markdownIt-Anchor" href="#faster-rcnn-网络结构"></a> Faster-RCNN 网络结构</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216134756.png" alt="网络结构" /></p><ol><li>第一阶段:产生候选区域<ul><li>使用Anchor替代Selective Search，选取候选区域。</li><li>选出包含物体的Anchor进入Rol Pooling提取特征。</li></ul></li><li>第二阶段：对候选区域进行分类并预测目标物体位置。</li></ol><h2 id="anchor锚框"><a class="markdownIt-Anchor" href="#anchor锚框"></a> Anchor（锚框）</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216135906.png" alt="" /></p><p>定义：特征图上的每个点作为中心点生成多个大小比例不同的边界框，这些框称为Anchor。</p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216135951.png" alt="" /></p><p>图中红色、蓝色和绿色代表三种Anchor，它们的大小不同。每种Anchor又分成了长宽比为1:2、1:1、2:1的三个Anchor。<br /><strong>特征图每个位置生成9个Anchor</strong>。</p><h2 id="rpn"><a class="markdownIt-Anchor" href="#rpn"></a> RPN</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216170834.png" alt="" /></p><h3 id="训练策略"><a class="markdownIt-Anchor" href="#训练策略"></a> 训练策略</h3><ol><li>向RPN网络输入一个监督信息，判断Anchor是<br />否包含物体。<ul><li>正样本：Anchor包含物体</li><li>负样本：Anchor不包含物体</li></ul></li><li>根据Anchor和真实框loU取值，判断正or负样本。<ul><li>正样本：<ul><li>与某一真实框loU最大的Anchor</li><li>与任意真实框loU&gt;0.7的Anchor</li></ul></li><li>负样本：<ul><li>与所有真实框的loU&lt;0.3的Anchor</li></ul></li></ul></li><li>采样规则：<ul><li>共采样256个样本</li><li>从正样本中随机采样，采样个数不超过128个</li><li>从负样本中随机采样，补齐256个样本</li></ul></li></ol><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216172531.png" alt="" /></p><ul><li>正样本：1,2,4,5,6</li><li>负样本：3</li><li>既不是正样本也不是负样本：7</li></ul><h3 id="监督信息"><a class="markdownIt-Anchor" href="#监督信息"></a> 监督信息</h3><ul><li><p>分类分支：候选框是否包含物体</p><ul><li>正样本-1</li><li>负样本-0</li></ul></li><li><p>回归分支：Anchor到真实框的偏移量</p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>t</mi><mi>y</mi><mo>∗</mo></msubsup><mo>=</mo><mo stretchy="false">(</mo><msup><mi>y</mi><mo>∗</mo></msup><mo>−</mo><msub><mi>y</mi><mi>a</mi></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msub><mi>h</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">t_y^*=(y^*-y_a)/h_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.071804em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>t</mi><mi>x</mi><mo>∗</mo></msubsup><mo>=</mo><mo stretchy="false">(</mo><msup><mi>x</mi><mo>∗</mo></msup><mo>−</mo><msub><mi>x</mi><mi>a</mi></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msub><mi>w</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">t_x^*=(x^*-x_a)/w_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.935696em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>t</mi><mi>w</mi><mo>∗</mo></msubsup><mo>=</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mi>w</mi><mo>∗</mo></msup><mi mathvariant="normal">/</mi><msub><mi>w</mi><mi>a</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_w^*=\log(w^*/w_a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.935696em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>t</mi><mi>h</mi><mo>∗</mo></msubsup><mo>=</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mi>h</mi><mo>∗</mo></msup><mi mathvariant="normal">/</mi><msub><mi>h</mi><mi>a</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_h^*=\log(h^*/h_a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9718039999999999em;vertical-align:-0.2831079999999999em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>a</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>a</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>a</mi></msub><mo separator="true">,</mo><msub><mi>h</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">x_a,y_a,w_a,h_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>——Anchor</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mo>∗</mo></msup><mo separator="true">,</mo><msup><mi>y</mi><mo>∗</mo></msup><mo separator="true">,</mo><msup><mi>w</mi><mo>∗</mo></msup><mo separator="true">,</mo><msup><mi>h</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">x^*,y^*,w^*,h^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>——真实框</li></ul></li></ul><h3 id="loss"><a class="markdownIt-Anchor" href="#loss"></a> Loss</h3><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216180213.png" alt="" /><br />RPN网络的Loss是分类和回归两个Loss相加得到的。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mo stretchy="false">{</mo><msub><mi>p</mi><mi>i</mi></msub><mo stretchy="false">}</mo><mo separator="true">,</mo><mo stretchy="false">{</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">}</mo><mo stretchy="false">)</mo><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><msub><mi>N</mi><mrow><mi>c</mi><mi>l</mi><mi>s</mi></mrow></msub></mfrac></mstyle><msub><mo>∑</mo><mi>i</mi></msub><mrow><msub><mi>L</mi><mrow><mi>c</mi><mi>l</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>p</mi><mi>i</mi></msub><mo separator="true">,</mo><msubsup><mi>p</mi><mi>i</mi><mo>∗</mo></msubsup><mo stretchy="false">)</mo></mrow><mo>+</mo><mi>λ</mi><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><msub><mi>N</mi><mrow><mi>r</mi><mi>e</mi><mi>g</mi></mrow></msub></mfrac></mstyle><msub><mo>∑</mo><mi>i</mi></msub><mrow><msubsup><mi>p</mi><mi>i</mi><mo>∗</mo></msubsup><msub><mi>L</mi><mrow><mi>r</mi><mi>e</mi><mi>g</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo separator="true">,</mo><msubsup><mi>t</mi><mi>i</mi><mo>∗</mo></msubsup><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">L(\{p_i\},\{t_i\})=\dfrac{1}{N_{cls}}\sum_i{L_{cls}(p_i,p_i^*)}+\lambda\dfrac{1}{N_{reg}}\sum_i{p_i^*L_{reg}(t_i,t_i^*)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mopen">(</span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1574400000000002em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16195399999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.293548em;vertical-align:-0.972108em;"></span><span class="mord mathdefault">λ</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.972108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16195399999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span>：分类分支的预测值</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>：回归分支的预测值</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>p</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">p^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8831359999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>：表示分类分支的监督信息，取值为0或1<ul><li>1：表示Anchor为正样本</li><li>0：表示Anchor为负样本</li></ul></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>t</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">t^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>：表示回归分支的监督信息</li></ul><h4 id="回归分支-loss-计算公式"><a class="markdownIt-Anchor" href="#回归分支-loss-计算公式"></a> 回归分支 Loss 计算公式</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><msub><mi>N</mi><mrow><mi>r</mi><mi>e</mi><mi>g</mi></mrow></msub></mfrac></mstyle><msub><mo>∑</mo><mi>i</mi></msub><mrow><msubsup><mi>p</mi><mi>i</mi><mo>∗</mo></msubsup><msub><mi>L</mi><mrow><mi>r</mi><mi>e</mi><mi>g</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo separator="true">,</mo><msubsup><mi>t</mi><mi>i</mi><mo>∗</mo></msubsup><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">\lambda\dfrac{1}{N_{reg}}\sum_i{p_i^*L_{reg}(t_i,t_i^*)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.293548em;vertical-align:-0.972108em;"></span><span class="mord mathdefault">λ</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.972108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16195399999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>L</mi><mrow><mi>l</mi><mi>o</mi><mi>c</mi></mrow></msub><mo stretchy="false">(</mo><msup><mi>t</mi><mi>u</mi></msup><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mo stretchy="false">{</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>w</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">}</mo></mrow></msub><mi>s</mi><mi>m</mi><mi>o</mi><mi>o</mi><mi>t</mi><msub><mi>h</mi><msub><mi>L</mi><mn>1</mn></msub></msub><mo stretchy="false">(</mo><msubsup><mi>t</mi><mi>i</mi><mi>u</mi></msubsup><mo>−</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">L_{loc}(t^u,v)=\sum_{i\in\{x,y,w,h\}}smooth_{L_1}(t_i^u-v_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.22471em;vertical-align:-0.47471em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">∈</span><span class="mopen mtight">{</span><span class="mord mathdefault mtight">x</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">h</span><span class="mclose mtight">}</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.47471em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br />其中，</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>m</mi><mi>o</mi><mi>o</mi><mi>t</mi><msub><mi>h</mi><msub><mi>L</mi><mn>1</mn></msub></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0.5</mn><msup><mi>x</mi><mn>2</mn></msup><mo separator="true">,</mo><mrow><mi>i</mi><mi>f</mi></mrow><mtext> </mtext><mtext> </mtext><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>−</mo><mn>0.5</mn><mo separator="true">,</mo><mrow><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi></mrow></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">smooth_{L_1}(x)=\begin{cases} 0.5x^2,\mathit{if} \,\, |x|&lt;1 \\|x|-0.5, \mathit{otherwise}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">i</span><span class="mord mathit">f</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">o</span><span class="mord mathit">t</span><span class="mord mathit">h</span><span class="mord mathit">e</span><span class="mord mathit">r</span><span class="mord mathit">w</span><span class="mord mathit">i</span><span class="mord mathit">s</span><span class="mord mathit">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">d</mi><mi>s</mi><mi>m</mi><mi>o</mi><mi>o</mi><mi>t</mi><msub><mi>h</mi><msub><mi>L</mi><mn>1</mn></msub></msub></mrow><mrow><mi mathvariant="normal">d</mi><mi>x</mi></mrow></mfrac><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo separator="true">,</mo><mrow><mi>i</mi><mi>f</mi></mrow><mtext> </mtext><mtext> </mtext><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>±</mo><mn>1</mn><mo separator="true">,</mo><mrow><mi>i</mi><mi>f</mi></mrow><mtext> </mtext><mtext> </mtext><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\dfrac{\mathrm{d}smooth_{L_1}}{\mathrm{d}x}=\begin{cases} x,\mathit{if} \,\, |x|&lt;1 \\\pm1, \mathit{if}\,\,|x|&gt;1\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6769999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">d</span></span><span class="mord mathdefault">s</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">i</span><span class="mord mathit">f</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">±</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">i</span><span class="mord mathit">f</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216225119.png" alt="" /></p><ul><li>当预测框与监督信息差别过大时，梯度值不至于过大；</li><li>当预测框监督信息差别很小时，梯度值足够小。</li></ul><h3 id="生成-proposals"><a class="markdownIt-Anchor" href="#生成-proposals"></a> 生成 Proposals</h3><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216225240.png" alt="" /></p><h2 id="roi-pooling"><a class="markdownIt-Anchor" href="#roi-pooling"></a> RoI Pooling</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216225513.png" alt="" /></p><p>核心思想∶候选框共享特征图特征，并保持输出大小一致<br />候选框分为若干子区域，将每个区域对应到输入特征图上，取每个区域内的最大值作为该区域的输出。</p><h3 id="roi-pooling-不足"><a class="markdownIt-Anchor" href="#roi-pooling-不足"></a> RoI Pooling 不足</h3><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216225721.png" alt="" /><br />RoI Pooling 在两次取整近似时，会导致检测信息和提取出的特征不匹配。</p><ol><li>候选框的位置取整。当RoI位置不是整数时，RoI的位置需要取整。</li><li>提取特征时取整。划分4个子区域做 max pooling，框的长度需要做近似取整。</li></ol><h3 id="roi-align"><a class="markdownIt-Anchor" href="#roi-align"></a> RoI Align</h3><p>是 RoI Pooling 的改进，核心思想是消除 RoI Pooling 中产生的误差。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216225942.png" alt="" /><br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216225954.png" alt="" /><br />在区域内均匀的取N个点，找到特征图上离每个点最近的四个点;再通过双线性插值的方式，得到点的输出值。最后对N个点取平均得到区域的输出。</p><h2 id="bbox-head"><a class="markdownIt-Anchor" href="#bbox-head"></a> BBox Head</h2><h3 id="训练策略-2"><a class="markdownIt-Anchor" href="#训练策略-2"></a> 训练策略</h3><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216230049.png" alt="" /></p><ul><li>RoI Feature 经过 Pooling 将特征图从14x14压缩到1x1；然后这个特征经过两个FC作为分类分支和回归分支的预测。最后再去计算 loss 。</li><li>预测阶段和 RPN 阶段生成 proposals 的过程类似，先将 head 部分的输出和 RPN 输出的RoI解码得到预测框，再进行 NMS 得到最终预测结果。</li></ul><div class="tabs" id="tab1-"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#tab1--1">RPN 网络训练阶段</button></li><li class="tab active"><button type="button" data-href="#tab1--2">BBox Head 训练阶段</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="tab1--1"><ol><li>判断Anchor是否包含物体</li><li>根据IoU判断正or负样本。<ul><li>正样本:IoU&gt;0.7</li><li>负样本:IoU&lt;0.3</li></ul></li><li>采样规则：<ul><li>共采样256个样本</li><li>从正样本中随机采样，采样个数不超过128个</li><li>从负样本中随机采样，补齐256个样本</li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="tab1--2"><ol><li>判断 RPN 网络产生的 proposals 是否包含物体</li><li>根据RoI和真实框的IoU，判断正or负样本。<ul><li>正样本:IoU&gt;0.5</li><li>负样本:IoU&lt;0.5</li></ul></li><li>采样规则：<ul><li>共采样512个样本</li><li>从正样本中随机采样，采样个数不超过128个</li><li>从负样本中随机采样，补齐512个样本</li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="监督信息-2"><a class="markdownIt-Anchor" href="#监督信息-2"></a> 监督信息</h3><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216231704.png" alt="" /></p><ul><li>分类分支学习每个预测框的类别</li><li>回归分支学习每个 RoI 到真实框的偏移量</li></ul><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216232127.png" alt="" /></p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>t</mi><mi>y</mi><mo>∗</mo></msubsup><mo>=</mo><mo stretchy="false">(</mo><msup><mi>y</mi><mo>∗</mo></msup><mo>−</mo><msub><mi>y</mi><mi>a</mi></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msub><mi>h</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">t_y^*=(y^*-y_a)/h_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.071804em;vertical-align:-0.383108em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>t</mi><mi>x</mi><mo>∗</mo></msubsup><mo>=</mo><mo stretchy="false">(</mo><msup><mi>x</mi><mo>∗</mo></msup><mo>−</mo><msub><mi>x</mi><mi>a</mi></msub><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><msub><mi>w</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">t_x^*=(x^*-x_a)/w_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.935696em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>t</mi><mi>w</mi><mo>∗</mo></msubsup><mo>=</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mi>w</mi><mo>∗</mo></msup><mi mathvariant="normal">/</mi><msub><mi>w</mi><mi>a</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_w^*=\log(w^*/w_a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.935696em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>t</mi><mi>h</mi><mo>∗</mo></msubsup><mo>=</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mi>h</mi><mo>∗</mo></msup><mi mathvariant="normal">/</mi><msub><mi>h</mi><mi>a</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_h^*=\log(h^*/h_a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9718039999999999em;vertical-align:-0.2831079999999999em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-2.4168920000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>a</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>a</mi></msub><mo separator="true">,</mo><msub><mi>w</mi><mi>a</mi></msub><mo separator="true">,</mo><msub><mi>h</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">x_a,y_a,w_a,h_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>——RoI</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mo>∗</mo></msup><mo separator="true">,</mo><msup><mi>y</mi><mo>∗</mo></msup><mo separator="true">,</mo><msup><mi>w</mi><mo>∗</mo></msup><mo separator="true">,</mo><msup><mi>h</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">x^*,y^*,w^*,h^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>——真实框</li></ul><h3 id="loss-2"><a class="markdownIt-Anchor" href="#loss-2"></a> Loss</h3><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216233748.png" alt="" /></p><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span>：分类分支的预测值</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>：回归分支的预测值</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>p</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">p^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8831359999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>：表示分类分支的监督信息，取值为0或1<ul><li>1：表示Anchor为正样本</li><li>0：表示Anchor为负样本</li></ul></li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>t</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">t^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.688696em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>：表示回归分支的监督信息</li></ul><h2 id="效果"><a class="markdownIt-Anchor" href="#效果"></a> 效果</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220216233826.png" alt="" /></p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;思维导图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#思维导图&quot;&gt;&lt;/a&gt; 思维导图&lt;/h1&gt;
&lt;blockquote class=&quot;pullquote mindmap mindmap-md&quot;&gt;&lt;ul&gt;
&lt;li&gt;RCNN 系列
&lt;ul</summary>
      
    
    
    
    <category term="计算机视觉" scheme="https://zoruasama.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="计算机视觉" scheme="https://zoruasama.gitee.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    <category term="目标检测" scheme="https://zoruasama.gitee.io/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>目标检测 | 目标检测综述</title>
    <link href="https://zoruasama.gitee.io/2022/02/15/CV_objectDetection_0/"/>
    <id>https://zoruasama.gitee.io/2022/02/15/CV_objectDetection_0/</id>
    <published>2022-02-15T15:20:00.000Z</published>
    <updated>2022-04-23T12:23:56.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思维导图"><a class="markdownIt-Anchor" href="#思维导图"></a> 思维导图</h1><blockquote class="pullquote mindmap mindmap-md"><ul><li>目标检测综述<ul><li>定义</li><li>存在的挑战</li><li>目标检测发展历程</li><li>传统目标检测算法</li><li>深度学习的目标检测算法</li><li>深度学习的优势<ul><li>传统机器视觉的局限</li><li>深度学习算法的独特优势</li></ul></li><li>RCNN 系列<ul><li>RCNN</li><li>Fast-RCNN</li><li>Faster-RCNN</li></ul></li><li>Anchor 和 Anchor-Based 方法<ul><li>两阶段方法</li><li>一阶段方法</li><li>Anchor 缺点</li></ul></li><li>Anchor-Free 方法<ul><li>基于关键点的检测算法</li><li>基于中心的检测算法</li></ul></li><li>三种算法对比</li><li>基本术语<ul><li>BBox</li><li>Anchor</li><li>RoI</li><li>Region Proposal</li><li>RPN</li><li>IoU</li><li>mAP</li><li>NMS[<sup>3][</sup>4]</li></ul></li><li>常用开源数据集</li></ul></li></ul></blockquote><h1 id="学习资料"><a class="markdownIt-Anchor" href="#学习资料"></a> 学习资料</h1><ul><li><a href="https://www.paddlepaddle.org.cn">PaddlePaddle</a></li><li><a href="https://my.oschina.net/u/876354/blog/1787921">大话目标检测经典模型（RCNN、Fast RCNN、Faster RCNN）</a></li><li><a href="https://zhuanlan.zhihu.com/p/93451942">《目标检测手把手入门教程》中的《Backbone与Detection head》 作者：Kissrabbit（知乎）</a></li></ul><h1 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h1><p>目标检测，也叫目标提取，是一种基于目标几何和统计特征的图像分割。它将目标的分割和识别合二为一，其准确性和实时性是整个系统的一项重要能力。<br />它将目标的分割和识别合二为一，其准确性和实时性是整个系统的一项重要能力。尤其是在复杂场景中，需要对多个目标进行实时处理时，目标自动提取和识别就显得特别重要。<br />随着计算机技术的发展和计算机视觉原理的广泛应用，利用计算机图像处理技术对目标进行实时跟踪研究越来越热门，对目标进行动态实时跟踪定位在智能化交通系统、智能监控系统、军事目标检测及医学导航手术中手术器械定位等方面具有广泛的应用价值。</p><h1 id="存在的挑战"><a class="markdownIt-Anchor" href="#存在的挑战"></a> 存在的挑战</h1><ul><li>环境影响</li><li>模糊</li><li>密集 crowded</li><li>遮挡 occluded</li><li>重叠 highly overlapped</li><li>多尺度<ul><li>小目标 extremely small</li><li>大目标 very large</li></ul></li><li>小样本</li><li>旋转框</li><li>体积、功耗、实时性</li><li>……</li></ul><h1 id="目标检测发展历程"><a class="markdownIt-Anchor" href="#目标检测发展历程"></a> 目标检测发展历程<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h1><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215204354.png" alt="" /></p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215205625.png" alt="" /></p><h1 id="传统目标检测算法"><a class="markdownIt-Anchor" href="#传统目标检测算法"></a> 传统目标检测算法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">digraph G&#123;</span><br><span class="line">    node [shape=box width=3]</span><br><span class="line">    a [label=&quot;区域选择\n（滑动窗口）&quot; ]</span><br><span class="line">    b [label=&quot;提取特征\n（SIFT、HOG）&quot;]</span><br><span class="line">    c [label=&quot;分类\n（SVM、Adaboost）&quot;]</span><br><span class="line">    d [label=&quot;后处理\n（NMS：过滤框）&quot;]</span><br><span class="line"></span><br><span class="line">    a-&gt;b</span><br><span class="line">    b-&gt;c</span><br><span class="line">    c-&gt;d</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215203641.png" alt="" /></p><h1 id="深度学习的目标检测算法"><a class="markdownIt-Anchor" href="#深度学习的目标检测算法"></a> 深度学习的目标检测算法</h1><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220423201623.png" alt="" /><br /><strong>Backbone network</strong>，即<strong>主干网络</strong>，是目标检测网络最为核心的部分，大多数时候，backbone选择的好坏，对检测性能影响是十分巨大的。通常，为了实现从图像中检测目标的位置和类别，我们会先从图像中提取出些必要的特征信息，比如HOG特征，然后利用这些特征去实现定位和分类。而在深度学习这一块，这一任务就交由backbone网络来完成。深度学习的强大之处就在于其特征提取的能力，在很多任务上都超越了人工特征。<br />当然，这里提出的是什么样的特征，我们是无从得知的，毕竟深度学习的“黑盒子”特性至今还无法真正将其面纱揭开。<br />从某种意义上来说，如何设计好的backbone，更好地从图像中提取信息，是至关重要的，因为特征提取不好，自然会影响到后续的定位检测。</p><p><strong>Neck network</strong>，即<strong>颈部网络</strong>，Neck部分的主要作用就是将由backbone输出的特征进行整合。其整合方式有很多，最为常见的就是FPN（Feature Pyramid Network）。除了FPN，还有SPP模块，这也是很常用的一个Neck结构。除此之外，还有：</p><ol><li><p><strong>RFB</strong>：出自《<strong>Receptive Field Block Net for Accurate and Fast Object Detection</strong>》</p></li><li><p><strong>ASPP</strong>：出自《<strong>DeepLab: Semantic image segmentation with deep convolutional nets, atrous convolution, and fully connected CRFs</strong>》</p></li><li><p><strong>SAM</strong>：出自《<strong>CBAM: Convolutional block attention module</strong>》</p></li><li><p><strong>PAN</strong>：出自《<strong>Path aggregation network for instance segmentation</strong>》。PAN是一个非常好用的特征融合方式，在FPN的bottom-up基础上又引入了top-down二次融合，有效地提升了模型性能。</p></li></ol><p><strong>Detection head</strong>，即<strong>检测头</strong>，这一部分的作用就没什么特殊的含义了，就是若干卷积层进行预测，也有些工作里把head部分称为decoder（解码器）的，这种称呼不无道理，head部分就是在由前面网络输出的特征上去进行预测，约等于是从这些信息里解耦出来图像中物体的类别和位置信息。</p><h1 id="深度学习的优势"><a class="markdownIt-Anchor" href="#深度学习的优势"></a> 深度学习的优势</h1><h2 id="传统机器视觉的局限"><a class="markdownIt-Anchor" href="#传统机器视觉的局限"></a> 传统机器视觉的局限</h2><ul><li>模板匹配误报高<ul><li>因为待识别目标（缺陷）千变万化</li></ul></li><li>算法适应性差<ul><li>因为不同产线、产品、微细差别需重复开发</li></ul></li><li>解决问题有限<ul><li>因为复杂背景、纹理难处理</li></ul></li><li>开发、维护成本巨大<ul><li>因为新缺陷、新Trick意味着新补丁</li></ul></li></ul><h2 id="深度学习算法的独特优势"><a class="markdownIt-Anchor" href="#深度学习算法的独特优势"></a> 深度学习算法的独特优势</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215204829.png" alt="" /></p><ul><li>算法适应性强</li><li>更好的平衡精度&amp;过检率</li><li>可迁移学习，经验复用</li></ul><h1 id="rcnn-系列"><a class="markdownIt-Anchor" href="#rcnn-系列"></a> RCNN 系列</h1><h2 id="rcnn"><a class="markdownIt-Anchor" href="#rcnn"></a> RCNN</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215205055.png" alt="" /></p><h2 id="fast-rcnn"><a class="markdownIt-Anchor" href="#fast-rcnn"></a> Fast-RCNN</h2><ul><li>引入RoI Pooling操作，解决重复特征提取问题</li><li>将<strong>分类和回归</strong>损失统一在同一个框架中</li><li>通过Selective Search提取候选框，速度慢，不是端到端</li></ul><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215235230.png" alt="" /></p><h2 id="faster-rcnn"><a class="markdownIt-Anchor" href="#faster-rcnn"></a> Faster-RCNN</h2><ul><li>通过RPN（Region Proposal Network）学习候选区域</li><li>提高了精度，速度快</li></ul><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215235252.png" alt="" /></p><h1 id="anchor-和-anchor-based-方法"><a class="markdownIt-Anchor" href="#anchor-和-anchor-based-方法"></a> Anchor 和 Anchor-Based 方法</h1><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215205245.png" alt="" /></p><h2 id="两阶段方法"><a class="markdownIt-Anchor" href="#两阶段方法"></a> 两阶段方法</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215232651.png" alt="" /></p><ul><li>先使用Anchor回归候选目标框，划分<strong>前景和背景</strong>。</li><li>使用候选目标框进一步<strong>回归和分类</strong>，输出最终目标框和对应的类别</li><li>R-CNN系列<ul><li>RCNN、Fast-RCNN、FasterRCNN</li><li>FPN、CascadeRCNN、LibraRCNN……</li></ul></li></ul><h2 id="一阶段方法"><a class="markdownIt-Anchor" href="#一阶段方法"></a> 一阶段方法</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215234845.png" alt="" /></p><ul><li>直接对Anchor回归和分类最终目标框和类别</li><li>算法：<ul><li>YOLOv2 YOLOv3</li><li>SSD、RetinaNet</li></ul></li></ul><h2 id="anchor-缺点"><a class="markdownIt-Anchor" href="#anchor-缺点"></a> Anchor 缺点</h2><ul><li>手工设计<ul><li>数量？大小？长宽比？</li></ul></li><li>数量多<ul><li>如何解决正负样本不均衡问题？</li></ul></li><li>超参数<ul><li>如何对不同数据设置？</li></ul></li></ul><h1 id="anchor-free-方法"><a class="markdownIt-Anchor" href="#anchor-free-方法"></a> Anchor-Free 方法</h1><p>不再使用预先设定的Anchor，通常通过预测目标的中心或者角点，对目标进行检测。</p><h2 id="基于关键点的检测算法"><a class="markdownIt-Anchor" href="#基于关键点的检测算法"></a> 基于关键点的检测算法</h2><p>先检测目标左上角和右下角点，再通过<strong>角点</strong>组合形成检测框。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215233218.png" alt="" /></p><p>基于<strong>多关键点联合表达的方法</strong></p><ul><li>CornerNet/CornerNet-lite</li><li>CenterNet: Keypoint Triplets for Object Detection</li><li>RepPoints</li></ul><h2 id="基于中心的检测算法"><a class="markdownIt-Anchor" href="#基于中心的检测算法"></a> 基于中心的检测算法</h2><p>直接检测物体的<strong>中心区域</strong>和边界信息，将分类和回归解耦为两个子网络。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215233301.png" alt="" /></p><p>基于<strong>中心区域</strong>预测方法：</p><ul><li>FCOS</li><li>CenterNet: Objects as Points</li></ul><h1 id="三种算法对比"><a class="markdownIt-Anchor" href="#三种算法对比"></a> 三种算法对比</h1><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Anchor-Based单阶段</th><th style="text-align:center">Anchor-Based两阶段</th><th style="text-align:center">Anchor-Free</th></tr></thead><tbody><tr><td style="text-align:center">网络结构</td><td style="text-align:center">简单</td><td style="text-align:center">复杂</td><td style="text-align:center">简单</td></tr><tr><td style="text-align:center">精度</td><td style="text-align:center">优秀</td><td style="text-align:center">更优秀</td><td style="text-align:center">较优秀</td></tr><tr><td style="text-align:center">预测速度</td><td style="text-align:center">快</td><td style="text-align:center">稍慢</td><td style="text-align:center">快</td></tr><tr><td style="text-align:center">超参数</td><td style="text-align:center">较多</td><td style="text-align:center">多</td><td style="text-align:center">相对少</td></tr><tr><td style="text-align:center">扩展性</td><td style="text-align:center">一般</td><td style="text-align:center">右边</td><td style="text-align:center">较好</td></tr></tbody></table><h1 id="基本术语"><a class="markdownIt-Anchor" href="#基本术语"></a> 基本术语</h1><h2 id="bbox"><a class="markdownIt-Anchor" href="#bbox"></a> BBox</h2><p>Bounding Box，边界框。</p><ul><li>绿色为人工标注的ground-truth，红色为预测结果。</li><li>有两种表达形式：<ul><li>xyxy：左上+右下</li><li>xywh：左上+宽高</li></ul></li></ul><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215210845.png" alt="" /></p><h2 id="anchor"><a class="markdownIt-Anchor" href="#anchor"></a> Anchor</h2><p>锚框。</p><ul><li>人为设定不同长宽比、面积的先验框。</li><li>在单阶段SSD检测算法中也被称为Prior Box。</li></ul><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215210944.png" alt="特征图" /></p><h2 id="roi"><a class="markdownIt-Anchor" href="#roi"></a> RoI</h2><p>Region of Interest，特定的感兴趣的区域。</p><h2 id="region-proposal"><a class="markdownIt-Anchor" href="#region-proposal"></a> Region Proposal</h2><p>候选区域/框。</p><h2 id="rpn"><a class="markdownIt-Anchor" href="#rpn"></a> RPN</h2><p>Region Proposal Network，在Anchor-Based的两阶段提取候选框的网络。</p><h2 id="iou"><a class="markdownIt-Anchor" href="#iou"></a> IoU</h2><p>Intersaction over Union。交并比。<br />评价预测框的质量，IoU越大则预测框与标注越接近。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215211200.png" alt="" /></p><h2 id="map"><a class="markdownIt-Anchor" href="#map"></a> mAP</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215213620.png" alt="" /><br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215213638.png" alt="" /></p><h2 id="nms"><a class="markdownIt-Anchor" href="#nms"></a> NMS<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></h2><p>Non-Maximum Suppression，非极大值抑制。<br />目标检测的过程中在同一目标的位置上会产生大量的候选框，这些候选框相互之间可能会有重叠，此时我们需要利用非极大值抑制找到最佳的目标边界框，消除冗余的边界框。<br />非极大值抑制的流程如下：</p><ul><li>根据置信度得分进行排序</li><li>选择置信度最高的比边界框添加到最终输出列表中，将其从边界框列表中删除</li><li>计算所有边界框的面积</li><li>计算置信度最高的边界框与其它候选框的IoU。</li><li>删除IoU大于阈值的边界框</li><li>重复上述过程，直至边界框列表为空。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#_*_ coding: utf-8 _*_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Non-max Suppression Algorithm</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @param list  Object candidate bounding boxes</span></span><br><span class="line"><span class="string">    @param list  Confidence score of bounding boxes</span></span><br><span class="line"><span class="string">    @param float IoU threshold</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @return Rest boxes after nms operation</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nms</span>(<span class="params">bounding_boxes, confidence_score, threshold</span>):</span></span><br><span class="line">    <span class="comment"># If no bounding boxes, return empty list</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(bounding_boxes) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [], []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Bounding boxes</span></span><br><span class="line">    boxes = np.array(bounding_boxes)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># coordinates of bounding boxes</span></span><br><span class="line">    start_x = boxes[:, <span class="number">0</span>]</span><br><span class="line">    start_y = boxes[:, <span class="number">1</span>]</span><br><span class="line">    end_x = boxes[:, <span class="number">2</span>]</span><br><span class="line">    end_y = boxes[:, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Confidence scores of bounding boxes</span></span><br><span class="line">    score = np.array(confidence_score)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Picked bounding boxes</span></span><br><span class="line">    picked_boxes = []</span><br><span class="line">    picked_score = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute areas of bounding boxes</span></span><br><span class="line">    areas = (end_x - start_x + <span class="number">1</span>) * (end_y - start_y + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Sort by confidence score of bounding boxes</span></span><br><span class="line">    order = np.argsort(score)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Iterate bounding boxes</span></span><br><span class="line">    <span class="keyword">while</span> order.size &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># The index of largest confidence score</span></span><br><span class="line">        index = order[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Pick the bounding box with largest confidence score</span></span><br><span class="line">        picked_boxes.append(bounding_boxes[index])</span><br><span class="line">        picked_score.append(confidence_score[index])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Compute ordinates of intersection-over-union(IOU)</span></span><br><span class="line">        x1 = np.maximum(start_x[index], start_x[order[:-<span class="number">1</span>]])</span><br><span class="line">        x2 = np.minimum(end_x[index], end_x[order[:-<span class="number">1</span>]])</span><br><span class="line">        y1 = np.maximum(start_y[index], start_y[order[:-<span class="number">1</span>]])</span><br><span class="line">        y2 = np.minimum(end_y[index], end_y[order[:-<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Compute areas of intersection-over-union</span></span><br><span class="line">        w = np.maximum(<span class="number">0.0</span>, x2 - x1 + <span class="number">1</span>)</span><br><span class="line">        h = np.maximum(<span class="number">0.0</span>, y2 - y1 + <span class="number">1</span>)</span><br><span class="line">        intersection = w * h</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Compute the ratio between intersection and union</span></span><br><span class="line">        ratio = intersection / (areas[index] + areas[order[:-<span class="number">1</span>]] - intersection)</span><br><span class="line"></span><br><span class="line">        left = np.where(ratio &lt; threshold)</span><br><span class="line">        order = order[left]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> picked_boxes, picked_score</span><br><span class="line"><span class="comment">#Image name</span></span><br><span class="line">image_name = <span class="string">&#x27;nms.jpg&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Bounding boxes</span></span><br><span class="line">bounding_boxes = [(<span class="number">187</span>, <span class="number">82</span>, <span class="number">337</span>, <span class="number">317</span>), (<span class="number">150</span>, <span class="number">67</span>, <span class="number">305</span>, <span class="number">282</span>), (<span class="number">246</span>, <span class="number">121</span>, <span class="number">368</span>, <span class="number">304</span>)]</span><br><span class="line">confidence_score = [<span class="number">0.9</span>, <span class="number">0.75</span>, <span class="number">0.8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Read image</span></span><br><span class="line">image = cv2.imread(image_name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Copy image as original</span></span><br><span class="line">org = image.copy()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Draw parameters</span></span><br><span class="line">font = cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line">font_scale = <span class="number">1</span></span><br><span class="line">thickness = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#IoU threshold</span></span><br><span class="line">threshold = <span class="number">0.4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Draw bounding boxes and confidence score</span></span><br><span class="line"><span class="keyword">for</span> (start_x, start_y, end_x, end_y), confidence <span class="keyword">in</span> <span class="built_in">zip</span>(bounding_boxes, confidence_score):</span><br><span class="line">    (w, h), baseline = cv2.getTextSize(<span class="built_in">str</span>(confidence), font, font_scale, thickness)</span><br><span class="line">    cv2.rectangle(org, (start_x, start_y - (<span class="number">2</span> * baseline + <span class="number">5</span>)), (start_x + w, start_y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), -<span class="number">1</span>)</span><br><span class="line">    cv2.rectangle(org, (start_x, start_y), (end_x, end_y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">    cv2.putText(org, <span class="built_in">str</span>(confidence), (start_x, start_y), font, font_scale, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), thickness)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Run non-max suppression algorithm</span></span><br><span class="line">picked_boxes, picked_score = nms(bounding_boxes, confidence_score, threshold)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Draw bounding boxes and confidence score after non-maximum supression</span></span><br><span class="line"><span class="keyword">for</span> (start_x, start_y, end_x, end_y), confidence <span class="keyword">in</span> <span class="built_in">zip</span>(picked_boxes, picked_score):</span><br><span class="line">    (w, h), baseline = cv2.getTextSize(<span class="built_in">str</span>(confidence), font, font_scale, thickness)</span><br><span class="line">    cv2.rectangle(image, (start_x, start_y - (<span class="number">2</span> * baseline + <span class="number">5</span>)), (start_x + w, start_y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), -<span class="number">1</span>)</span><br><span class="line">    cv2.rectangle(image, (start_x, start_y), (end_x, end_y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">    cv2.putText(image, <span class="built_in">str</span>(confidence), (start_x, start_y), font, font_scale, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), thickness)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Show image</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;Original&#x27;</span>, org)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;NMS&#x27;</span>, image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220215213727.png" alt="" /></p><h1 id="常用开源数据集"><a class="markdownIt-Anchor" href="#常用开源数据集"></a> 常用开源数据集</h1><table><thead><tr><th style="text-align:left">数据集</th><th style="text-align:left">类别数</th><th style="text-align:left">train图片数，box数</th><th style="text-align:left">val图片数，box数</th><th style="text-align:left">boxes/Image</th></tr></thead><tbody><tr><td style="text-align:left">Pascal VOC-2012</td><td style="text-align:left">20</td><td style="text-align:left">5717,13k+</td><td style="text-align:left">5823,13k+</td><td style="text-align:left">2.4</td></tr><tr><td style="text-align:left">COCO</td><td style="text-align:left">80</td><td style="text-align:left">118287,40k+</td><td style="text-align:left">5000,36k+</td><td style="text-align:left">7.3</td></tr><tr><td style="text-align:left">Object365</td><td style="text-align:left">365</td><td style="text-align:left">600k,9623k</td><td style="text-align:left">38k,479k</td><td style="text-align:left">16</td></tr><tr><td style="text-align:left">OpenImages18</td><td style="text-align:left">500</td><td style="text-align:left">1643042,860k+</td><td style="text-align:left">100000,696k+</td><td style="text-align:left">7.0</td></tr></tbody></table><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>百度百科：<a href="https://baike.baidu.com/item/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/8688936?fr=aladdin">https://baike.baidu.com/item/目标检测/8688936?fr=aladdin</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>Zhengxia Zou, Zhenwei Shi, Yuhong Guo, Jieping Ye: “Object Detection in 20 Years: A Survey”, 2019; <a href="http://arxiv.org/abs/1905.05055">arXiv:1905.05055</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>非极大值抑制(Non-Maximum Suppression), SnailTyan, <a href="https://www.jianshu.com/p/d452b5615850">https://www.jianshu.com/p/d452b5615850</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>Code: <a href="https://github.com/SnailTyan/deep-learning-tools/blob/master/nms.py">https://github.com/SnailTyan/deep-learning-tools/blob/master/nms.py</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li></ol></section><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;思维导图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#思维导图&quot;&gt;&lt;/a&gt; 思维导图&lt;/h1&gt;
&lt;blockquote class=&quot;pullquote mindmap mindmap-md&quot;&gt;&lt;ul&gt;
&lt;li&gt;目标检测综述
&lt;ul&gt;</summary>
      
    
    
    
    <category term="计算机视觉" scheme="https://zoruasama.gitee.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
    <category term="计算机视觉" scheme="https://zoruasama.gitee.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    <category term="目标检测" scheme="https://zoruasama.gitee.io/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理 | 一个简易提取圆形的工具</title>
    <link href="https://zoruasama.gitee.io/2022/01/04/imageProcessing_0/"/>
    <id>https://zoruasama.gitee.io/2022/01/04/imageProcessing_0/</id>
    <published>2022-01-04T09:00:00.000Z</published>
    <updated>2022-01-04T09:46:37.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h1><p>最近这段时间，我在我的博客的<strong>友情链接功能</strong>中完成了新的特性。就像下面这幅图一样，可以在卡片上显示院校校徽。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20211228154503.png" alt="" /></p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20211228154626.png" alt="点击可以显示大图" /></p><p>不过这其中有一个问题是，这些院校的校徽素材网上并没有现成的，所以还得我自己来进行处理。<br />于是乎我打开了图像处理软件 Photoshop 来处理这些图片素材。</p><h1 id="photoshop-处理流程以厦门大学为例"><a class="markdownIt-Anchor" href="#photoshop-处理流程以厦门大学为例"></a> Photoshop 处理流程（以厦门大学为例）</h1><h2 id="新建图片"><a class="markdownIt-Anchor" href="#新建图片"></a> 新建图片</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20211228155203.png" alt="" /><br />新建一张大小为300x300的条件，这个大小是我根据自己的需要设定为标准的。</p><h2 id="网上收集校徽素材"><a class="markdownIt-Anchor" href="#网上收集校徽素材"></a> 网上收集校徽素材</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20211228155752.png" alt="" /><br />打开百度搜索合适的校徽素材，一般要求就是清晰，背景简单不复杂。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20211228155929.png" alt="" /><br />然后直接使用截图工具截图，这里为了后续<strong>自由变换</strong>比较方便，截图时直接截取正方形大小的区域。</p><h2 id="调整大小和位置"><a class="markdownIt-Anchor" href="#调整大小和位置"></a> 调整大小和位置</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20211228160107.png" alt="" /><br />粘贴至Photoshop中后，用<strong>自由变换</strong>调整大小，使得校徽刚好内切于这个正方形。就像下面这张图所呈现的一样。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20211228160256.png" alt="" /></p><h2 id="把背景变透明"><a class="markdownIt-Anchor" href="#把背景变透明"></a> 把背景变透明</h2><p>直接使用魔棒工具选中周围的白色区域，然后删除它们。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20211228160433.png" alt="" /></p><h2 id="最终效果"><a class="markdownIt-Anchor" href="#最终效果"></a> 最终效果</h2><p>最终效果如图所示。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20211228160535.png" alt="" /></p><hr /><p>虽然有PS的帮助，这项工作变得没有那么麻烦，可要处理数量如此繁多的图像，一张一张来还是有些麻烦。于是我开始思考，这个过程能不能用程序来辅助呢？遂进入这篇文章的正题：一个简单的图像处理程序。</p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20211228160644.png" alt="" /></p><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>在做这个计划之前，我作了一个思考。我说要做一个处理这个流程的图像处理程序，其实Photoshop就是一个图像处理程序。但是前者是解决特定某个问题的，而后者是泛用型的（而且为了方便地泛用做了GUI界面）。<br />另一个问题是，学校里并没有教授图像处理相关的课程，调用库函数之类的活儿几乎也是人人都能干。那么科班生和非科班生的区别在哪里呢？<br />我想，图像处理的本质仍然是数字处理。虽然库函数里读入图像、写到图像就像一个黑盒一样，使用者不必关心其内部如何，但是我大概能摸索出它的内部实现或许是根据文件的编码格式来读取二进制数据放到内存的不同数据结构中（如下图是BMP图像的文件格式，详情可以查看<a href="https://blog.csdn.net/lijian2017/article/details/80783963">这篇文章</a>）；<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20211228163406.png" alt="" /></p><p>再例如<code>resize</code>函数，看似简单的调整大小，它的内部实现应该是原图像和新图像之间有某种函数映射，如果是放大图像，新图像像素数量比原图像像素数量多，所以新图像中部分像素肯定是需要通过原图像像素用某种算法来得出。这些思维是我学习学校课程得到的。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20211228162914.png" alt="" /></p><p>所以同样是放大5倍，画图工具和贴图工具产生的最终结果不一样。因为可以选择的插值算法有很多种。如下图所示是Photoshop中的插值算法。</p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20211228162951.png" alt="" /></p><p>综上所述，即使学校没有直接教学怎么写图像处理的代码，也教会了我们“数据与计算”的思想，有了这个思想再去学习很多东西是很有助力的。</p><h1 id="任务规划"><a class="markdownIt-Anchor" href="#任务规划"></a> 任务规划</h1><p>通过之前使用Photoshop对图像进行处理，可以把这个任务归结为以下几个步骤：</p><div><div class="graphviz">digraph G{    node [shape=box width=4]    a [label="输入图片" ]    b [label="定位图形"]    c [label="把周围白色的变成透明的"]    d [label="裁切成内切，然后调整为300x300大小"]    e [label="输出图片"]<pre><code>a-&gt;bb-&gt;cc-&gt;dd-&gt;e</code></pre><p>}</div></div></p><h2 id="环境配置"><a class="markdownIt-Anchor" href="#环境配置"></a> 环境配置</h2><ul><li>使用Python 3.8.12</li><li>使用<code>matplotlib</code>、<code>skimage</code>和<code>numpy</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> skimage.transform</span><br><span class="line"><span class="keyword">import</span> skimage.draw</span><br><span class="line"><span class="keyword">import</span> skimage.io</span><br></pre></td></tr></table></figure><h2 id="输入图片示例"><a class="markdownIt-Anchor" href="#输入图片示例"></a> 输入图片示例</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220104160044.png" alt="" /><br />均为网络收集（好像混入了什么奇怪的东西）。<br />背景均为简单的白色，图片上没有其他复杂图形，只有一个圆形图形。<br />接下来这个工具只能处理圆形校徽，暂且不支持异形（如南京大学、华中科技大学等）。好在大部分高校的校徽都是圆形的。</p><h2 id="输出图片示例"><a class="markdownIt-Anchor" href="#输出图片示例"></a> 输出图片示例</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220104160055.png" alt="" /><br />文件名字是我后来自己修改的。</p><h1 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h1><h2 id="输入图片"><a class="markdownIt-Anchor" href="#输入图片"></a> 输入图片</h2><p>首先先设定三个基础的变量，然后用<code>matplotlib.pyplot</code>里的<code>imread</code>函数读入这个文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>=<span class="string">&quot;./inputs/&quot;</span></span><br><span class="line">output=<span class="string">&quot;./outputs/&quot;</span></span><br><span class="line">filename=<span class="string">&quot;1.png&quot;</span></span><br><span class="line">img = plt.imread(<span class="built_in">input</span> + imgname)</span><br></pre></td></tr></table></figure><h2 id="定位位置"><a class="markdownIt-Anchor" href="#定位位置"></a> 定位位置</h2><h3 id="基本方法"><a class="markdownIt-Anchor" href="#基本方法"></a> 基本方法</h3><p>如果想把图片裁切成内切，那么得想办法先定位圆的位置。这里我选择用一种简单粗暴的方法定位圆形，那就是逐行扫描。<br />由于输入图像的背景都是白色的，而校徽基本上都是非白色的，因此——</p><blockquote><ol><li>从头扫描第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>行，逐个判断像素点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>是否为白色，如果是，结束扫描，记录这个像素点的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">y_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，然后</li><li>从尾扫描第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>行，逐个判断像素点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>是否为白色，如果是，结束扫描，记录这个像素点的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">y_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，再扫描<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>行</li><li>扫描完所有行后，可以得到这过程中最大的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>2</mn></msub><mo>−</mo><msub><mi>y</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">y_2-y_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>值以及取得该值的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">x_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</li></ol><p>那么就获得了这个圆的圆心为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo separator="true">,</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><msub><mi>y</mi><mn>2</mn></msub><mo>+</mo><msub><mi>y</mi><mn>1</mn></msub></mrow><mn>2</mn></mfrac></mstyle><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_{max},\dfrac{y_2+y_1}{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.9463300000000001em;vertical-align:-0.686em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>，半径为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><msub><mi>y</mi><mn>2</mn></msub><mo>−</mo><msub><mi>y</mi><mn>1</mn></msub></mrow><mn>2</mn></mfrac></mstyle><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\dfrac{y_2-y_1}{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.9463300000000001em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>。有了圆心和半径，自然就可以确定这个圆的位置。</p></blockquote><p>用下面的方法输出处理的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([ansl,ansr],[ansx,ansx],<span class="string">&quot;r--o&quot;</span>) <span class="comment">#画出直径</span></span><br><span class="line">ox=<span class="built_in">round</span>((ansr+ansl)/<span class="number">2</span>) <span class="comment">#计算圆心</span></span><br><span class="line">oy=ansx</span><br><span class="line">r=<span class="built_in">int</span>(ans/<span class="number">2</span>) <span class="comment">#计算半径</span></span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220104162217.png" alt="" /><br />为了可视化上面那个过程，我把程序判断的白色像素点画成了黑色，而非白色像素点保持不变。<br />发现程序并没有很好地完成这个轮廓的识别。虽然在上图直径似乎是判断准确了，但是这是一个巧合：在轮廓判断不对的情况下，大部分输入图像的直径都是很难判断准确的。这是为什么呢？<br />这是因为周边那些像素点其实都不是真正的“白色”。如下图所示，这个点虽然看上去是白色，但不是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>255</mn><mo separator="true">,</mo><mn>255</mn><mo separator="true">,</mo><mn>255</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(255,255,255)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord">5</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">5</span><span class="mclose">)</span></span></span></span>的白色，而程序在判断该像素点是否为白色像素点时，又是直接比对的RGB值。那么有什么好的解决方法吗？我选择引入颜色距离。（我不知道是否还有更好的方法，在这里我姑且这样做了）<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220104162847.png" alt="" /></p><h3 id="颜色距离"><a class="markdownIt-Anchor" href="#颜色距离"></a> 颜色距离</h3><p>首先我在不少课程里面都接触过向量距离这个概念，描述向量距离可以用欧氏距离、曼哈顿距离、切比雪夫距离、马氏距离、余弦距离等等。<br />而RGB值同样也可以视为是一个向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>r</mi><mo separator="true">,</mo><mi>g</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(r,g,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span>，在本次应用中，我选择简单的欧氏距离，代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">diff</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (a[<span class="number">0</span>]-b[<span class="number">0</span>])**<span class="number">2</span> + (a[<span class="number">1</span>]-b[<span class="number">1</span>])**<span class="number">2</span> + + (a[<span class="number">2</span>]-b[<span class="number">2</span>])**<span class="number">2</span></span><br></pre></td></tr></table></figure><p>那么<code>diff(rgb,[255,255,255])</code>结果反馈了某个颜色值与白色的相近程度。接下来就能用一个不等式来判断这个是否为“白色”。<br />即：<code>if diff(rgb,[255,255,255]) &lt; threshold</code><br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220104170149.png" alt="" /><br />如图所示，随着阈值<code>threshold</code>升高，轮廓获取得也就越来越准确。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220104170237.png" alt="" /><br />最后标注的直径也是准确的。</p><h3 id="又一个新问题"><a class="markdownIt-Anchor" href="#又一个新问题"></a> 又一个新问题</h3><p>然而，这在我测试下一张输入图片时，又发现了新的问题。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220104170322.png" alt="" /><br />可以看到这个直径标注得或许有点偏了。这又是为什么呢？<br />经过分析：<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220104170617.png" alt="" /><br />由于这些正切位置的像素在水平方向上变化较小，有些图像会处理成一条“直线”。（因为这是位图而非矢量图）<br />因此这个地方需要一些修正。我的修正方法是，将同样达到当前<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>2</mn></msub><mo>−</mo><msub><mi>y</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">y_2-y_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>最大值的位置加入到列表中。同时当产生新的最大值时，列表要清空。<br />最后在算法结束时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding="application/x-tex">x_{max}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>通过计算列表的平均值来获得。即<code>ansx=int(np.average(anslist))</code>。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/202112/20220104171018.png" alt="" /><br />可以看到，经过“取平均”方法修正后，可以取得正常的直径了。</p><p>至此，轮廓和直径都能正常的判断了，即圆心和半径都能正常判断了。得到了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>r</mi><mo separator="true">,</mo><mi>o</mi><mi>x</mi><mo separator="true">,</mo><mi>o</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(r,ox,oy)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>。</p><h2 id="把周围白色的变成透明的"><a class="markdownIt-Anchor" href="#把周围白色的变成透明的"></a> 把周围白色的变成透明的</h2><p>把图像某个地方变成透明的，首先要解决的问题是，一个像素点仅有RGB值，是没有办法表达“透明“的信息的。<br />因此需要引入新的通道，即把RGB变成RGBA，才能表达“透明”的信息。A就是Alpha，不透明度。<br />我的输入图像为RGB 3通道图像，通过下面这个方法变为RGBA 4通道图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb2rgba</span>(<span class="params">img</span>):</span></span><br><span class="line">    new_img = np.zeros((img.shape[<span class="number">0</span>],img.shape[<span class="number">1</span>],img.shape[<span class="number">2</span>]+<span class="number">1</span>),dtype=<span class="string">&#x27;float&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,img.shape[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,img.shape[<span class="number">1</span>]):</span><br><span class="line">            new_img[x][y] = np.append(img[x][y],<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> new_img</span><br></pre></td></tr></table></figure><p>变为四通道后，只要让RGBA<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>r</mi><mo separator="true">,</mo><mi>g</mi><mo separator="true">,</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(r,g,b,a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mclose">)</span></span></span></span>的第四维<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>，变为0，就是完全透明了。<br />而我在上一小节已经把图像的白色背景识别出来了，而且把他们标记成了黑色，实际上只要把这个步骤修改，标记为透明，就能达成这一小节的目标。<br />用代码表示，则为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">img[x][y]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 前三个维度任何值都无所谓，最后一个维度要为0</span></span><br></pre></td></tr></table></figure><h2 id="裁切成内切然后调整为300x300大小"><a class="markdownIt-Anchor" href="#裁切成内切然后调整为300x300大小"></a> 裁切成内切，然后调整为300x300大小</h2><p>首先根据之前得到的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>r</mi><mo separator="true">,</mo><mi>o</mi><mi>x</mi><mo separator="true">,</mo><mi>o</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(r,ox,oy)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，可以简单地使用ROI裁切到目标区域。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img = img[oy-r:oy+r,ox-r:ox+r]  <span class="comment">#ROI区域选择</span></span><br></pre></td></tr></table></figure><p>然后使用<code>skimage.transform.resize</code>方法（其他图像处理库的resize方法也可以）完成大小的调整。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img = skimage.transform.resize(img,output_shape=(<span class="number">300</span>,<span class="number">300</span>))</span><br></pre></td></tr></table></figure><h2 id="输出图片"><a class="markdownIt-Anchor" href="#输出图片"></a> 输出图片</h2><p>最后用<code>skimage.io.imsave</code>输出图片即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">skimage.io.imsave(output+filename, img)</span><br><span class="line"><span class="comment"># 我原来是使用plt.imsave来存储的。但是在resize时，有些像素点的RGB值可能会是超过1的值（例如1.00003）从而存储失败</span></span><br><span class="line"><span class="comment"># 似乎是plt.imsave存储float 0..1的要求好像比较高</span></span><br><span class="line"><span class="comment"># 不知道我的理解对不对。欢迎读者提出勘误和高见。</span></span><br><span class="line"><span class="comment"># plt.imsave(output+filename,img)</span></span><br></pre></td></tr></table></figure><h1 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h1><p>虽然由于我的业务不精湛，制作这个程序花了不少时间，碰了不少壁，但是解决这个问题的过程中，也能学习到不少东西，能够熟练这些图像处理库的用法，为日后做更进一步的工作作一定的铺垫。</p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#背景&quot;&gt;&lt;/a&gt; 背景&lt;/h1&gt;
&lt;p&gt;最近这段时间，我在我的博客的&lt;strong&gt;友情链接功能&lt;/strong&gt;中完成了新的特性。就像下面这幅图一样，可以在卡片上显示院校校徽。&lt;br</summary>
      
    
    
    
    <category term="数字图像处理" scheme="https://zoruasama.gitee.io/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
    <category term="数字图像处理" scheme="https://zoruasama.gitee.io/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Unity | Unity 窗口介绍</title>
    <link href="https://zoruasama.gitee.io/2021/12/21/unity_0/"/>
    <id>https://zoruasama.gitee.io/2021/12/21/unity_0/</id>
    <published>2021-12-21T13:35:00.000Z</published>
    <updated>2021-12-21T13:37:23.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211221213345.png" alt="" /><br />这篇文章是对Unity软件的窗口进行一个简单的介绍。<br />在Unity调整到<code>2 by 3</code>布局下，可以更好地看见这几个窗口。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211221182323.png" alt="" /></p><h1 id="scene-场景编辑窗口"><a class="markdownIt-Anchor" href="#scene-场景编辑窗口"></a> Scene 场景编辑窗口</h1><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211221183912.png" alt="" /></p><p>左边的工具栏可以使用<code>Q``W``E``R``T``Y</code>的快捷键来快速切换。它们的功能分别是：</p><ul><li>在屏幕方向对画面进行平移。</li><li>调整物体的x, y, z坐标位置。</li><li>调整物体的旋转角度。</li><li>调整物体的缩放大小。</li><li>框选多个物体。</li><li>从图标上可以知道它是<code>W``E``R</code>的结合。</li></ul><p>按住右键，再操作<code>W``A``S``D``Q``E</code>可以在里面“体验”一下。</p><h1 id="game-游戏运行窗口"><a class="markdownIt-Anchor" href="#game-游戏运行窗口"></a> Game 游戏运行窗口</h1><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211221195353.png" alt="" /><br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211221195708.png" alt="" /><br />游戏的窗口，可以通过这些个按钮来操作。<br />上面工具栏：</p><ul><li>Game/Simulator：桌面端和移动端</li><li>Display 1：显示第几个Camera的视角（？）</li><li>Free Aspects：画面比例</li><li>Scale：放大倍数</li><li>Play Focused：里面有个maximized，是下次play时全屏播放</li><li>Mute Audio：静音</li><li>Stats：显示硬件数据</li><li>Gizmos：可视化辅助工具</li></ul><h1 id="hierarchy-场景物体列表窗口"><a class="markdownIt-Anchor" href="#hierarchy-场景物体列表窗口"></a> Hierarchy 场景物体列表窗口</h1><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211221200149.png" alt="" /><br />显示场景中已有的物体，双击物体，镜头会移动到物体处。</p><h1 id="project-项目资源列表窗口"><a class="markdownIt-Anchor" href="#project-项目资源列表窗口"></a> Project 项目资源列表窗口</h1><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211221212509.png" alt="" /></p><p>放置模型等素材资源。<br />要修改时最好在这个窗口直接修改，因为它会生成<code>*.meta</code>文件。在Windows资源管理器中修改时可能会报错。</p><h1 id="inspector-属性编辑列表窗口"><a class="markdownIt-Anchor" href="#inspector-属性编辑列表窗口"></a> Inspector 属性编辑列表窗口</h1><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211221213059.png" alt="" /><br />在Scene窗口中选中物体后，可以在这里修改它的属性。</p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/zoruasama/Zorua-Pic/raw/master/2021122121334</summary>
      
    
    
    
    <category term="Unity" scheme="https://zoruasama.gitee.io/categories/Unity/"/>
    
    
    <category term="Unity" scheme="https://zoruasama.gitee.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记 | KMP算法</title>
    <link href="https://zoruasama.gitee.io/2021/12/20/algorithm_4/"/>
    <id>https://zoruasama.gitee.io/2021/12/20/algorithm_4/</id>
    <published>2021-12-20T13:30:00.000Z</published>
    <updated>2021-12-20T13:32:11.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h1><p><strong>KMP算法</strong>是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为克努特—莫里斯—普拉特操作（简称KMP算法）。KMP算法的核心是<strong>利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的</strong>。具体实现就是通过一个<strong>next()函数</strong>实现，函数本身包含了模式串的局部匹配信息。KMP算法的时间复杂度O(m+n)<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p><hr /><p>上面这个<code>next()</code>函数，有的地方也把它叫做<code>fail()</code>函数。</p><h2 id="背景问题"><a class="markdownIt-Anchor" href="#背景问题"></a> 背景问题</h2><p>例如对于下面一个文本串：</p><blockquote><p>ABCDABABCDEAB</p></blockquote><p>模式串为<code>ABCDE</code><br />直接可以想到的解法就是，用一个双重循环移位去一位一位地比较。就像下面这个代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">string a=<span class="string">&quot;ABCDABABCDEAB&quot;</span>,b=<span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> lena=a.<span class="built_in">length</span>(),lenb=b.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lena;++i)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=lenb;++j)&#123; <span class="comment">//循环到lenb用于判断是否完全匹配</span></span><br><span class="line">        <span class="keyword">if</span>(j==lenb) flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i+j]!=b[j]) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Succeed at position: &quot;</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果匹配起点位置的变化能如下图所示，就可以减少很多次不必要的匹配。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211220161314.png" alt="" /></p><h1 id="具体实现"><a class="markdownIt-Anchor" href="#具体实现"></a> 具体实现</h1><h2 id="理论"><a class="markdownIt-Anchor" href="#理论"></a> 理论</h2><p>next数组其实就是当匹配失败时，起点位置应该从哪里开始。<strong>next数组是对模式串进行的预处理</strong></p><blockquote><p>next[i] 表示 P[0] ~ P[i] 这一个子串，使得 前k个字符恰等于后k个字符 的最大的k. 特别地，k不能取i+1（因为这个子串一共才 i+1 个字符，自己肯定与自己相等，就没有意义了）。</p></blockquote><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211220164531.jpg" alt="" /></p><p>上图给出了一个例子。P=“abcabd&quot;时，next[4]=2，这是因为P[0] ~ P[4] 这个子串是&quot;abcab”，前两个字符与后两个字符相等，因此next[4]取2. 而next[5]=0，是因为&quot;abcabd&quot;找不到前缀与后缀相同，因此只能取0.</p><p>如果把模式串视为一把标尺，在主串上移动，那么 Brute-Force 就是每次失配之后只右移一位；改进算法则是<strong>每次失配之后，移很多位</strong>，跳过那些不可能匹配成功的位置。但是该如何确定要移多少位呢？</p><p>失配之后，标尺移动之后，由于发生失配的位置前绝不可能匹配了，所以起始位置i不用变动，直接变动j就可以了。如果第一位就失配，那么i就要移动一位，所以在next数组里面next[0]标记为-1。</p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211220201021.jpg" alt="" /></p><h2 id="next预处理"><a class="markdownIt-Anchor" href="#next预处理"></a> next预处理</h2><h3 id="普通方法"><a class="markdownIt-Anchor" href="#普通方法"></a> 普通方法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据next数组的定义来形成 O(m^2)</span></span><br><span class="line"><span class="keyword">int</span> next[maxn];</span><br><span class="line">next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="number">012345</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;lenb;++i)&#123; <span class="comment">//前i个字符组成的子串</span></span><br><span class="line">    next[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p=i<span class="number">-1</span>;p&gt;=<span class="number">1</span>;--p)&#123; <span class="comment">//前后缀长度为p</span></span><br><span class="line">        <span class="keyword">if</span>(b.<span class="built_in">substr</span>(<span class="number">0</span>,p) == b.<span class="built_in">substr</span>(i-p+<span class="number">1</span>,i))&#123;</span><br><span class="line">            next[i]=p;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="优化方法"><a class="markdownIt-Anchor" href="#优化方法"></a> 优化方法<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//复旦大学朱洪教授的优化预处理算法 O(m)</span></span><br><span class="line"><span class="keyword">int</span> next[maxn];</span><br><span class="line">next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;lenb<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">-1</span>||b[j]==b[k])&#123;   <span class="comment">//匹配下一个</span></span><br><span class="line">        ++j;</span><br><span class="line">        ++k;</span><br><span class="line">        next[j] = k;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        k = next[k];        <span class="comment">//回溯</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//k==-1 -&gt; next[1]=0;</span></span><br><span class="line"><span class="comment">//p[1]==p[0] ? next[2]=1 : k=next[0]=-1</span></span><br><span class="line"><span class="comment">//p[2]==p[1] ? next[3]=2 : k=next[1]=0</span></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><h2 id="比较字符串"><a class="markdownIt-Anchor" href="#比较字符串"></a> 比较字符串</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;lena)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i]==b[j])&#123;  <span class="comment">//两个字符相等，各进一步</span></span><br><span class="line">        i++;j++;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j)&#123;</span><br><span class="line">        j=nexts[j<span class="number">-1</span>]; <span class="comment">//非第一位失配，按next数组右移标尺</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        i++;   <span class="comment">// 第一位失配，直接右移i</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==lenb)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;Succeed at position: &quot;</span>&lt;&lt;i-j;</span><br><span class="line">        <span class="comment">// j=nexts[j-1] //再移动标尺 如果是完全寻找的话</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法比较"><a class="markdownIt-Anchor" href="#方法比较"></a> 方法比较</h1><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211220161010.png" alt="" /><br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211220211738.png" alt="" /></p><p>我用的这个字符串例子比较的差距看似还不算特别大，用一些比较长的字符串能更好地体现KMP的性能。<br />例如<code>string a=&quot;ABCDABABCDABABCDABABCDABABCDEAB&quot;,b=&quot;ABCDE&quot;;</code></p><h2 id="详细代码"><a class="markdownIt-Anchor" href="#详细代码"></a> 详细代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string a=<span class="string">&quot;ABCDABABCDEAB&quot;</span>,b=<span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> lena=a.<span class="built_in">length</span>(),lenb=b.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">10000000</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lena;++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=lenb;++j)&#123;</span><br><span class="line">               <span class="keyword">if</span>(j==lenb) flag=<span class="literal">true</span>;</span><br><span class="line">               <span class="keyword">if</span>(a[i+j]!=b[j]) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="keyword">if</span>(t==<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;Succeed at positions: &quot;</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//864ms 692kb (10000000 times)</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string a=<span class="string">&quot;ABCDABABCDEAB&quot;</span>,b=<span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> lena=a.<span class="built_in">length</span>(),lenb=b.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">int</span> nexts[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">()</span></span>&#123;</span><br><span class="line">    nexts[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;lenb<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">-1</span>||b[j]==b[k])&#123;   <span class="comment">//匹配下一个</span></span><br><span class="line">            ++j;</span><br><span class="line">            ++k;</span><br><span class="line">            nexts[j] = k;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            k = nexts[k];        <span class="comment">//回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">getNext</span>();</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;lena)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]==b[j])&#123;  <span class="comment">//两个字符相等，各进一步</span></span><br><span class="line">                i++;j++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j)&#123;</span><br><span class="line">                j=nexts[j<span class="number">-1</span>]; <span class="comment">//非第一位失配，按next数组右移标尺</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;   <span class="comment">// 第一位失配，直接右移i</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j==lenb)&#123;</span><br><span class="line">                <span class="keyword">if</span>(t==<span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;Succeed at position: &quot;</span>&lt;&lt;i-j;</span><br><span class="line">                <span class="comment">// j=nexts[j-1] //再移动标尺 如果是完全寻找的话</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//605ms 808kb (10000000 times)</span></span><br></pre></td></tr></table></figure><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><p>[1] <a href="https://www.cnblogs.com/yjiyjige/p/3263858.html">https://www.cnblogs.com/yjiyjige/p/3263858.html</a><br />[2] <a href="https://www.zhihu.com/question/21923021">https://www.zhihu.com/question/21923021</a><br />[3] 阮行止, <a href="https://www.ruanx.net/kmp/">https://www.ruanx.net/kmp/</a></p><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>抄自百度百科：<a href="https://baike.baidu.com/item/kmp%E7%AE%97%E6%B3%95/10951804">https://baike.baidu.com/item/kmp算法/10951804</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>刘任任主编,算法设计与分析,武汉理工大学出版社,2003.12,第97页 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#定义&quot;&gt;&lt;/a&gt; 定义&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;KMP算法&lt;/strong&gt;是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因</summary>
      
    
    
    
    <category term="算法" scheme="https://zoruasama.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://zoruasama.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="https://zoruasama.gitee.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="KMP算法" scheme="https://zoruasama.gitee.io/tags/KMP%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Works | 如果穿越到异世界，你的身份是 _____</title>
    <link href="https://zoruasama.gitee.io/2021/11/24/CrossSpace/"/>
    <id>https://zoruasama.gitee.io/2021/11/24/CrossSpace/</id>
    <published>2021-11-24T11:30:00.000Z</published>
    <updated>2022-02-17T05:04:16.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景故事"><a class="markdownIt-Anchor" href="#背景故事"></a> 背景故事</h1><p>早上偶然看到QQ空间在刷一个<strong>你的名字的意义</strong>的小程序。和室友们一边看一边笑。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211124122725.png" alt="" /><br />我是一个无聊的人。<br />于是我<s>花了上午约莫一个小时的时间，下午约莫三个多小时的时间</s>完成了这个小程序的开发。<s>原理是基于姓名编码作了哈希散列。</s><br /><strong>“如果穿越到异世界，你的身份是 _____！！！”</strong></p><style type="text/css">            @import url(https://fonts.googleapis.com/css?family=Open+Sans:400,600,700);[type=button]:not(:disabled), [type=reset]:not(:disabled), [type=submit]:not(:disabled), button:not(:disabled) {    cursor: pointer;}.btn-outline-dark {    color: #343a40;    border-color: #343a40;}.btn {    display: inline-block;    color: #212529;    text-align: center;    vertical-align: middle;    cursor: pointer;    user-select: none;    background-color: transparent;    border: 1px solid transparent;    padding: .375rem .75rem;    line-height: 1.5;    border-radius: .25rem;    transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;}[type=button], [type=reset], [type=submit], button {    -webkit-appearance: button;}.btn-outline-dark {    color: #343a40;    border-color: #343a40;}button {    -webkit-appearance: button;    -webkit-writing-mode: horizontal-tb !important;    text-rendering: auto;    color: buttontext;    letter-spacing: normal;    word-spacing: normal;    text-transform: none;    text-indent: 0px;    text-shadow: none;    display: inline-block;    text-align: center;    align-items: flex-start;    cursor: default;    background-color: buttonface;    box-sizing: border-box;    margin: 0em;    font: 400 13.3333px Arial;    padding: 1px 6px;    border-width: 2px;    border-style: outset;    border-color: buttonface;    border-image: initial;}button {    margin: 0;    font-family: inherit;    font-size:28px;    line-height: inherit;}.btn-outline-dark:hover {    color: #fff;    background-color: #343a40;    border-color: #343a40;}.btn-group-sm>.btn, .btn-sm {    padding: .25rem .5rem;    line-height: 1.5;    border-radius: .2rem;}.innerListItems{    list-style-type:none;}input {border: 1px solid #ccc;                                                                width: 100%;padding: 5px 0px;border-radius: 3px;padding-left: 5px;font-size:40px;-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);-webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;-o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s}input:focus {border-color: #66afe9;outline: 0;-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px rgba(102, 175, 233, .6);box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px rgba(102, 175, 233, .6)}#reshead{    font-size: 1.7rem;    position: absolute;    top: 5%;    left: 12%;    line-height: 1.1em;    text-align: left;    color: #FFFFFF;}#res{    font-size: 3em;    position: absolute;    top: 20%;    left: 17%;    line-height: 1.2em;    text-align: right;    color: #FFFFFF;}        </style><hr /><p>如果你也想玩的话，在<strong>这篇文章</strong>就可以玩了喔。往下滑，往下滑~~~<br />欢迎把结果以文字或截图的形式分享到评论区或者邀请你的朋友一起来看看喔。<strong>建议在手机上看</strong>。</p><h1 id="如果穿越到异世界你的身份是-_____"><a class="markdownIt-Anchor" href="#如果穿越到异世界你的身份是-_____"></a> 如果穿越到异世界，你的身份是 _____</h1><p>在下方输入姓名，点击按钮进行穿越！</p><script src="/js/crossspace-min.js"></script><script src="https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js"></script><input type="text" name="fname" id="input"/><button type="button" class="btn btn-outline-dark btn-sm">穿越到异世界！</button><p><br><br></p><div id="box" style="position: relative;"><canvas id="myCanvas"></canvas></div><script>$('button').on('click',function(){        // $('#reshead').html('如果穿越到异世界，<br><u>' + $('#input').val() + '</u>的身份是');        // $('#res').html(crossspace($('#input').val()));        // $('#respic')[0].src=imgurl($('#input').val());//<div id="reshead"></div>//<div id="res"></div>//<img id="respic" src="">var canvas=document.getElementById('myCanvas');var ctx=canvas.getContext('2d');var myImage = new Image();myImage.src = imgurl($('#input').val());myImage.crossOrigin = 'Anonymous';myImage.onload=function(){     canvas.width = 720;     canvas.height = 1280;     ctx.drawImage(myImage , 0, 0 , canvas.width , canvas.height,0,0,canvas.width , canvas.height);     ctx.font = '60px SimHei';     ctx.textAlign = 'left';     ctx.textBaseline = 'top';     var left = 100;     var top = 100;     ctx.fillStyle = '#fff';     ctx.fillText('如果穿越到异世界，', left, top);     ctx.fillText($('#input').val() + '的身份是', left, top+65);     ctx.textAlign = 'right';     ctx.font = '75px SimHei';     txtarr = crossspace($('#input').val()).split('的');     ctx.fillText(txtarr[0]+'的', 660, top+65*3);     ctx.font = '90px SimHei';     ctx.fillText(txtarr[1]+'的', 660, top+65*3+90);     ctx.font = '120px SimHei';     ctx.fillText(txtarr[2], 660, top+65*3+90*2);}})</script><h1 id="打赏"><a class="markdownIt-Anchor" href="#打赏"></a> 打赏</h1><p>如果您对这个小程序满意的话，您可以通过下面两种方式给予任意金额的打赏鼓励嗷~~。非常感谢您请我的一杯咖啡~。<br />感谢少侠打赏，来杯咖啡提提神，大战到天亮。</p><h1 id="更新日志"><a class="markdownIt-Anchor" href="#更新日志"></a> 更新日志</h1><ul><li>2021.11.25 重写了<code>特殊能力</code>的生成算法。</li></ul><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211026152954.png" alt="" /></p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景故事&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#背景故事&quot;&gt;&lt;/a&gt; 背景故事&lt;/h1&gt;
&lt;p&gt;早上偶然看到QQ空间在刷一个&lt;strong&gt;你的名字的意义&lt;/strong&gt;的小程序。和室友们一边看一边笑。&lt;br /&gt;
&lt;img </summary>
      
    
    
    
    <category term="Works" scheme="https://zoruasama.gitee.io/categories/Works/"/>
    
    
    <category term="Works" scheme="https://zoruasama.gitee.io/tags/Works/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记 | 树状数组</title>
    <link href="https://zoruasama.gitee.io/2021/11/23/algorithm_3/"/>
    <id>https://zoruasama.gitee.io/2021/11/23/algorithm_3/</id>
    <published>2021-11-23T11:05:00.000Z</published>
    <updated>2021-12-24T16:28:52.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h1><p>树状数组是一个查询和修改复杂度都为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\log{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span>的数据结构。主要用于数组的<strong>单点修改</strong>和<strong>区间求和</strong>。广义上来说，能够动态维护<strong>前缀和</strong>。基本上树状数组能做的事情，线段树都能做，反之就不一定了。所以线段树更加强大。但是<s>线段树代码太难写了</s>。</p><h2 id="和线段树的区别"><a class="markdownIt-Anchor" href="#和线段树的区别"></a> 和线段树的区别</h2><ol><li>两者在复杂度上同级, 但是树状数组的常数明显优于线段树, 其编程复杂度也远小于线段树。</li><li>树状数组的作用被线段树完全涵盖, 凡是可以使用树状数组解决的问题, 使用线段树一定可以解决, 但是线段树能够解决的问题树状数组未必能够解决。</li><li>树状数组的突出特点是其编程的极端简洁性, 使用<code>lowbit</code>技术可以在很短的几步操作中完成树状数组的核心操作，其代码效率远高于线段树。</li></ol><p>上面出现了一个新名词: <code>lowbit</code>.其实<code>lowbit(x)</code>就是求x最低位的1。</p><h2 id="具体做法"><a class="markdownIt-Anchor" href="#具体做法"></a> 具体做法</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211123200518.png" alt="" /><br />其实树状数组是用一个连续的数组来存储树的结构，<code>t[x]</code>保存以<code>x</code>为根的子树中叶节点值的和。上图中的<code>a[n]</code>是原数组。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211123200656.png" alt="" /><br />而且每一个节点覆盖的长度就是<code>lowbit(x)</code>。<br /><code>t[x]</code>节点的父节点为<code>t[x+lowbit(x)]</code>。<br />而且整棵树的深度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\log{n}+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。</p><h3 id="lowbit"><a class="markdownIt-Anchor" href="#lowbit"></a> lowbit</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="单点修改"><a class="markdownIt-Anchor" href="#单点修改"></a> 单点修改</h3><p>以<code>add(x,k)</code>操作为例。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        t[i]+=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间求和"><a class="markdownIt-Anchor" href="#区间求和"></a> 区间求和</h3><p>以<code>ask(x)</code>操作为例。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&gt;<span class="number">0</span>;i-=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">        res+=t[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[x,y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span>的和时，可以使用前缀和<code>ask(y)-ask(x-1)</code>来求出它。</p><hr /><p>下面的这些扩展函数<code>add</code> <code>ask</code>函数内部操作还是一样的。就是外部有差别。</p><h2 id="区间修改-单点查询"><a class="markdownIt-Anchor" href="#区间修改-单点查询"></a> 区间修改、单点查询</h2><p>引入差分数组<code>b[n]</code>，作为原数组<code>a[n]</code>的增量数组（不用对这个树状数组预处理）。用树状数组来维护这个数组。<br />而后区间修改的操作和差分数组一样，使用<code>add(l,d)</code>和<code>add(r+1,-d)</code>来完成。<br />查询原数组<code>a[x]</code>的值时，因为差分数组的前缀和等于原数组，所以可以用<code>a[x]+ask(x)</code>来完成。（有了<code>a[x]</code>不用对树状数组预处理了）<br />这个地方的操作和差分数组是一样的。只是单点查询时，复杂度会低一些。</p><h2 id="区间修改-区间查询"><a class="markdownIt-Anchor" href="#区间修改-区间查询"></a> 区间修改、区间查询</h2><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><msub><mi>m</mi><mi>x</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><msub><mi>a</mi><mi>x</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></msubsup><msub><mi>d</mi><mi>i</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">sum_x=\sum_{i=1}^{x}a_x=\sum_{i=1}^{x}\sum_{j=1}^{i}d_i=\sum_{i=1}^{x}(x-i+1)\times d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.400382em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br />由之前的<strong>差分数组</strong>帖子可知上式。如果要进行<strong>区间修改</strong>，维护差分数组<code>b[x]</code>就可以了，但是这样只能更新到单点<code>a[x]</code>，再想<strong>区间查询</strong>，最好对a[x]再做一个前缀和。显然这里会用到两个树状数组。但是去求区间查询很麻烦，可以用下面这个式子转换着去求。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211123202657.png" alt="" /><br />设树状数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">t_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>维护<code>b[i]</code>前缀和，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">t_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>维护<code>i*b[i]</code>前缀和。<br />这里的<code>b[i]</code>依旧是<strong>增量数组</strong>。</p><p>那么区间修改<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>加上<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">add1</span>(l,d)</span><br><span class="line"><span class="built_in">add1</span>(r+<span class="number">1</span>,-d)</span><br><span class="line"><span class="comment">//维护数组b[i]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">add2</span>(l,l*d)</span><br><span class="line"><span class="built_in">add2</span>(r+<span class="number">1</span>,-(r+<span class="number">1</span>)*d)</span><br><span class="line"><span class="comment">//维护数组i*b[i]</span></span><br></pre></td></tr></table></figure><p>区间查询<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>的和：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ans=sum[r]-sum[l<span class="number">-1</span>]+((r+<span class="number">1</span>)*<span class="built_in">ask1</span>(r)-<span class="built_in">ask2</span>(r))-(l*<span class="built_in">ask1</span>(l<span class="number">-1</span>)-<span class="built_in">ask2</span>(l<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// (x+1)sum(b,x) = (x+1)ask1(x)</span></span><br><span class="line"><span class="comment">// sum(i*b,x) = ask2(x)</span></span><br></pre></td></tr></table></figure><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><p>对于一个数组，可以用树状数组前缀区间维护<strong>和、异或和、最大值、最小值</strong>等等。</p><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><p>[1] <a href="https://blog.csdn.net/bestsort/article/details/80796531">https://blog.csdn.net/bestsort/article/details/80796531</a><br />[2] <a href="https://blog.csdn.net/qq_41021816/article/details/81167388">https://blog.csdn.net/qq_41021816/article/details/81167388</a><br />[3] <a href="https://www.bilibili.com/video/BV1pE41197Qj">https://www.bilibili.com/video/BV1pE41197Qj</a></p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#定义&quot;&gt;&lt;/a&gt; 定义&lt;/h1&gt;
&lt;p&gt;树状数组是一个查询和修改复杂度都为&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;s</summary>
      
    
    
    
    <category term="算法" scheme="https://zoruasama.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://zoruasama.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="树状数组" scheme="https://zoruasama.gitee.io/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记 | 快速幂</title>
    <link href="https://zoruasama.gitee.io/2021/11/17/algorithm_2/"/>
    <id>https://zoruasama.gitee.io/2021/11/17/algorithm_2/</id>
    <published>2021-11-17T11:05:00.000Z</published>
    <updated>2021-11-17T11:03:37.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h1><p><strong>快速幂</strong>（<strong>Exponentiation by squaring</strong>，平方求幂）是一种简单而有效的小算法，它可以以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的时间复杂度计算乘方。快速幂不仅本身非常常见，而且后续很多算法也都会用到快速幂。</p><h2 id="背景问题"><a class="markdownIt-Anchor" href="#背景问题"></a> 背景问题</h2><p>例如计算一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>7</mn><mn>10</mn></msup></mrow><annotation encoding="application/x-tex">7^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">7</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>，有以下几种方法。</p><ul><li>最朴素的想法，7*7=49，49*7=343，… 一步一步算，共进行了<strong>9次</strong>乘法。<ul><li>这样算无疑太慢了，尤其对计算机的CPU而言，每次运算只乘上一个个位数，无疑太屈才了。这时我们想到，也许可以拆分问题。</li></ul></li><li>先算7的5次方，即7*7*7*7*7，再算它的平方，共进行了<strong>5次</strong>乘法。<ul><li>但这并不是最优解，因为对于“7的5次方”，我们仍然可以拆分问题。</li></ul></li><li>先算7*7得49，则7的5次方为49*49*7，再算它的平方，共进行了<strong>4次</strong>乘法。</li></ul><p>模仿这样的过程，我们得到一个在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 时间内计算出幂的算法，也就是快速幂。</p><h1 id="具体实现"><a class="markdownIt-Anchor" href="#具体实现"></a> 具体实现</h1><h2 id="递归快速幂"><a class="markdownIt-Anchor" href="#递归快速幂"></a> 递归快速幂</h2><p>用上面的背景问题可以得到下面这个递归公式：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>×</mo><mi>a</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mtext> </mtext><mi>i</mi><mi>s</mi><mtext> </mtext><mi>o</mi><mi>d</mi><mi>d</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>a</mi><mfrac><mi>n</mi><mn>2</mn></mfrac></msup><mo>×</mo><msup><mi>a</mi><mfrac><mi>n</mi><mn>2</mn></mfrac></msup><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mtext> </mtext><mi>i</mi><mi>s</mi><mtext> </mtext><mi>e</mi><mi>v</mi><mi>e</mi><mi>n</mi><mtext> </mtext><mi>b</mi><mi>u</mi><mi>t</mi><mtext> </mtext><mi>n</mi><mi>o</mi><mi>t</mi><mtext> </mtext><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">a^n = \begin{cases}a^{n-1}\times a, &amp; n\  is\  odd \\a^{\frac{n}{2}}\times a^{\frac{n}{2}}, &amp; n\  is\  even \  but \  not \  0 \\1,&amp;n=0\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.84708em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.84708em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mspace"> </span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mspace"> </span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mord mathdefault">b</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mspace"> </span><span class="mord">0</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>依据这个递归公式，可以写出递归版本的快速幂。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qpow</span>(a,n<span class="number">-1</span>)*a; <span class="comment">//n是奇数</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=<span class="built_in">qpow</span>(a,n/<span class="number">2</span>); <span class="comment">//n是偶数</span></span><br><span class="line">        <span class="keyword">return</span> temp*temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中有一个temp变量，暂存<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mfrac><mi>n</mi><mn>2</mn></mfrac></msup></mrow><annotation encoding="application/x-tex">a^{\frac{n}{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84708em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.84708em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span>的值，这样就能避免计算两次。</p><h2 id="非递归快速幂"><a class="markdownIt-Anchor" href="#非递归快速幂"></a> 非递归快速幂</h2><p>虽然递归版本很容易写，但是会产生额外的空间开销。因此可以把递归版本的改写为循环版本的。<br />将<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>7</mn><mn>10</mn></msup></mrow><annotation encoding="application/x-tex">7^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">7</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>转化为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>×</mo><msup><mn>7</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">y^2 \times 7^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">7</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span>。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211117172806.jpg" alt="" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;       <span class="comment">//如果n的当前末位为1</span></span><br><span class="line">            ans *= a;  <span class="comment">//ans乘上当前的a</span></span><br><span class="line">        &#125;</span><br><span class="line">        a *= a;        <span class="comment">//a自乘</span></span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;       <span class="comment">//n往右移一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果加上取模过程：<br />有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>∗</mo><mi>b</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>c</mi><mo>=</mo><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>a</mi><mi mathvariant="normal">%</mi><mi>c</mi><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>b</mi><mi mathvariant="normal">%</mi><mi>c</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>c</mi></mrow><annotation encoding="application/x-tex">(a*b)\%c = ((a\%c)*(b\%c))\%c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord">%</span><span class="mord mathdefault">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mord">%</span><span class="mord mathdefault">c</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">c</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;       <span class="comment">//如果n的当前末位为1</span></span><br><span class="line">            ans *= a;  <span class="comment">//ans乘上当前的a</span></span><br><span class="line">            ans %= mod;</span><br><span class="line">        &#125;</span><br><span class="line">        a *= a%mod;        <span class="comment">//a自乘</span></span><br><span class="line">        a %= mod;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;       <span class="comment">//n往右移一位</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>感觉有点类似计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">2*10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>时转换为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mn>8</mn><mo>+</mo><mn>2</mn><mo>∗</mo><mn>2</mn><mo>=</mo><mo>=</mo><mo stretchy="false">(</mo><mn>2</mn><mo>&lt;</mo><mo>&lt;</mo><mn>3</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>2</mn><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2*8+2*2==(2&lt;&lt;3)+(2&lt;&lt;1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>10</mn><mi>D</mi><mo>=</mo><mo>=</mo><mn>1010</mn><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(10D==1010B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">0</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span></p></blockquote><h1 id="矩阵快速幂"><a class="markdownIt-Anchor" href="#矩阵快速幂"></a> 矩阵快速幂</h1><p>其实，在算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">a^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span> 时，只要a的数据类型支持<strong>乘法</strong>且<strong>满足结合律</strong>，快速幂的算法都是有效的。矩阵、高精度整数，都可以照搬这个思路。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//泛型的非递归快速幂</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">qpow</span><span class="params">(T a, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T ans = <span class="number">1</span>; <span class="comment">// 赋值为乘法单位元，可能要根据构造函数修改</span></span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            ans = ans * a; <span class="comment">// 这里就最好别用自乘了，不然重载完*还要重载*=，有点麻烦。</span></span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = a * a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>矩阵快速幂的一个经典应用是求斐波那契数列：<a href="https://www.luogu.com.cn/problem/P1962">P1962 斐波那契数列</a><br />设矩阵</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">A=\begin{bmatrix}0&amp;1\\1&amp;1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>我们有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mi>n</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>F</mi><mi>n</mi></msub><mo>+</mo><msub><mi>F</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">A\begin{bmatrix}F_n\\F_{n+1}\end{bmatrix}=\begin{bmatrix}F_{n+1}\\F_n+F_{n+1}\end{bmatrix}=\begin{bmatrix}F_{n+1}\\F_{n+2}\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>于是 :</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mi>n</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mi>A</mi><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><msup><mi>A</mi><mn>2</mn></msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mo>⋯</mo><mo>=</mo><msup><mi>A</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>F</mi><mn>2</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><msup><mi>A</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}F_n\\F_{n+1}\end{bmatrix}=A\begin{bmatrix}F_{n-1}\\F_{n}\end{bmatrix}=A^2\begin{bmatrix}F_{n-2}\\F_{n-1}\end{bmatrix}=\cdots=A^{n-1}\begin{bmatrix}F_1\\F_{2}\end{bmatrix}=A^{n-1}\begin{bmatrix}1\\1\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>这样，我们把原来较为复杂的问题转化成了<strong>求某个矩阵的幂</strong>的问题，这就可以应用快速幂求解了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll a1, a2, b1, b2;</span><br><span class="line">    <span class="built_in">matrix</span>(ll a1, ll a2, ll b1, ll b2) : <span class="built_in">a1</span>(a1), <span class="built_in">a2</span>(a2), <span class="built_in">b1</span>(b1), <span class="built_in">b2</span>(b2) &#123;&#125;</span><br><span class="line">    matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> matrix &amp;y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">matrix <span class="title">ans</span><span class="params">((a1 * y.a1 + a2 * y.b1) % MOD,</span></span></span><br><span class="line"><span class="params"><span class="function">                   (a1 * y.a2 + a2 * y.b2) % MOD,</span></span></span><br><span class="line"><span class="params"><span class="function">                   (b1 * y.a1 + b2 * y.b1) % MOD,</span></span></span><br><span class="line"><span class="params"><span class="function">                   (b1 * y.a2 + b2 * y.b2) % MOD)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">qpow</span><span class="params">(matrix a, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">matrix <span class="title">ans</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span></span>; <span class="comment">//单位矩阵</span></span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            ans = ans * a;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x;</span><br><span class="line">    <span class="function">matrix <span class="title">M</span><span class="params">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;x);</span><br><span class="line">    matrix ans = <span class="built_in">qpow</span>(M, x - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans.a1 % MOD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><p>[1] <a href="https://zhuanlan.zhihu.com/p/95902286">https://zhuanlan.zhihu.com/p/95902286</a><br />[2] <a href="https://blog.csdn.net/qq_40061421/article/details/82625338">https://blog.csdn.net/qq_40061421/article/details/82625338</a></p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#定义&quot;&gt;&lt;/a&gt; 定义&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;快速幂&lt;/strong&gt;（&lt;strong&gt;Exponentiation by squaring&lt;/strong&gt;，平方求幂）是一</summary>
      
    
    
    
    <category term="算法" scheme="https://zoruasama.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://zoruasama.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="快速幂" scheme="https://zoruasama.gitee.io/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记 | 差分数组</title>
    <link href="https://zoruasama.gitee.io/2021/11/14/algorithm_1/"/>
    <id>https://zoruasama.gitee.io/2021/11/14/algorithm_1/</id>
    <published>2021-11-14T11:05:00.000Z</published>
    <updated>2021-11-14T10:21:12.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h1><p>对于一个数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>，如果对它有着频繁的区间操作（例如第5个到第60个数增加2，或第6个到第40个数减去2）。这个时候，暴力的做法时，直接用循环去操作，但是这样做的时间复杂度很大。所以对于这样的问题，可以使用<strong>差分数组</strong>。</p><h1 id="具体做法"><a class="markdownIt-Anchor" href="#具体做法"></a> 具体做法</h1><p><code>差分</code>其实就是数据之间的差，什么数据的差呢？就是上面所给的原始数组<code>a[n]</code>的相邻元素之间的差值，我们令<code>d[i]=a[i+1]-a[i]</code>，一遍for循环即可将差分数组求出来。例如下面这个数组。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211114164848.PNG" alt="" /><br />据此，可以发现两条差分数组的性质：</p><ul><li><code>a[i]</code>等于<code>d[i]</code>的前缀和</li><li><code>a[i]</code>的前缀和可以通过如下公式来求得：<ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><msub><mi>m</mi><mi>x</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><msub><mi>a</mi><mi>x</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>i</mi></msubsup><msub><mi>d</mi><mi>i</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>x</mi></msubsup><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">sum_x=\sum_{i=1}^{x}a_x=\sum_{i=1}^{x}\sum_{j=1}^{i}d_i=\sum_{i=1}^{x}(x-i+1)\times d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.400382em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul></li></ul><h1 id="用途"><a class="markdownIt-Anchor" href="#用途"></a> 用途</h1><p>差分数组主要支持两种操作：<strong>1、区间修改；2、单点查询</strong><br />根据性质一，可以得到若对某个区间<code>[L, R]</code> 增加一个数 <code>x</code>，只需要使 <code>d[L] += x; d[R + 1] -= x;</code> 即可实现对区间的批量修改，而查询时只需要<strong>求前缀和查询单个元素</strong>，或者通过上述性质二的公式查询<strong>前缀和/区间和</strong>即可</p><h2 id="区间修改"><a class="markdownIt-Anchor" href="#区间修改"></a> 区间修改</h2><p>对上面那个表的数组作下面两个操作：</p><ul><li>将区间 [1,4] 的数值全部加上3</li><li>将区间 [3,5] 的数值全部减去5<br />其实<strong>当你将原始数组中元素同时加上或者减掉某个数，那么他们的差分数组其实是不会变化的。</strong><br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211114170247.PNG" alt="" /><br />只有 d[1]和d[5]发生了变化，而d[2],d[3],d[4]却保持着原样。</li></ul><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211114170311.PNG" alt="" /></p><blockquote><p>当对一个区间进行增减某个值的时候，它的差分数组对应的区间左端点的值会同步变化，而它的右端点的后一个值则会相反地变化，其实这个很好理解</p></blockquote><h2 id="更新原数组"><a class="markdownIt-Anchor" href="#更新原数组"></a> 更新原数组</h2><p>因为我们的差分数组是由原始数组的相邻两项作差求出来的，即 d[i]=a[i]-a[i-1]；那么我们能不能反过来，求得一下修改过后的a[i]呢？</p><p><strong>直接反过来即得  a[i]=a[i-1]+d[i]</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    a[i]=a[i<span class="number">-1</span>]+d[i];</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><p>[1] <a href="https://blog.csdn.net/qq_31601743/article/details/105352885">https://blog.csdn.net/qq_31601743/article/details/105352885</a><br />[2] <a href="https://blog.csdn.net/qq_44786250/article/details/100056975">https://blog.csdn.net/qq_44786250/article/details/100056975</a><br />[3] <a href="https://www.jianshu.com/p/2a4e861b44ae">https://www.jianshu.com/p/2a4e861b44ae</a><br />[4] <a href="https://www.cnblogs.com/COLIN-LIGHTNING/p/8436624.html">https://www.cnblogs.com/COLIN-LIGHTNING/p/8436624.html</a></p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#定义&quot;&gt;&lt;/a&gt; 定义&lt;/h1&gt;
&lt;p&gt;对于一个数组&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;m</summary>
      
    
    
    
    <category term="算法" scheme="https://zoruasama.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://zoruasama.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="差分数组" scheme="https://zoruasama.gitee.io/tags/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>算法笔记 | 前缀和</title>
    <link href="https://zoruasama.gitee.io/2021/11/11/algorithm_0/"/>
    <id>https://zoruasama.gitee.io/2021/11/11/algorithm_0/</id>
    <published>2021-11-11T11:05:00.000Z</published>
    <updated>2021-11-11T11:15:04.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h1><p>给定某个数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>，给定区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[l,r]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span></span></span></span>，计算这个数组，从下标<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>的加和。如果直接加和，需要作<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mi>l</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(r-l+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>次加法。如果有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>次询问，复杂度就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>。引入<strong>前缀和数组</strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>，可以将复杂度降到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m+n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p><h1 id="具体做法"><a class="markdownIt-Anchor" href="#具体做法"></a> 具体做法</h1><h2 id="预处理"><a class="markdownIt-Anchor" href="#预处理"></a> 预处理</h2><p>定义一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>数组，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>数组中前<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>项之和。</p><blockquote><p>就和数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{a_n\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span>的前<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>项和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">S_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>一样。</p></blockquote><p>先用一次<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">for</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>循环，对<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span>进行预处理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">  s[i]=s[i<span class="number">-1</span>]+a[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此过程复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p><h2 id="查询"><a class="markdownIt-Anchor" href="#查询"></a> 查询</h2><p>对于每次查询，只需执行<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo>−</mo><mi>s</mi><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[r]-s[l-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p><blockquote><p><strong>原理</strong><br />s[r] =a[1]+a[2]+a[3]+a[l-1]+a[l]+a[l+1]…a[r];<br />s[l-1]=a[1]+a[2]+a[3]+a[l-1];<br />s[r]-s[l-1]=a[l]+a[l+1]+…+a[r];</p></blockquote><p>此过程复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>。</p><h1 id="二维前缀和"><a class="markdownIt-Anchor" href="#二维前缀和"></a> 二维前缀和</h1><p>输入一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">n\times m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>的整数矩阵，再输入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>个询问，每个询问包含四个整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mn>1</mn><mo separator="true">,</mo><mi>x</mi><mn>2</mn><mo separator="true">,</mo><mi>y</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">x1, y1, x2, y2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">2</span></span></span></span>，表示一个子矩阵的左上角坐标和右下角坐标。对于每个询问输出子矩阵中所有数的和。</p><p>同一维前缀和一样，先定义一个二维数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[n][m]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mclose">]</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">s[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>，表示二维数组中，左上角<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>到右下角<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">( i,j )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span>所包围的矩阵元素的和。<br />接下来推导二维前缀和的公式。</p><h2 id="预处理-2"><a class="markdownIt-Anchor" href="#预处理-2"></a> 预处理</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211111165631.png" alt="" /></p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211111165825.png" alt="" /><br />注：最后一项是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>，和一维前缀和一样。<br />由上图可知，二维前缀和的预处理公式为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s[i][j] = s[i<span class="number">-1</span>][j] + s[i][j<span class="number">-1</span>] + a[i][j] - s[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br></pre></td></tr></table></figure><hr /><p>也可以一维、一维来求进行预处理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        a[i][j] += a[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        a[i][j] += a[i][j - <span class="number">1</span>];</span><br></pre></td></tr></table></figure><h2 id="查询-2"><a class="markdownIt-Anchor" href="#查询-2"></a> 查询</h2><p>接下来如何去求以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x1,y1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>为左上角和以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mn>2</mn><mo separator="true">,</mo><mi>y</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x2,y2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">2</span><span class="mclose">)</span></span></span></span>为右下角的矩阵的元素的和呢？<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211111170341.png" alt="" /><br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211111170439.png" alt="" /><br />即<code>s[x2][y2]-s[x1-1][y2]-s[x2][y1-1] + s[x1-1][y1-1]</code></p><h1 id="高维前缀和"><a class="markdownIt-Anchor" href="#高维前缀和"></a> 高维前缀和</h1><p>暂时还看不懂这玩意儿……。先mark一下。<br /><a href="https://www.cnblogs.com/heyuhhh/p/11585358.html">https://www.cnblogs.com/heyuhhh/p/11585358.html</a></p><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1><p>[1] <a href="https://blog.csdn.net/weixin_45629285/article/details/111146240">https://blog.csdn.net/weixin_45629285/article/details/111146240</a></p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#定义&quot;&gt;&lt;/a&gt; 定义&lt;/h1&gt;
&lt;p&gt;给定某个数组 &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;</summary>
      
    
    
    
    <category term="算法" scheme="https://zoruasama.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://zoruasama.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="前缀和" scheme="https://zoruasama.gitee.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>Works | 标签夹 Tab Clamp</title>
    <link href="https://zoruasama.gitee.io/2021/10/26/TabClamp/"/>
    <id>https://zoruasama.gitee.io/2021/10/26/TabClamp/</id>
    <published>2021-10-26T11:30:00.000Z</published>
    <updated>2022-02-17T05:04:00.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标签夹-tabclamp-是什么"><a class="markdownIt-Anchor" href="#标签夹-tabclamp-是什么"></a> 标签夹 TabClamp 是什么</h1><p>试想您是否有这样的一个需求？</p><blockquote><p>有时候进行某项工作/学习时打开了若干个网页，但是后来中断去做别的事情了，在下一次进行这项工作/学习时又要回到历史记录里一个个点开。这样非常麻烦。</p></blockquote><p>「标签夹 TabClamp」就是为了解决这样的需求而被开发的。它是一款用于<strong>任一基于Chromium开源项目webkit内核的浏览器</strong>插件，这款插件可以帮助您一次性打开多个网页，以方便您随时恢复之前的工作环境。</p><p>如果您不知道您的浏览器是否是<strong>基于Chromium开源项目webkit内核</strong>的，您可以参考下面这个列表：</p><ul><li>Google Chrome</li><li>Microsoft Edge</li><li>360安全浏览器</li><li>360极速浏览器</li><li>搜狗高速浏览器</li><li>QQ浏览器</li><li>猎豹安全浏览器</li><li>傲游浏览器</li><li>……</li></ul><h1 id="安装教程"><a class="markdownIt-Anchor" href="#安装教程"></a> 安装教程</h1><p>由于上架应用商店需要审核且比较麻烦。现在只上架了 <strong>360安全浏览器</strong> 和 <strong>360极速浏览器</strong>。<br />如您需要在其他webkit浏览器上使用，欢迎致信 <a href="mailto:zoruasama@qq.com">zoruasama@qq.com</a>。</p><h2 id="360安全浏览器"><a class="markdownIt-Anchor" href="#360安全浏览器"></a> 360安全浏览器</h2><p>使用360安全浏览器的用户可以<a href="https://ext.se.360.cn/webstore/search/%E6%A0%87%E7%AD%BE%E5%A4%B9">点击这里</a>进行下载安装。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211125122939.png" alt="" /></p><h2 id="360极速浏览器"><a class="markdownIt-Anchor" href="#360极速浏览器"></a> 360极速浏览器</h2><p>使用360极速浏览器的用户可以<a href="https://ext.chrome.360.cn/webstore/search/%E6%A0%87%E7%AD%BE%E5%A4%B9">点击这里</a>进行下载安装。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211125123051.png" alt="" /></p><h1 id="使用说明"><a class="markdownIt-Anchor" href="#使用说明"></a> 使用说明</h1><h2 id="名词术语解释"><a class="markdownIt-Anchor" href="#名词术语解释"></a> 名词术语解释</h2><ul><li><strong>标签 Tabs</strong>，准确称法是“标签页”，也称作“选项卡”，简称为“标签”。通常标签页栏所处的是浏览器窗体的上方，您可以通过点击标签来切换当前要浏览的网页。</li><li><strong>窗体 Windows</strong>，您运行浏览器时打开的整个浏览器程序界面被称作窗体，您可以打开多个窗体，也可以在每个窗体上打开多个标签。</li><li><strong>标签夹 Tab Clamp</strong>，即本插件的名称，亦是本插件中引入的概念。顾名思义地，标签夹是将复数数量的标签打包在一起后的物体。</li></ul><h2 id="界面功能解释"><a class="markdownIt-Anchor" href="#界面功能解释"></a> 界面功能解释</h2><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211026142613.png" alt="" /></p><h3 id="保存当前所有标签页到标签夹"><a class="markdownIt-Anchor" href="#保存当前所有标签页到标签夹"></a> 保存当前所有标签页到标签夹</h3><ol><li>输入标签夹名字，注意不要和已有的标签夹名字重复，否则会直接覆盖内容。虽然没有对标签夹名字长度进行限制，但是仍然不建议使用过长的标签夹名字。</li><li>点击“保存当前所有标签页到标签夹”按钮，将会保存<strong>当前浏览器上打开的所有标签</strong>到指定标签夹中。由于后续的“打开”功能是一次性全部打开并加载网页，出于对您的机器性能负担考虑，一个标签夹内最好不要放过多的标签。</li></ol><h3 id="打开该标签夹内所有的标签"><a class="markdownIt-Anchor" href="#打开该标签夹内所有的标签"></a> 打开该标签夹内所有的标签</h3><ol><li>输入标签夹名字，注意应该输入已有的标签夹。</li><li>点击“打开该标签夹内所有的标签”按钮，将会在<strong>当前浏览器窗口上</strong>打开该标签夹内的所有网页。</li></ol><h3 id="删除该标签夹"><a class="markdownIt-Anchor" href="#删除该标签夹"></a> 删除该标签夹</h3><ol><li>输入标签夹名字，注意应该输入已有的标签夹。</li><li>点击“删除该标签夹”按钮，将会<strong>永久删除</strong>该标签夹和该标签夹下所有的标签。</li></ol><h3 id="点击标签夹"><a class="markdownIt-Anchor" href="#点击标签夹"></a> 点击标签夹</h3><ol><li>当您已经拥有标签夹时，界面上将会显示其按钮。按钮文本为标签夹名字，括号内部数字表示标签夹内的标签数量。</li><li>单击这些标签夹按钮，将会在下方显示该标签夹内的标签，您可以点击这些标签，就能打开指定的单个标签页。</li><li>单击标签夹按钮后，标签夹名字会自动输入到输入框中，而不需要自己手动输入，方便您的后续操作（例如保存、打开、删除）。</li></ol><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211026144533.png" alt="" /></p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211026144549.png" alt="" /></p><h1 id="环境要求"><a class="markdownIt-Anchor" href="#环境要求"></a> 环境要求</h1><p>本插件使用了localStorage特性作为存储，</p><h1 id="版本更新日志"><a class="markdownIt-Anchor" href="#版本更新日志"></a> 版本更新日志</h1><h2 id="10020211026"><a class="markdownIt-Anchor" href="#10020211026"></a> 1.0.0(2021/10/26)</h2><ul><li>产品上线</li></ul><h1 id="打赏"><a class="markdownIt-Anchor" href="#打赏"></a> 打赏</h1><p>如果您对这个小插件满意的话，您可以通过下面两种方式给予任意金额的打赏鼓励嗷~~。非常感谢您请我的一杯咖啡~。<br />感谢少侠打赏，来杯咖啡提提神，大战到天亮。</p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211026152954.png" alt="" /></p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;标签夹-tabclamp-是什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#标签夹-tabclamp-是什么&quot;&gt;&lt;/a&gt; 标签夹 TabClamp 是什么&lt;/h1&gt;
&lt;p&gt;试想您是否有这样的一个需求？&lt;/p&gt;
&lt;blockquote</summary>
      
    
    
    
    <category term="Works" scheme="https://zoruasama.gitee.io/categories/Works/"/>
    
    
    <category term="Works" scheme="https://zoruasama.gitee.io/tags/Works/"/>
    
    <category term="效率" scheme="https://zoruasama.gitee.io/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="浏览器" scheme="https://zoruasama.gitee.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>书读 | 初读东野圭吾《白夜行》</title>
    <link href="https://zoruasama.gitee.io/2021/06/14/reading_0/"/>
    <id>https://zoruasama.gitee.io/2021/06/14/reading_0/</id>
    <published>2021-06-14T12:19:00.000Z</published>
    <updated>2021-10-26T08:47:47.164Z</updated>
    
    <content type="html"><![CDATA[<div class="snote bug"><p>本文可能含一定程度的剧透，提前浏览可能会影响阅读体验。</p></div><p>熟悉东野圭吾的朋友必定知道作为其代表作之一的《白夜行》，一直以来我都很喜爱阅读东野圭吾的作品，但是大学期间好像很容易浮躁，很难沉下心去阅读。终于在百无聊赖（忙里偷闲）的时候，捧起兼有阅读功能的Kindle牌泡面盖，开始阅读起来。</p><p>在读《白夜行》前，在高中有读过其姊妹篇《幻夜》。到底说是姊妹篇，作者写作风格和角色人设隐隐约约间总有些相似。<br />整篇小说叙事的不同人物视角的分镜手法，黑色系、老到辛辣的语言，含蓄深刻的内容。</p><p>雪穗和美冬很像，亮司也和雅也很像。</p><p>不过阅读《幻夜》的时候到今天已经有两三个年头了，不少故事里的情节我都几乎忘得一干二净，所以应该不会在这篇随笔里提到什么了。</p><p>阅读这本书，总共花了四天时间（2021/06/10~2021/06/13）。读得很快，囫囵吞枣，有一些地方可能说得不对，请书友海涵。此外，故事想表达的内容的确有些晦涩难懂，看完书的我五味杂陈，有很多话想说，但凭我拙劣的语言，恐怕难以说清其中一二。</p><p>先简要介绍书中故事吧，当然毕竟这不是在写小说，我会用全知视角来说明这个故事内容。不想看剧透的，可以直接往下找到另一条剧透分割线。</p><p>首先有两个家庭，桐原亮司和西本雪穗。</p><p>桐原亮司家里是开当铺的，父母似乎都没有尽其教育责任。母亲和当铺店员有染。</p><p>西本雪穗家庭贫苦，父亲早逝，母亲独自抚养其长大，但在当时的历史背景，其生活并不乐观。</p><p>他们打小起，就很要好的样子。会一起去图书馆看书（比如：《飘》）、剪纸（是桐原亮司的强项）。</p><p>似乎是，生活所迫之下，西本雪穗的母亲将西本雪穗卖给了有恋童癖的桐原亮司的父亲。</p><p>桐原亮司偶然之下看到了正在对西本雪穗实施猥亵行为的父亲，在愤怒和绝望之下，11岁的他用剪刀杀死了父亲。</p><p>这个案子由于各种原因，没有被立马查明。作为故事的线索一直延续了20年。</p><p>后来，西本雪穗伪造了其母亲自杀的情形，同样地，这个案子也成了悬案。在生母离世后，她被她的表亲唐泽礼子收养，唐泽礼子教会了她茶道和插花等等非常修身养性的知识，使得旁人眼中的西本雪穗有如一个优雅的名门大小姐。</p><p>接下来的亮司和雪穗，像是两个没有交点的平行线，一个就读大学，一个辍学干着各种勾当。但在背地里，他们在互相帮助。</p><p>例如，雪穗嫉妒另一个长相漂亮的女同学，而且女同学在散播雪穗过去的事情。于是，亮司帮助雪穗制造了该女同学被强暴了的假象，令其一丝不挂地昏在路边，然后雪穗按预先的安排假装发现并救助了她。雪穗对她说，会帮她保守这个秘密的，以此来收买这个女同学的心。</p><p>另一方面，亮司在做盗版游戏、软件时，雪穗通过她的社会关系偷到了不少知名人士的程序传给了亮司。</p><p>雪穗注意到有私家侦探在追查她，亮司帮她杀害了那个侦探。</p><p>这样的犯罪数不胜数。</p><p>亮司帮着雪穗除掉了一个又一个她成功路上的障碍，她如愿以偿地娶到了第一任丈夫，攀上了豪门。利用更高的社会关系，不断地积累财富。</p><p>开了一家奢侈的衣服精品店：R&amp;Y。</p><p>后来又故意与第一任丈夫吵架离婚，加上亮司的暗中协助，攀上第二任名门贵族丈夫。</p><p>R&amp;Y开了一家又一家分店。</p><p>雪穗在旁人的眼里就是年轻有为、长相漂亮端庄、做生意强势果断的女强人形象。</p><p>但是二十年前的刑警一直在追查那个案件，即使那个案件已经快过了时效期。他始终认为这个女人可没有表面上那么简单，眼神中隐藏着难以察觉的险恶和卑劣。</p><p>在R&amp;Y第三家分店的开张仪式上，刑警敏锐地判断亮司一定会出现。</p><p>亮司果然出现了，并且奋力逃避追捕，但终究是无力回天。</p><p>为了自己不被抓捕而暴露雪穗，他选择从楼上跃下然后用那把剪刀自尽。</p><p>刑警问雪穗：你认识这个人吗？</p><p>雪穗说：我不认识。然后头也不回地离开了。</p><p>正义不仅迟到了，而且没有发挥出它的力量。两人犯下这么多的罪行，因为亮司的牺牲式自尽，并没有大白于天下。他们的邪恶仍然在世间嚣张，在精品店的招牌上闪烁。</p><p>雪穗成功地获得了人生的幸福。从灰姑娘变成了大有可为的女青年。</p><p>======== 剧透线 ========<br />看完这本书，我心情沉重又复杂，非常矛盾。</p><p>既觉得亮司和雪穗之间是有爱情的，又觉得雪穗是个无情的女性，对亮司也是像对其他男人利用罢了。</p><p>既替他们的爱情悲剧感到惋惜，又觉得他们犯下了太多罪行活该。</p><p>他们俩之间有爱情吗？好像是没有的，整篇作品里，长大后的雪穗和亮司几乎没在小说里直接见过面，唯一一次见面就是最后一章的生死永隔，而且雪穗望着亮司的尸体，说着不认识便永远回了头。</p><p>他们俩之间有爱情吗？又好像是有的，雪穗累积财富后，开了一家店，名字叫R&amp;Y，是亮司和雪穗两个人名字的缩写。为了能过上幸福的生活，他们相辅相成，如果警方再迟一些，案件有效期就过了，他们俩就能永远走在白天下了。虽然亮司和雪穗有着各自的恋人，但是与他们似乎是有性无爱。</p><p>雪穗说：我的天空里没有太阳，总是黑夜，但并不黑暗，因为有东西代替了太阳。虽然没有太阳那么明亮，但对我来说已经足够。凭借着这份光，我便能把黑夜当成白天。你明白吗？我从来就没有太阳，所以不怕失去。</p><p>她的太阳就是桐原亮司。亮司的愿望是在白天（一起）走路（书的封面是亮司的剪纸作品之一，小男孩和小女孩一起牵着手走路）。</p><p>年仅十一岁的亮司从一出场就走上了一条永远黑暗的不归之路，只能永远期期指望“等到有一天，能够和她手牵手去阳光下散步”；为了这个希望，他一路为恶，直到长大成人，大开杀戒……</p><p>说到底，他们的恶终究或许来源于家庭的不幸。</p><p>东野圭吾太鲨了，在我心里留下了难以抹去的压抑和阴影……</p><p>甚至都有些恐恋了。现实生活中也总会有像这样，容貌出众、透露着聪慧、气质优雅、全身上下散发出温柔的光芒，但藏着不少难以察觉的险恶卑劣的人吧。</p><p>当遇上现实生活中的雪穗，我到底会是自我牺牲也要帮助她的亮司、盲目地被她的表象所吸引的康晴还是察觉到她的险恶的一成呢……？</p><p>那我当然不希望遇上雪穗。</p><p>因为她的背影犹如白色的幽灵。</p><h2 id="想到什么再补充什么吧"><a class="markdownIt-Anchor" href="#想到什么再补充什么吧"></a> 想到什么再补充什么吧。</h2><p>原来这句话出自这里呀。<br />曾经拥有的东西被夺走，并不代表就会回到原来没有那种东西的时候。——东野圭吾《白夜行》<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20211026163516.jpg" alt="" /></p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;snote bug&quot;&gt;&lt;p&gt;本文可能含一定程度的剧透，提前浏览可能会影响阅读体验。&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;熟悉东野圭吾的朋友必定知道作为其代表作之一的《白夜行》，一直以来我都很喜爱阅读东野圭吾的作品，但是大学期间好像很容易浮躁，很难沉下心去阅读。终于在</summary>
      
    
    
    
    <category term="书读" scheme="https://zoruasama.gitee.io/categories/%E4%B9%A6%E8%AF%BB/"/>
    
    
    <category term="书读" scheme="https://zoruasama.gitee.io/tags/%E4%B9%A6%E8%AF%BB/"/>
    
    <category term="读后感" scheme="https://zoruasama.gitee.io/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>题解心得 | P3379 【模板】最近公共祖先（LCA）</title>
    <link href="https://zoruasama.gitee.io/2021/01/21/P3379/"/>
    <id>https://zoruasama.gitee.io/2021/01/21/P3379/</id>
    <published>2021-01-21T11:30:00.000Z</published>
    <updated>2021-01-21T11:38:24.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题面原文"><a class="markdownIt-Anchor" href="#题面原文"></a> 题面原文</h1><p><a href="https://www.luogu.com.cn/problem/P3379">原题链接</a></p><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>如题，给定一棵有根多叉树，请求出指定两个点直接最近的公共祖先。</p><h2 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h2><p>第一行包含三个正整数 N,M，分别表示树的结点个数、询问的个数和树根结点的序号。<br />接下来 N-1 行每行包含两个正整数 x, y，表示 x 结点和 y 结点之间有一条直接连接的边（数据保证可以构成树）。<br />接下来 M行每行包含两个正整数 a, b表示询问 a 结点和 b 结点的最近公共祖先。</p><h2 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h2><p>输出包含 M 行，每行包含一个正整数，依次为每一个询问的结果。</p><h1 id="ac-record"><a class="markdownIt-Anchor" href="#ac-record"></a> Ac Record</h1><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20201205213926.png" alt="" /></p><h1 id="code"><a class="markdownIt-Anchor" href="#code"></a> Code</h1><details cyan open><summary> <p>show me the code.</p> </summary>              <div class='content'>              <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500001</span>;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; node[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn][<span class="number">22</span>]; <span class="comment">//2^20</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">log2</span>(x&amp;(-x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    dep[u]=d;</span><br><span class="line">    f[u][<span class="number">0</span>]=fa;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;node[u].<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node[u][i]==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(node[u][i],u,d+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&lt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="keyword">while</span>(dep[x]&gt;dep[y])&#123;</span><br><span class="line">        x=f[x][<span class="built_in">lowbit</span>(dep[x]-dep[y])];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;<span class="comment">// or return y.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">log2</span>(dep[x]);i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[x][i]!=f[y][i])&#123;</span><br><span class="line">            x=f[x][i];</span><br><span class="line">            y=f[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=(<span class="keyword">char</span>)<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,fs=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)fs=<span class="number">-1</span>;c=(<span class="keyword">char</span>)<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=(<span class="keyword">char</span>)<span class="built_in">getchar</span>(); <span class="comment">//NOLINT</span></span><br><span class="line">    <span class="keyword">return</span> x*fs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>),a=-a;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=<span class="number">10</span>)<span class="built_in">write</span>(a/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(a%<span class="number">10</span>+<span class="number">48</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,s;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        x=<span class="built_in">read</span>();</span><br><span class="line">        y=<span class="built_in">read</span>();</span><br><span class="line">        node[x].<span class="built_in">push_back</span>(y);</span><br><span class="line">        node[y].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(s,s,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">22</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)&#123;</span><br><span class="line">            f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        x=<span class="built_in">read</span>();</span><br><span class="line">        y=<span class="built_in">read</span>();</span><br><span class="line">        cout&lt;&lt;<span class="built_in">lca</span>(x,y)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h1><p>这就是一道LCA模板题。</p><ul><li>简单地用vector存图。</li><li>先用DFS把整个树遍历一遍，标记上每个节点的<strong>深度</strong>。这个深度的作用会在后面的算法体现到。</li><li><code>f[u][i]=f[f[u][i-1]][i-1];</code>这是<strong>倍增</strong>的递推式。<ul><li><code>f[u][i]</code>指的是，节点<code>u</code>的前<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span>个父节点。</li><li>例如<code>f[u][0]</code>指的是就是节点<code>u</code>的父节点。<code>f[u][1]</code>指的是就是节点<code>u</code>的父节点的父节点。<code>f[u][2]</code>指的是就是节点<code>u</code>的父节点的父节点的父节点的父节点。</li><li>在这个题目中的节点数最多是500000，所以最坏情况下是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>19</mn></msup></mrow><annotation encoding="application/x-tex">2^{19}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></span>，所以数组开到20就差不多够用了。（为保险可以多开一点）</li></ul></li><li>用LCA函数求解答案。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&lt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="keyword">while</span>(dep[x]&gt;dep[y])&#123;</span><br><span class="line">        x=f[x][<span class="built_in">lowbit</span>(dep[x]-dep[y])];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;<span class="comment">// or return y.</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">log2</span>(dep[x]);i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(f[x][i]!=f[y][i])&#123;</span><br><span class="line">            x=f[x][i];</span><br><span class="line">            y=f[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>先将两个节点移动至同一深度。<ul><li>这个操作可以通过不断使更深的节点变为它的父节点就行了。</li><li>为了快速移动，通过<strong>倍增</strong>来实现。</li></ul></li><li>如果移动至同一深度，两个节点变成同一节点了，那么就可以返回了。</li><li>如果不是同一节点，那么就再<strong>同时移动两个节点</strong>（变为它们的父节点），直至最后一个节点的下一层节点。</li><li>这个时候返回这层节点的父节点即为答案。</li></ul><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题面原文&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题面原文&quot;&gt;&lt;/a&gt; 题面原文&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P3379&quot;&gt;原题链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 </summary>
      
    
    
    
    <category term="算法" scheme="https://zoruasama.gitee.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://zoruasama.gitee.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LCA" scheme="https://zoruasama.gitee.io/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式 | 初入茅庐[0-9]+</title>
    <link href="https://zoruasama.gitee.io/2020/09/26/regexp_0/"/>
    <id>https://zoruasama.gitee.io/2020/09/26/regexp_0/</id>
    <published>2020-09-26T03:51:02.000Z</published>
    <updated>2020-09-26T15:34:25.701Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css"><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>正则表达式描述了一种字符串匹配的模式是怎么回事呢？正则表达式相信大家都很熟悉，但是正则表达式描述了一种字符串匹配的模式是怎么回事呢，下面就让小编带大家一起了解吧。</p><p>正则表达式描述了一种字符串匹配的模式，其实就是正则表达式可以用来匹配字符串，大家可能会很惊讶正则表达式怎么会描述了一种字符串匹配的模式呢？但事实就是这样，小编也感到非常惊讶。</p><p>这就是关于正则表达式描述了一种字符串匹配的模式的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！【大雾】</p><h1 id="是什么"><a class="markdownIt-Anchor" href="#是什么"></a> 是什么</h1><p>在阐述我自己的理解前，先搬出<a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin">百度百科</a>的内容撑撑场面。</p><div class="snote quote"><p class="p subtitle">度娘百科</p><p><b>正则表达式</b>，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。</p></div><blockquote><p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p></blockquote><blockquote><p>正则表达式是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，该模式描述在搜索文本时要匹配的一个或多个字符串。</p></blockquote><blockquote><p>给定一个正则表达式和另一个字符串，我们可以达到如下的目的：</p><ol><li>给定的字符串是否符合正则表达式的过滤逻辑（称作“匹配”）</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分。</li></ol></blockquote><p>从上面三段内容可以看到，关键词<strong>检索、过滤、匹配</strong>。而这些工作让我想到了 <code>?</code> <code>*</code>。<br />我相信大多数人对 <code>?</code> <code>*</code>的作用应该不陌生。在Word文档中，<code>?</code>用于匹配单一字符，<code>*</code>用于匹配多个字符。</p><p>例如下面这个例子。我在编辑这篇文章时，发现我居然蠢到把每一个<strong>正则表达式</strong>都打错了。只有<strong>第一个字</strong>和<strong>最后一个字</strong>是正确的。</p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200423223525.png" alt="" /></p><p><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200423223654.png" alt="" /></p><p>于是我果断地按下了 <code>Ctrl</code> <code>H</code>，勾选了使用通配符。由于<strong>第一个字</strong>和<strong>最后一个字</strong>是正确的，因此查找的内容只需为<code>正*式</code>即可检索到所有错误的<strong>正则表达式</strong>文本。然后点击<strong>全部替换</strong>。便轻松愉快地全部修正了。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200423223902.png" alt="" /></p><p>或许这时候你要问了。就这？就这？就这？<s>怎么可能会有sabi犯这种错误啊</s>这玩意儿有什么用？<br />嗐。您可别着急。如果说<strong>正则表达式</strong>并不是这种简单的<code>?</code>和<code>*</code>呢？</p><hr /><h1 id="快速上手"><a class="markdownIt-Anchor" href="#快速上手"></a> 快速上手</h1><h2 id="最简单的匹配情况"><a class="markdownIt-Anchor" href="#最简单的匹配情况"></a> 最简单的匹配情况</h2><p>最简单的匹配情况相当容易想到，即表达式本身等同于要匹配的表达式。例如使用<code>China</code>匹配下面的文本。就会匹配到下面两个<code>China</code>子字符串。</p><p>I love <span class="inline-tag red">China</span>. Long live <span class="inline-tag red">China</span>!</p><h2 id="简单的几个符号"><a class="markdownIt-Anchor" href="#简单的几个符号"></a> 简单的几个符号</h2><p>再来介绍几个简单的符号，引用我本学期的「编译原理」课程PPT中的一张图片。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200923230150.png" alt="" /></p><h3 id="选项-choice-among-alternatives"><a class="markdownIt-Anchor" href="#选项-choice-among-alternatives"></a> 选项 Choice among alternatives</h3><p>令<code>r</code>和<code>s</code>是两个正则表达式，那么<code>r|s</code>既可以匹配<code>r</code>能匹配的字符串，也能匹配<code>s</code>能匹配的字符串。<br />例如使用正则表达式<code>China|Long</code>就能匹配到三个子字符串了。</p><p>I love <span class="inline-tag red">China</span>. <span class="inline-tag red">Long</span> live <span class="inline-tag red">China</span>!<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200926211645.png" alt="" /></p><h3 id="连接-concatenation"><a class="markdownIt-Anchor" href="#连接-concatenation"></a> 连接 Concatenation</h3><p>连接<strong>没有符号</strong>，直接把一个正则表达式与另一个正则表达式相连即可。<br />例如之前举过的例子<code>China</code>能够匹配字符串中的<code>China</code>子串。这里是五个字符直接相连的正则表达式。<br />又例如，<code>(a|b)c</code>，能够匹配字符串 <code>ac</code>或<code>bc</code>。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200926211619.png" alt="" /></p><h3 id="重复-repetition"><a class="markdownIt-Anchor" href="#重复-repetition"></a> 重复 Repetition</h3><p>重复也被称作是<strong>闭包(closure)</strong>，用符号<code>*</code>表示，其内涵是<strong>可以把<code>*</code>所作用的表达式重复0次或多次</strong>。<br />注意，作用的表达式是<code>*</code>前的字符串，如果没有打括号的话，就只有一个字符。<br />例如<code>a*</code>能够匹配<strong>空字符串</strong>、<code>a</code>、<code>aa</code>、<code>aaa</code>等等。<br />再例如对于正则表达式<code>(a|bb)*</code>，能够匹配<strong>空字符串</strong>，<code>a</code>，<code>bb</code>，<code>aa</code>，<code>abb</code>，<code>bba</code>，<code>bbbb</code>，<code>aaa</code>，<code>aabbbba</code>，<code>abbabbabbbba</code>等等。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200926211425.png" alt="" /></p><h2 id="更多符号"><a class="markdownIt-Anchor" href="#更多符号"></a> 更多符号</h2><h3 id="熟悉的老朋友通配符"><a class="markdownIt-Anchor" href="#熟悉的老朋友通配符"></a> 熟悉的老朋友通配符 .</h3><p>这里的<code>.</code>的作用等同于我在<strong>是什么</strong>那一节中举例的Word软件中的<code>?</code>。<br />它可以匹配一个除了换行符以外的字符。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200926211912.png" alt="" /></p><h3 id="加号"><a class="markdownIt-Anchor" href="#加号"></a> 加号 +</h3><p>和重复<code>*</code>类似，不过加号是匹配子表达式<strong>一次或多次</strong>。<br /><code>zo(rua)+</code>能够匹配<code>zorua</code>，<code>zoruarua</code>，<code>zoruaruarua</code>等等。但是不能匹配<code>zo</code>。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200926211347.png" alt="" /></p><h3 id="问号"><a class="markdownIt-Anchor" href="#问号"></a> 问号 ?</h3><p>还是和重复<code>*</code>类似，不过问号是匹配子表达式<strong>0次或一次</strong>。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200926212040.png" alt="" /></p><h3 id="字符集合"><a class="markdownIt-Anchor" href="#字符集合"></a> 字符集合 [  ]</h3><p>匹配所包含的任意一个字符。例如，<code>[abc]</code> 可以匹配<code>plain</code>中的<code>a</code>。<code>[a-z]</code>表示一个范围，可以匹配二十六个字母。<br /><code>[a-cf-l]</code>表示字母的<code>a</code>到<code>c</code>，然后<code>f</code>到<code>l</code>。也可以使用数字<code>[0-9]</code><br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200926231016.png" alt="" /></p><h4 id="否定符号"><a class="markdownIt-Anchor" href="#否定符号"></a> 否定符号 ^</h4><p><code>[^xyz]</code>是对<code>[xyz]</code>的否定，即匹配除去<code>xyz</code>三个字母后的其他字符。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200926231300.png" alt="" /></p><h3 id="匹配次数大括号"><a class="markdownIt-Anchor" href="#匹配次数大括号"></a> 匹配次数大括号 {  }</h3><p>大括号内填写一个非负整数。<br />代表前面的表达式应该被匹配的次数。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200926231822.png" alt="" /></p><h4 id="限制下限"><a class="markdownIt-Anchor" href="#限制下限"></a> 限制下限</h4><p>如果填写为<code>&#123;n,&#125;</code>的形式，则可以匹配<code>n</code>次以上。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200926231914.png" alt="" /></p><h4 id="限制下限上限"><a class="markdownIt-Anchor" href="#限制下限上限"></a> 限制下限上限</h4><p>如果填写为<code>&#123;n,m&#125;</code>的形式，则可以匹配<code>n</code>次以上，最多<code>m</code>次。<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200926232001.png" alt="" /></p><h2 id="转义符号"><a class="markdownIt-Anchor" href="#转义符号"></a> 转义符号</h2><p><code>\</code>将下一个字符标记为一个<strong>特殊字符</strong>、或一个<strong>原义字符</strong>、或一个 <strong>向后引用</strong>、或一个<strong>八进制转义符</strong>。例如，‘n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 <code>\\</code> 匹配 <code>\</code> 而 <code>\(</code> 则匹配 <code>(</code>。</p><p>转义符号的设计使得一些难以输入的字符可以被匹配，或已被使用的字符(例如问号<code>?</code>被在正则表达式里被认为是0,1次匹配。)<br /><img src="https://gitee.com/zoruasama/Zorua-Pic/raw/master/20200926231557.png" alt="" /></p><h1 id="在线测试正则表达式"><a class="markdownIt-Anchor" href="#在线测试正则表达式"></a> 在线测试正则表达式</h1><p>除了可以在程序内调试正则表达式外，也可以使用在线的一些工具测试正则表达式。例如下面的几个网站。</p><ul><li><a href="https://c.runoob.com/front-end/854">菜鸟工具 - 正则表达式在线测试</a></li><li><a href="http://tool.chinaz.com/regex/">站长工具 - 正则表达式在线测试</a></li><li><a href="https://www.w3cschool.cn/tools/index?name=reg">w3school 在线正则表达式测试</a></li></ul><h1 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h1><p>关于正则表达式的内容还有很多，一篇文章难以详尽。日后如果有时间，我会再次学习。<br />在本篇文章中，多处参考了我的朋友Kooer的博文，在此表示对他衷心感谢。<br />您可以在<a href="https://dooerlly.github.io/2020/09/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/">这个链接</a>看到他的博文。</p><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://use.fontawesome.com/releases/v5.0.13/css/all.css&quot;&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;</summary>
      
    
    
    
    <category term="其他" scheme="https://zoruasama.gitee.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="正则表达式" scheme="https://zoruasama.gitee.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据库原理 | 一些填空题的摘录</title>
    <link href="https://zoruasama.gitee.io/2020/09/11/database_x/"/>
    <id>https://zoruasama.gitee.io/2020/09/11/database_x/</id>
    <published>2020-09-11T03:51:02.000Z</published>
    <updated>2021-11-24T05:16:47.531Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css"><h1 id="关于"><a class="markdownIt-Anchor" href="#关于"></a> 关于</h1><p>本文档由Zorua自行整理，如果有错误请在评论区反馈，或投递邮件至zoruasama@qq.com。<br />文档采用<code>CC BY-NC-ND 4.0许可协议</code>。转载本文档请保留本文档地址。<br />(?)如果您对此留有任何疑问，可以访问<a href="https://zh.wikipedia.org/wiki/%E5%89%B5%E4%BD%9C%E5%85%B1%E7%94%A8%E6%8E%88%E6%AC%8A%E6%A2%9D%E6%AC%BE">知识共享许可协议</a>以获取帮助。</p><h1 id="正文"><a class="markdownIt-Anchor" href="#正文"></a> 正文</h1><ol><li>数据管理技术经历了<strong>人工管理、文件系统、数据库管理</strong>三个阶段。</li><li>数据库系统中常用的三种模型有<strong>层次模型、网状模型、关系模型</strong>。</li><li>数据模型的三要素包括<strong>数据结构、数据操纵或操作、数据的完整性约束</strong>。</li><li>实体之间的联系可抽象为三类，它们是<strong>一对一、一对多、多对多</strong>。</li><li>在数据库设计中，<strong>数据字典</strong>是系统中各类数据描述的集合，是进行详细的数据收集和数据分析所获得的主要成果。</li><li>数据库系统一般由<strong>数据库、数据库应用系统、数据库管理系统、数据库管理员</strong>和用户构成。</li><li>数据库系统在运行过程中，可能会发生故障。故障主要有<strong>事务故障、系统故障、介质故障和计算机病毒</strong>四类。</li><li>并发控制的主要方法是采用<strong>封锁</strong>机制，其类型有<strong>共享锁</strong>和<strong>排它锁</strong>两种。</li><li>数据库的完整性是指数据的<strong>正确性</strong>和<strong>相容性</strong>。</li><li>在SQL语言中，为了数据库的安全性，设置了对数据的存取进行控制的语句，对用户授权使用<strong>GRANT</strong>语句，收回所授的权限使用<strong>REVOKE</strong>语句。</li><li><strong>数据库</strong>是长期存储在计算机内的、有组织、可共享的数据集合。</li><li>数据库系统的三级模式结构是指数据库系统是由<strong>模式</strong>、<strong>外模式</strong>、<strong>内模式</strong>三级构成的。</li><li>E-R图一般在数据库设计的<strong>概念结构设计</strong>阶段使用。</li><li><strong>事务</strong>是用户定义的一个数据库操作序列，是一个不可分割的工作单位，它具有<strong>原子性</strong>、<strong>一致性</strong>、<strong>隔离性</strong>、<strong>持续性</strong>四个特性。</li><li>数据库系统中，系统故障通常称为<strong>软故障</strong>，介质故障称为<strong>硬故障</strong>。</li><li>关系操作的特点是<strong>集合</strong>操作。</li><li>若事务T对数据对象A加了S锁，则其他事务只能对数据A再加<strong>S</strong>锁，不能加<strong>X</strong>锁，直到事务T释放A上的锁。</li><li>现实世界进行第一层抽象的模型，称为<strong>概念</strong>模型；对现实世界进行第二层抽象的模型，称为<strong>数据</strong>模型。</li><li>在数据库技术中，编写应用程序的语言仍然是C—类高级语言，这些语言被称为<strong>宿主语言或主语言</strong>。</li><li>层次、网状的DML属于<strong>过程性</strong>语言，而关系型DML属于<strong>非过程性</strong>语言。</li><li>关系模式的操作异常问题往往是由<strong>数据冗余</strong>引起的。</li><li>恢复的基本原则是<strong>冗余</strong>。要使数据库具有可恢复性，在平时要做好两件事：<strong>转储</strong>备份和<strong>记“日志”</strong>。</li><li>如果对数据库的并发操作不加以控制，则会带来的问题：<strong>丢失更新</strong>、<strong>读“脏数据”<strong>和</strong>不可重复读</strong>。</li><li>事务的执行次序称为<strong>调度</strong>。</li><li>判断一个并发调度是否正确，可以用<strong>可串行化</strong>概念来解决。</li><li>封锁能避免错误的发生，但会引起<strong>活锁和死锁</strong>问题。</li><li>S封锁增加了并发度，但缺点是<strong>容易发生死锁</strong>。</li><li>两段式封锁是可串行化的<strong>充分</strong>条件。</li><li>SQL中的安全性机制，主要有两个：<strong>视图</strong>和<strong>授权</strong>。</li><li>数据库的基本特点是<strong>数据可以共享</strong>或<strong>数据结构化、数据独立性、数据冗余度小，易扩充、统一管理和控制</strong>。</li><li>数据库技术中采取分级方法将数据库的结构划分成多个层次，是为了提高数据库的<strong>逻辑独立性</strong>和<strong>物理独立性</strong>。</li><li>数据库是长期存储在计算机内，有<strong>组织</strong>的，可<strong>共享</strong>的数据集合</li><li>现实世界的事物反映到人的头脑中经过思维加工是数据，这一过程要经历三个领域，依次是<strong>现实世界</strong>，<strong>信息世界</strong>和<strong>计算机世界</strong>。</li><li>关系数据库规范化是为解决关系数据库中<strong>插入、删除和数据冗余</strong>问题而引入的。</li><li>关系规范中的删除操作异常是指<strong>不该删除的数据被删除</strong>，插入操作异常是指<strong>应该插入的数据未被插入</strong>。</li><li>设计性能较优的关系模式称为规范化，规范化主要的理论依据是<strong>关系规范化理论</strong>。</li><li>规范化理论是关系数据库进行逻辑设计的理论依据。根据这个理论，关系数据库中的关系必须满足：其每一属性都是<strong>不可分解的</strong>。</li><li>关系模型是把实体之间的联系用<strong>二维表格</strong>表示。</li><li>在关系数据库中，当关系的类型改变时，用户程序也可以不变，这是<strong>数据的逻辑独立性</strong>。</li><li>当数据库的存储结构改变时，可相应修改<strong>模式/内模式映像</strong>，从而保持模式不变。</li><li>在数据库系统的三级模式体系结构中，描述数据在数据库中的物理结构或存储方式的是<strong>内模式</strong>。</li><li>在数据库系统的三级组织结构中，DBA视图是<strong>概念模式</strong>，系统程序员视图是<strong>内模式</strong>，用户视图是<strong>外模式</strong>。</li><li>在数据库的三级模式体系结构中，模式与内模式之间的映象<strong>模式/内模式</strong>，实现了数据库的<strong>物理</strong>独立性。</li><li>描述概念模型常用的方法是<strong>实体–联系方法</strong>。</li><li>在数据库设计中，将E-R图转换成关系数据模型的过程属于<strong>逻辑设计阶段</strong>。</li><li>在数据库设计的4个阶段中，每个阶段都有自己的设计内容。“在哪些表、在哪些属性上、建什么样的索引”，这一内容应该属于<strong>物理</strong>设计阶段。</li><li>在登录日志文件时，应该先<strong>登录日志文件</strong>，后<strong>更新数据库</strong>。</li><li>对数据对象施加封锁，可能会引起活锁和死锁问题。预防死锁通常有<strong>一次封锁法</strong>和<strong>顺序封锁法</strong>两种方法。</li><li>数据库管理系统通常提供授权功能来控制不同用户访问数据的权限，这主要是为了实现数据库的<strong>安全性</strong>。</li></ol><h1 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h1><p><button>隐藏答案</button></p><script src="https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js"></script><script>$('button').on('click',function(){        console.log("By Zorua");         $('strong').css('color',"white");     })</script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.7.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://use.fontawesome.com/releases/v5.0.13/css/all.css&quot;&gt;
&lt;h1 id=&quot;关于&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#关于&quot;&gt;</summary>
      
    
    
    
    <category term="数据库原理" scheme="https://zoruasama.gitee.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="数据库原理" scheme="https://zoruasama.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/"/>
    
    <category term="数据库" scheme="https://zoruasama.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
